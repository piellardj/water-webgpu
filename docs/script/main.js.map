{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACP;AACA;AACA;AACA,WAAW,4CAA4C;AACvD;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDwC;AACN;AACE;AACF;AACA;AACA;AACE;AACF;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTM;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AAC7S;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/aiC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACvd;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACreiC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB;AACA,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB;AACA,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACttB;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzwBiC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,+CAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA,YAAY,+CAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP,wBAAwB,kDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;;AAEzD;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,YAAY,MAAM;AAClB;;AAEO;AACP,oBAAoB,kDAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB;AACA,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,+CAAgB,+BAA+B,+CAAgB,+BAA+B,+CAAgB;AAC/I;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,uEAAuE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB,yEAAyE,+CAAgB;AAC/zC;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACr3DiC;AACN;AACA;AACA;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,cAAc;AAC1B,YAAY,YAAY;AACxB;;AAEO;AACP;AACA;;AAEA,UAAU,+CAAgB;AAC1B;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B,YAAY,cAAc;AAC1B,YAAY,YAAY;AACxB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C,iDAAiD;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ,oBAAoB,+CAAgB;AACpC;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA,WAAW,8CAAe;AAC1B,WAAW,8CAAe;AAC1B,WAAW,8CAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;;AAErC;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,GAAG;AACd,WAAW,GAAG;AACd,WAAW,GAAG;AACd,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,YAAY,2CAAU;AAC7B;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,iBAAiB,gDAAe;AACvC;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,WAAW,0CAAS;AAC3B;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,YAAY,2CAAU;AAC7B;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;AACA;;AAEO,WAAW,0CAAS;AAC3B;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO,aAAa,4CAAW;AAC/B;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;AACA;;AAEO,oBAAoB,mDAAkB;AAC7C;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO,gBAAgB,+CAAc;AACrC;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO,kBAAkB,iDAAgB;AACzC;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO,aAAa,4CAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,4CAAW;AAC3B,kBAAkB,gDAAe;AACjC,kBAAkB,gDAAe;AACjC;AACA,cAAc,yCAAQ;;AAEtB;AACA,MAAM,2CAAU;AAChB,UAAU,yCAAQ,sBAAsB,2CAAU;AAClD,MAAM,+CAAc;AACpB;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,2CAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,aAAa,4CAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrsBuC;AACN;AACA;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;;AAEO;AACP,eAAe,kDAAmB;;AAElC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP,eAAe,kDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP,eAAe,kDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP,eAAe,kDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA,cAAc,4CAAW;AACzB,EAAE,iDAAgB;AAClB,cAAc,kDAAmB;AACjC,EAAE,oDAAmB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,eAAe;AAC3B,YAAY,MAAM;AAClB;;AAEO,cAAc,0CAAS;AAC9B;AACA;AACA,YAAY,MAAM;AAClB,YAAY,eAAe;AAC3B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO,cAAc,0CAAS;AAC9B;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB,YAAY,eAAe;AAC3B,YAAY,MAAM;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6CAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6CAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,6CAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA,sBAAsB,+CAAgB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;;AAEO,UAAU,yCAAQ;AACzB;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;;AAEO,aAAa,4CAAW;AAC/B;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;AACA;;AAEO,oBAAoB,mDAAkB;AAC7C;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,eAAe;AAC1B,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACjoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACl0BwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,UAAU,8CAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,eAAe;AAC1B,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB;AACnI;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/mBuC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,UAAU,8CAAe;AACzB,UAAU,8CAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,cAAc;;AAEd;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,cAAc;;AAEd;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,cAAc;;AAEd;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AACxN;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClxBuC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;;AAEnC,MAAM,kDAAmB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,kDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB;;AAEO;AACP,wBAAwB;AACxB;AACA;;AAEA;AACA;;AAEA;AACA,SAAS,8CAAe;AACxB,SAAS,8CAAe;AACxB;AACA,IAAI;;AAEJ;AACA,SAAS,8CAAe;AACxB,SAAS,8CAAe;AACxB;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,SAAS;AACtB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB,qEAAqE,+CAAgB;AAC7S;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrpBD,8HAAuD;AACvD,0GAAuH;AACvH,6IAAkE;AAClE,yJAA0E;AAE1E,0HAAyD;AACzD,gIAA6D;AAC7D,uHAAuD;AACvD,4IAAoE;AAsCpE,MAAM,MAAM;IAmCR,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;QACjD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QAErC,MAAM,mBAAmB,GAAwB;YAC7C,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,mBAAmB,EAAE,MAAM,CAAC,kBAAkB;SACjD,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,+BAAc,CAAC,IAAI,CAAC,MAAM,EAAE;YAClD,kBAAkB,EAAE,WAAW,CAAC,kBAAkB;YAClD,kBAAkB,EAAE,WAAW,CAAC,kBAAkB;YAClD,mBAAmB;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YACtC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,mBAAmB;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,GAAG,IAAI,2BAAY,CAAC,IAAI,CAAC,MAAM,EAAE;YAC9C,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;YAC9C,mBAAmB;YACnB,cAAc,EAAE,IAAI,CAAC,aAAa;YAClC,eAAe,EAAE,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;SAC9C,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,MAAM,EAAE;YAC5C,mBAAmB;YACnB,cAAc,EAAE,IAAI,CAAC,aAAa;YAClC,eAAe,EAAE,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;SAC9C,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,sCAAiB,CAAC,IAAI,CAAC,MAAM,EAAE;YACxD,mBAAmB;YACnB,eAAe,EAAE,+BAAc,CAAC,yBAAyB;SAC5D,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAEM,OAAO,CAAC,cAAiC,EAAE,EAAU,EAAE,OAA8B,EAAE,uBAA+C;QACzI,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAC5C,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YACjC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC7B;QAED,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAEnC,IAAI,EAAE,GAAG,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;YACvD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAE7C,IAAI,uBAAuB,EAAE;gBACzB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,cAAc,EAAE,uBAAuB,CAAC,CAAC;aAC3E;YAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAE1B,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;SACtC;IACL,CAAC;IAEM,YAAY;QACf,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpC,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;QACjD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QAErC,MAAM,mBAAmB,GAAwB;YAC7C,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,mBAAmB,EAAE,MAAM,CAAC,kBAAkB;SACjD,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;YACtB,kBAAkB,EAAE,WAAW,CAAC,kBAAkB;YAClD,kBAAkB,EAAE,WAAW,CAAC,kBAAkB;YAClD,mBAAmB;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAChB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,mBAAmB;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YACpB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;YAC9C,mBAAmB;YACnB,cAAc,EAAE,IAAI,CAAC,aAAa;YAClC,eAAe,EAAE,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;SAC9C,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACnB,mBAAmB;YACnB,cAAc,EAAE,IAAI,CAAC,aAAa;YAClC,eAAe,EAAE,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;SAC9C,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YACzB,mBAAmB;YACnB,eAAe,EAAE,+BAAc,CAAC,yBAAyB;SAC5D,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,MAAM,qBAAqB,GAAG,IAAI,4BAAY,CAAC,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QACtF,MAAM,0BAA0B,GAAG,IAAI,oCAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,qBAAqB,EAAE,IAAI,CAAC,CAAC;QACzG,MAAM,kBAAkB,GAAG,0BAA0B,CAAC,gBAAgB,EAAE,CAAC;QAEzE,IAAI,kBAAkB,GAAoB,EAAE,CAAC;QAC7C,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,MAAM,qBAAqB,GAAG,IAAI,4BAAY,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC7E,MAAM,0BAA0B,GAAG,IAAI,oCAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC1G,kBAAkB,GAAG,0BAA0B,CAAC,gBAAgB,EAAE,CAAC;SACtE;QAED,MAAM,cAAc,GAAG,kBAAkB,CAAC,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;QAC7E,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACnD,IAAI,EAAE,MAAM,CAAC,kBAAkB,CAAC,IAAI,GAAG,cAAc;YACrD,KAAK,EAAE,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,OAAO;SAClF,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;QAE5G,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;IAC3G,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,gBAAyB;QAChD,IAAI,gBAAgB,EAAE;YAClB,OAAO,+BAAc,CAAC,wBAAwB,GAAG,IAAI,CAAC;SACzD;QACD,OAAO,+BAAc,CAAC,yBAAyB,CAAC;IACpD,CAAC;IAEM,MAAM,KAAK,oBAAoB;QAClC,OAAO,mBAAQ,CAAC,qBAAqB,CAAC;IAC1C,CAAC;IACD,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;IACzC,CAAC;IACD,IAAW,oBAAoB;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;IAC9C,CAAC;IACD,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,IAAW,aAAa;QACpB,OAAO;YACH,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,SAAS;YACzC,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,YAAY,EAAE,IAAI,CAAC,aAAa;SACnC,CAAC;IACN,CAAC;IAEO,aAAa,CAAC,cAAiC;QACnD,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YACtC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC9B;IACL,CAAC;;AAaD,wBAAM;AAvOkB,yBAAkB,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE;IACjF,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;IAChD,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;IAC1C,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;IAChD,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;IACxC,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;IACpD,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;CAClD,CAAC,CAAC;AACoB,8BAAuB,GAA4B;IACtE,iBAAiB,EAAE,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,UAAU,CAAC;IAC1E,eAAe,EAAE,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,QAAQ,CAAC;IACtE,aAAa,EAAE,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,MAAM,CAAC;IAClE,iBAAiB,EAAE,MAAM,CAAC,kBAAkB,CAAC,IAAI;CACpD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DN,kHAAsD;AACtD,iIAA0D;AAiB1D,MAAM,qBAAqB;IAUvB,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,MAAM,cAAc,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE;YACvD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE;YACxD,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SAC7C,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAChD,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAC5C,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACnD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACrD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB;oBACzD,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC;iBACzF,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,qBAAqB,CAAC,cAAc;iBACtD;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1G,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,GAAG,qBAAqB,CAAC,cAAc,CAAC,CAAC;QAElH,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,eAAe;iBAC7D;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,eAAe;iBACrE;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC1C,CAAC;;AAID,sDAAqB;AAzFG,oCAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBzD,kHAAsD;AACtD,iIAA0D;AAiB1D,MAAM,iBAAiB;IAUnB,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACjD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB;oBACrD,OAAO,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,IAAI,CAAC,QAAQ,CAAC;iBACrG,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,iBAAiB,CAAC,cAAc;iBAClD;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,iBAAiB,CAAC,cAAc,CAAC,CAAC;QACtG,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,eAAe;iBACjD;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,eAAe;iBAC7D;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,uBAAuB,CAAC,eAAe;iBACzD;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,0BAA0B,CAAC,eAAe;iBAC5D;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC1C,CAAC;;AAID,8CAAiB;AArFO,gCAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBzD,iIAA0D;AAE1D,iJAAmE;AACnE,kIAA0D;AAC1D,uGAAyC;AACzC,+HAAwD;AACxD,4HAAuD;AACvD,0GAA2C;AAqC3C,MAAM,QAAQ;IA0BV,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,uBAAuB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;YACrD,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,IAAI;YAC9C,KAAK,EAAE,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO;SAC1D,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE;YAC3F,WAAW,EAAE,EAAE;YACf,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC;YACd,aAAa,EAAE,CAAC,EAAG,sCAAsC;SAC5D,CAAC,CAAC;QACH,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,CAAC;QAErC,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;QAC3C,IAAI,CAAC,0BAA0B,GAAG,WAAW,CAAC,0BAA0B,CAAC;QACzE,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QAErC,IAAI,CAAC,UAAU,GAAG,IAAI,wBAAU,CAAC,MAAM,EAAE;YACrC,eAAe,EAAE,IAAI,CAAC,eAAe;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,GAAG,IAAI,gDAAqB,CAAC,MAAM,EAAE;YAC3D,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;SAChD,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,GAAG,IAAI,qCAAgB,CAAC,MAAM,EAAE;YACjD,eAAe,EAAE,IAAI,CAAC,eAAe;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,IAAI,sBAAS,CAAC,MAAM,EAAE;YACnC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe;YAClD,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO;SAC7B,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,uCAAiB,CAAC,MAAM,EAAE;YACnD,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe;YACtD,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;YACrD,0BAA0B,EAAE,IAAI,CAAC,0BAA0B;SAC9D,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,GAAG,IAAI,oCAAgB,CAAC,MAAM,EAAE;YACjD,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC,CAAC;IACP,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACxC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAEnD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC9C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACvC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAE/C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAC;QAEvC,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;QAC3C,IAAI,CAAC,0BAA0B,GAAG,WAAW,CAAC,0BAA0B,CAAC;QACzE,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QAErC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;YAClB,eAAe,EAAE,IAAI,CAAC,eAAe;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;YAC7B,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;SAChD,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;YACxB,eAAe,EAAE,IAAI,CAAC,eAAe;SACxC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YACjB,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe;YAClD,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO;SAC7B,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;YACzB,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe;YACtD,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;YACrD,0BAA0B,EAAE,IAAI,CAAC,0BAA0B;SAC9D,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC;YACxB,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC,CAAC;IACP,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAE1E,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YAC/C,IAAI,EAAE,QAAQ,CAAC,cAAc,CAAC,IAAI,GAAG,UAAU;YAC/C,KAAK,EAAE,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,MAAM;SACxD,CAAC,CAAC;QAEH,MAAM,0BAA0B,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YAC9D,IAAI,EAAE,WAAW,CAAC,iBAAiB,GAAG,UAAU;YAChD,KAAK,EAAE,cAAc,CAAC,MAAM,GAAG,cAAc,CAAC,OAAO;SACxD,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG;YACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC;QAEF,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,0BAA0B,EAAE,QAAQ,EAAE,CAAC;IAC7E,CAAC;IAED,IAAW,oBAAoB;QAC3B,OAAO;YACH,0BAA0B,EAAE,IAAI,CAAC,0BAA0B,CAAC,SAAS;YACrE,uBAAuB,EAAE,IAAI,CAAC,uBAAuB,CAAC,SAAS;SAClE,CAAC;IACN,CAAC;IAED,IAAW,eAAe;QACtB,OAAO;YACH,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,cAAc,EAAE,QAAQ,CAAC,cAAc;YACvC,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC;IACN,CAAC;;AAUD,4BAAQ;AAvLgB,uBAAc,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE;IACzE,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;IAClD,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;CAC7C,CAAC,CAAC;AACoB,8BAAqB,GAA0B;IAClE,uBAAuB,EAAE,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;IACpF,iBAAiB,EAAE,QAAQ,CAAC,cAAc,CAAC,IAAI;CAClD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDN,kHAAsD;AACtD,iIAA0D;AAkB1D,MAAM,SAAS;IAkBX,YAAmB,MAAiB,EAAE,IAAU;QAJxC,sBAAiB,GAAwB,IAAI,CAAC;QAE9C,mBAAc,GAAqB,IAAI,CAAC;QAG5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACjD,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;YAC3B,SAAS,CAAC,cAAc,GAAG,MAAM,CAAC,qBAAqB,CAAC;gBACpD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;wBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM;wBACpD,OAAO,EAAE;4BACL,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;yBAC7B;wBACD,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;qBAC3B,CAAC;oBACF,UAAU,EAAE,MAAM;oBAClB,SAAS,EAAE;wBACP,aAAa,EAAE,SAAS,CAAC,cAAc;wBACvC,QAAQ,EAAE,SAAS,CAAC,mBAAmB;qBAC1C;iBACJ;aACJ,CAAC,CAAC;SACN;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;QAC7C,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC;QAEvD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC;QAEvD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;IACrD,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;YAC3B,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QAED,MAAM,UAAU,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACrD,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAC3B,UAAU,CAAC,GAAG,EAAE,CAAC;QAEjB,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;gBAC7B,MAAM,IAAI,KAAK,EAAE,CAAC;aACrB;YAED,MAAM,QAAQ,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;YACnD,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,GAAG,EAAE,CAAC;SAClB;IACL,CAAC;IAEO,SAAS,CAAC,IAA2B;QACzC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE3C,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACvC;IACL,CAAC;IAEO,QAAQ,CAAC,IAA2B;QACxC,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;gBACzB,MAAM,IAAI,KAAK,EAAE,CAAC;aACrB;YAED,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC7C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAC9C;IACL,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAE9B,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC;QAChC,OAAO,KAAK,EAAE;YACV,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;YAC/B,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACtB,KAAK,GAAG,KAAK,CAAC,cAAc,CAAC;SAChC;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;QAC7C,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC;QAEvD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAC;QAEvD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;IACrD,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE;YAC5D,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC;QAE3E,MAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACrD,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY;YACnC,KAAK,EAAE,cAAc,CAAC,OAAO;SAChC,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAChD,MAAM,EAAE,SAAS,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtD,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,eAAe;iBAC7C,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,iBAAiB,CAAC,eAAe;iBAC9C,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,IAAI,cAAc,GAAqB,IAAI,CAAC;QAC5C,IAAI,iBAAiB,GAAwB,IAAI,CAAC;QAElD,IAAI,YAAY,GAAG,CAAC,EAAE,EAAE,+CAA+C;YACnE,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;gBAC7B,SAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;oBAC3D,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;4BAC5C,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ;4BACtD,OAAO,EAAE;gCACL,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;6BAC7B;4BACD,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;yBAC3B,CAAC;wBACF,UAAU,EAAE,MAAM;wBAClB,SAAS,EAAE;4BACP,aAAa,EAAE,SAAS,CAAC,cAAc;yBAC1C;qBACJ;iBACJ,CAAC,CAAC;aACN;YAED,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;gBAC5C,MAAM,EAAE,SAAS,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACxD,OAAO,EAAE;oBACL;wBACI,OAAO,EAAE,CAAC;wBACV,QAAQ,EAAE,iBAAiB,CAAC,eAAe;qBAC9C,EAAE;wBACC,OAAO,EAAE,CAAC;wBACV,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,eAAe;qBAC7C,EAAE;wBACC,OAAO,EAAE,CAAC;wBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;qBAC1C;iBACJ;aACJ,CAAC,CAAC;YAEH,cAAc,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE;gBACxC,WAAW,EAAE,iBAAiB;gBAC9B,UAAU,EAAE,YAAY;gBACxB,IAAI,EAAE,IAAI,CAAC,IAAI;aAClB,CAAC,CAAC;SACN;QAED,OAAO,EAAE,YAAY,EAAE,iBAAiB,EAAE,eAAe,EAAE,iBAAiB,EAAE,cAAc,EAAE,CAAC;IACnG,CAAC;;AAID,8BAAS;AAxMe,6BAAmB,GAAG,CAAC,CAAC;AACxB,wBAAc,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;AAGnE,0BAAgB,GAA8B,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBtE,kHAAsD;AACtD,iIAA0D;AAa1D,MAAM,gBAAgB;IAWlB,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACjD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB;oBACpD,OAAO,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC;iBAChE,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,gBAAgB,CAAC,cAAc;iBACjD;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAErG,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACnD,IAAI,EAAE,CAAC,WAAW,CAAC,iBAAiB,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU;YAC3E,KAAK,EAAE,cAAc,CAAC,OAAO;SAChC,CAAC,CAAC;QAEH,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,eAAe;iBAC7D;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,eAAe,CAAC,eAAe;iBAC5C;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC3D,CAAC;;AAID,4CAAgB;AAxFQ,+BAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdzD,kHAAsD;AACtD,iIAA0D;AAiB1D,MAAM,gBAAgB;IAYlB,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAChD,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAC5C,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACnD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACrD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,gBAAgB;oBACpD,OAAO,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC;iBAC9G,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,gBAAgB,CAAC,cAAc;iBACjD;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC;QACtE,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,mBAAmB,CAAC;QAC3D,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;QAClB,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACvJ,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;QAEhC,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC;QACtE,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,mBAAmB,CAAC;QAC3D,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1G,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,GAAG,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAE7G,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC7E,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QAED,MAAM,mBAAmB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACvD,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,IAAI;YACnD,KAAK,EAAE,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,QAAQ;SAC1D,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YACxD,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,eAAe;iBACrE;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,eAAe;iBAC7D;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,mBAAmB,CAAC,eAAe;iBAChD;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,mBAAmB,EAAE,SAAS,EAAE,CAAC;IAC/D,CAAC;;AAID,4CAAgB;AA7GQ,+BAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBzD,kHAAsD;AACtD,iIAA0D;AAY1D,MAAM,UAAU;IAUZ,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACjD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU;oBAC9C,OAAO,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC;iBAChE,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,UAAU,CAAC,cAAc;iBAC3C;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC;QAE/F,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,eAAe;iBAC7D;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC1C,CAAC;;AAID,gCAAU;AA1Ec,yBAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;ACZzD,iHAAiE;AAQjE,MAAM,YAAY;IAUd,YAAmB,SAAkC;QAF7C,uBAAkB,GAAyB,EAAE,CAAC;QAGlD,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAS,CAAC,0BAAa,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAS,CAAC,0BAAa,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,sBAAS,CAAC,0BAAa,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAE5D,MAAM,cAAc,GAAkB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QACzD,MAAM,cAAc,GAAkB,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QAEzD,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,cAAc,CAAC,CAAC,CAAE,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC;gBACrG,cAAc,CAAC,CAAC,CAAE,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC;aACxG;SACJ;QACD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACzC,CAAC;IAEM,QAAQ,CAAC,KAA4B;QACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,IAAI,KAAK,CAAC,CAAC,CAAE,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAE,IAAI,KAAK,CAAC,CAAC,CAAE,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAE,EAAE;gBAC5E,OAAO,KAAK,CAAC;aAChB;SACJ;QAED,OAAO,IAAI,CAAC,6BAA6B,CAAC,0BAAa,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,6BAA6B,CAAC,0BAAa,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACnF,IAAI,CAAC,6BAA6B,CAAC,0BAAa,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5F,CAAC;IAEM,WAAW,CAAC,YAA2B,EAAE,SAAgC;QAC5E,IAAI,QAAgC,CAAC;QAErC,MAAM,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC7D,OAAO,OAAO,CAAC,SAAS,KAAK,YAAY;gBACrC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gBAClC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,IAAI,iBAAiB,EAAE;YACnB,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,CAAC;SACzC;aAAM;YACH,IAAI,YAAY,KAAK,0BAAa,CAAC,CAAC,EAAE;gBAClC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;aACjE;iBAAM,IAAI,YAAY,KAAK,0BAAa,CAAC,CAAC,EAAE;gBACzC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;aACjE;iBAAM;gBACH,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;aACjE;YACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;gBACzB,SAAS,EAAE,YAAY;gBACvB,MAAM,EAAE,SAAS;gBACjB,QAAQ;aACX,CAAC,CAAC;SACN;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,6BAA6B,CAAC,YAA2B,EAAE,SAAgC,EAAE,KAAa;QAC9G,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;QAE3D,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC5B,IAAI,OAAO,CAAC,IAAI,IAAI,KAAK,IAAI,KAAK,IAAI,OAAO,CAAC,EAAE,EAAE;gBAC9C,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAGG,oCAAY;;;;;;;;;;;;;;AC1FhB,iHAAsD;AAOtD,SAAS,YAAY,CAAC,CAAS,EAAE,MAAc;IAC3C,OAAO,CAAC,IAAI,MAAM,EAAE;QAChB,CAAC,IAAI,MAAM,CAAC;KACf;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AAED,MAAM,gBAAgB;IAKlB,YACqB,aAAqB,EACrB,IAAkB,EAClB,gBAAyB;QAFzB,kBAAa,GAAb,aAAa,CAAQ;QACrB,SAAI,GAAJ,IAAI,CAAc;QAClB,qBAAgB,GAAhB,gBAAgB,CAAS;QAC1C,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,aAAa,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACxD,CAAC;IAEM,gBAAgB;QACnB,MAAM,SAAS,GAAoB,EAAE,CAAC;QAEtC,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE;YACxE,MAAM,WAAW,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YAC5D,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC9B,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;aAClD;iBAAM,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE;gBACrB,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;aACtD;YACD,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;YAC3D,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE;gBACxE,MAAM,WAAW,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC;gBACxD,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,GAAG,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;gBAEpF,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,0BAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAChE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;aAClD;SACJ;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAEO,MAAM,CAAC,MAAc,EAAE,CAAS,EAAE,CAAS,EAAE,SAA0B,EAAE,QAAgC;QAC7G,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;YAC3D,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACtO,IAAI,UAAU,EAAE;gBACZ,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;oBAC5B,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,EAAE,EAAE;wBACtC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1B,MAAM;qBACT;iBACJ;aACJ;SACJ;IACL,CAAC;CACJ;AAGG,4CAAgB;;;;;;;;;;;;;;ACrEpB,kHAAsC;AAEtC,MAAM,IAAI;IACC,MAAM,CAAC,IAAI,CAAC,KAAa;QAC5B,6DAA6D;QAC7D,MAAM,QAAQ,GAAoB,EAAE,CAAC;QACrC,MAAM,SAAS,GAAe,EAAE,CAAC;QAEjC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAChC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,CAAS,EAAE,EAAE;YACtC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAE7B,IAAI,OAAO,KAAK,GAAG,EAAE,EAAE,iBAAiB;gBACpC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,kFAAkF,IAAI,IAAI,CAAC,CAAC;iBACrI;gBACD,QAAQ,CAAC,IAAI,CAAC;oBACV,UAAU,CAAC,SAAS,CAAC,CAAC,CAAE,CAAC;oBACzB,UAAU,CAAC,SAAS,CAAC,CAAC,CAAE,CAAC;oBACzB,UAAU,CAAC,SAAS,CAAC,CAAC,CAAE,CAAC;iBAC5B,CAAC,CAAC;aACN;iBAAM,IAAI,OAAO,KAAK,GAAG,EAAE,EAAE,eAAe;gBACzC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACtB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,4EAA4E,IAAI,IAAI,CAAC,CAAC;iBAC/H;gBAED,kEAAkE;gBAClE,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;oBAC1C,MAAM,OAAO,GAA6B;wBACtC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;wBAC/B,CAAC,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;wBACpC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAE,CAAC;qBACnC,CAAC;oBAEF,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;wBAC1B,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE;4BACxC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,yBAAyB,MAAM,sBAAsB,IAAI,IAAI,CAAC,CAAC;yBACxG;qBACJ;oBAED,SAAS,CAAC,IAAI,CAAC,IAAI,mBAAQ,CACvB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAE,EACzB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAE,EACzB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAE,CAC5B,CAAC,CAAC;iBACN;aACJ;iBAAM;gBACH,IAAI,IAAI,KAAK,EAAE,EAAE;oBACb,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,sDAAsD,IAAI,IAAI,CAAC,CAAC;iBACnG;aACJ;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED,YACoB,SAAkC;QAAlC,cAAS,GAAT,SAAS,CAAyB;IACtD,CAAC;CACJ;AAGG,oBAAI;;;;;;;;;;;;AChER,mCAAmC;;;;;;AAEnC,0HAAmD;AACnD,yIAAmD;AACnD,yIAAmD;AACnD,4IAAqD;AACrD,+IAAuD;AACvD,kJAAyD;AACzD,qJAA2D;AAE3D,gIAAuD;AACvD,iHAA6C;AAC7C,0HAAmD;AACnD,uHAAiD;AACjD,+IAAgE;AAEhE,MAAM,SAAS,GAAG;IACd,MAAM,EAAN,oBAAM;IACN,CAAC,EAAD,yBAAC;IACD,CAAC,EAAD,yBAAC;IACD,EAAE,EAAF,0BAAE;IACF,GAAG,EAAH,2BAAG;IACH,IAAI,EAAJ,4BAAI;IACJ,KAAK,EAAL,6BAAK;CACR,CAAC;AAWe,8BAAS;AAT1B,MAAM,SAAS,GAAG;IACd,QAAQ,EAAR,sBAAQ;IACR,GAAG,EAAH,iBAAG;IACH,MAAM,EAAN,oBAAM;IACN,KAAK,EAAL,mBAAK;IACL,YAAY,EAAZ,2BAAY;CACf,CAAC;AAIe,8BAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpC1B,6GAAsC;AAEtC,SAAS,KAAK,CAAC,CAAwB,EAAE,CAAwB;IAC7D,OAAO;QACH,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACd,CAAC;AACN,CAAC;AACD,SAAS,YAAY,CAAC,EAAyB,EAAE,EAAyB;IACtE,OAAO;QACH,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;KAChC,CAAC;AACN,CAAC;AACD,SAAS,SAAS,CAAC,CAAgB;IAC/B,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9C,IAAI,aAAa,GAAG,CAAC,EAAE;QACnB,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;QACf,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;QACf,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;KAClB;SAAM;QACH,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACT,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACT,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;KACZ;AACL,CAAC;AAED,MAAM,QAAQ;IAGV,YACoB,EAAyB,EACzB,EAAyB,EACzB,EAAyB;QAFzB,OAAE,GAAF,EAAE,CAAuB;QACzB,OAAE,GAAF,EAAE,CAAuB;QACzB,OAAE,GAAF,EAAE,CAAuB;QACzC,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1B,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1B,MAAM,MAAM,GAAG,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACtC,SAAS,CAAC,MAAM,CAAC,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;CACJ;AAGG,4BAAQ;;;;;;;;;;;;;;ACtCZ,IAAK,aAIJ;AAJD,WAAK,aAAa;IACd,2CAAC;IACD,2CAAC;IACD,2CAAC;AACL,CAAC,EAJI,aAAa,KAAb,aAAa,QAIjB;AA2HG,sCAAa;AAhHjB,SAAS,KAAK,CAAC,CAAwB,EAAE,CAAwB;IAC7D,OAAO;QACH,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACd,CAAC;AACN,CAAC;AACD,SAAS,GAAG,CAAC,CAAwB,EAAE,CAAwB;IAC3D,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC;AAED;;GAEG;AACH,SAAS,oBAAoB,CAAC,QAAoB,EAAE,CAAwB;IACxE,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3C,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3C,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjC,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACxB,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACxB,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACxB,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACxB,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACxB,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;IACpC,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;IAC/D,MAAM,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;IAC/D,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACpB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrB,CAAC;AAED,MAAM,SAAS;IAGX,YAAmB,SAAwB,EAAE,SAAkC;QAC3E,IAAI,MAAiB,CAAC;QACtB,IAAI,MAAiB,CAAC;QACtB,IAAI,aAAwB,CAAC;QAC7B,QAAQ,SAAS,EAAE;YACf,KAAK,aAAa,CAAC,CAAC;gBAChB,aAAa,GAAG,CAAC,CAAC;gBAClB,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM;YACV,KAAK,aAAa,CAAC,CAAC;gBAChB,MAAM,GAAG,CAAC,CAAC;gBACX,aAAa,GAAG,CAAC,CAAC;gBAClB,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM;YACV,KAAK,aAAa,CAAC,CAAC;gBAChB,MAAM,GAAG,CAAC,CAAC;gBACX,MAAM,GAAG,CAAC,CAAC;gBACX,aAAa,GAAG,CAAC,CAAC;gBAClB,MAAM;SACb;QAED,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,QAAkB,EAAE,EAAE;YACpD,OAAO;gBACH,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9C,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,aAAa,CAAC;gBAC9B,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9C,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,aAAa,CAAC;gBAC9B,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBAC9C,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,aAAa,CAAC;aACjC,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,uBAAuB,CAAC,SAAgC;QAC3D,MAAM,aAAa,GAAa,EAAE,CAAC;QACnC,IAAI;QACJ,MAAM,gBAAgB,GAAa,EAAE,CAAC;QAEtC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE;YACrC,MAAM,WAAW,GAAG,oBAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YAC9D,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;YAErF,IAAI,eAAe,EAAE;gBACjB,MAAM,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC;gBACrG,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC5B;SACJ;QAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,gBAAgB,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC;YAClB,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC7B,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,MAAM,EAAE;oBACjC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC1B,IAAI,GAAG,KAAK,CAAC;iBAChB;YACL,CAAC,CAAC,CAAC;SACN;QACD,IAAI;QAEJ,wCAAwC;QACxC,kFAAkF;QAClF,IAAI;QAEJ,MAAM,QAAQ,GAAc,EAAE,CAAC;QAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAClD,QAAQ,CAAC,IAAI,CAAC;gBACV,IAAI,EAAE,aAAa,CAAC,CAAC,CAAE;gBACvB,EAAE,EAAE,aAAa,CAAC,CAAC,GAAG,CAAC,CAAE;aAC5B,CAAC,CAAC;SACN;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;CACJ;AAOG,8BAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvIb,kHAAsD;AACtD,iGAAiD;AACjD,iIAA0D;AAkB1D,MAAM,YAAY;IAWd,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAChD,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAC5C,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACnD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAClD,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAC/C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACtC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAClD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAClD,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAClD,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACtD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY;oBAClD,OAAO,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC;iBAC9G,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,YAAY,CAAC,cAAc;iBAC7C;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;IAC9C,CAAC;IAEM,OAAO,CAAC,cAAiC,EAAE,EAAU,EAAE,OAA8B;QACxF,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QAC9G,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,uBAAU,CAAC,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QACrJ,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;IAC9C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1G,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAExE,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;QAEzG,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,eAAe;iBACrE;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,eAAe;iBAC7D;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC1C,CAAC;;AAID,oCAAY;AApGY,2BAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBzD,kHAAsD;AACtD,iIAA0D;AAe1D,MAAM,cAAc;IAmBhB,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACrD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc;oBACpD,OAAO,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,yBAAyB,CAAC;iBACnH,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,cAAc,CAAC,cAAc;iBAC/C;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC;QAC5C,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,IAAI,CAAC,mBAAmB,CAAC,cAAc,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE;YAC/G,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC;QAE3G,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACnD,IAAI,EAAE,cAAc,CAAC,yBAAyB,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;YACvH,KAAK,EAAE,cAAc,CAAC,OAAO;SAChC,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,eAAe,CAAC,cAAc,EAAE,CAAC;QACvD,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,QAA+B,EAAE,KAAa,EAAE,EAAE;YAC/E,MAAM,MAAM,GAAG,KAAK,GAAG,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC;YACrE,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,EAAE;gBACrE,QAAQ;gBACR,MAAM,EAAE,cAAc,CAAC,qBAAqB;aAC/C,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,QAA+B,EAAE,KAAa,EAAE,EAAE;YAC/E,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,cAAc,CAAC,yBAAyB,CAAC,IAAI,CAAC;YACxG,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,EAAE;gBACrE,QAAQ;gBACR,MAAM,EAAE,cAAc,CAAC,wBAAwB;aAClD,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,eAAe,CAAC,KAAK,EAAE,CAAC;QAExB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,eAAe,CAAC,eAAe;iBAC5C;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,eAAe;iBACrE;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC3D,CAAC;;AAID,wCAAc;AApHU,6BAAc,GAAW,GAAG,CAAC;AAC9B,oCAAqB,GAAW,CAAC,CAAC;AAClC,wCAAyB,GAAW,EAAE,CAAC;AACvC,uCAAwB,GAAW,MAAM,CAAC;AAEzC,wCAAyB,GAA4B,IAAI,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,iBAAiB,EAAE;IACxH,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;IAChD,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;CAC7C,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BP,kHAAsD;AACtD,iIAA0D;AAc1D,MAAM,WAAW;IAUb,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACtC,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAClD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAClD,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACnD,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACnD,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SAClD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW;oBACjD,OAAO,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC;iBACzE,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,WAAW,CAAC,cAAc;iBAC5C;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC,EAAE,EAAU;QACxD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAExE,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC;QACxG,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,eAAe;iBACrE;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC1C,CAAC;;AAID,kCAAW;AApFa,0BAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfzD,kHAAsD;AACtD,iIAA0D;AAa1D,MAAM,iBAAiB;IAUnB,YAAmB,MAAiB,EAAE,IAAU;QAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxC,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YACrD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAClD,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACtD,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,qBAAqB,CAAC;YACzC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE;oBACvC,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,iBAAiB;oBACvD,OAAO,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC;iBACzE,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,iBAAiB,CAAC,cAAc;iBAClD;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEM,OAAO,CAAC,cAAiC,EAAE,cAAqC;QACnF,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACrD,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,IAAU;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAC3C,CAAC;IAEO,UAAU,CAAC,IAAU;QACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAExE,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,GAAG,iBAAiB,CAAC,cAAc,CAAC,CAAC;QAC9G,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC3C,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,eAAe;iBACrE;gBACD;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;QAEH,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC1C,CAAC;;AAID,8CAAiB;AA9EO,gCAAc,GAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBzD,+FAA4C;AAC5C,wEAAgC;AAChC,oFAAuC;AACvC,yGAA8C;AAC9C,6FAA6C;AAC7C,6HAAsD;AAEtD,SAAS,IAAI,CAAC,MAAiB,EAAE,MAAyB;IACtD,MAAM,CAAC,QAAQ,CAAC,aAAa,GAAG,uBAAU,CAAC,SAAS,CAAC;IAErD,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/C,MAAM,MAAM,GAAG,IAAI,eAAM,EAAE,CAAC;IAC5B,MAAM,KAAK,GAAG,IAAI,aAAK,CAAC,YAAY,EAAE;QAClC,aAAa,EAAE,uBAAU,CAAC,eAAe;QACzC,QAAQ,EAAE,uBAAU,CAAC,YAAY;QACjC,iBAAiB,EAAE,uBAAU,CAAC,iBAAiB;KAClD,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,IAAI,iBAAO,EAAE,CAAC;IACpC,aAAa,CAAC,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC;IAElD,MAAM,iBAAiB,GAAG,IAAI,iBAAO,EAAE,CAAC;IACxC,iBAAiB,CAAC,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC;IAEtD,uBAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,oBAAoB,CAAC,uBAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAC1G,uBAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,uBAAU,CAAC,eAAe,CAAC,CAAC,CAAC;IACpG,uBAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;IACtE,uBAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC;IACzE,uBAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,uBAAU,CAAC,YAAY,CAAC,CAAC,CAAC;IAEnF,SAAS,QAAQ;QACb,aAAa,CAAC,QAAQ,EAAE,CAAC;QAEzB,YAAY,CAAC,aAAa,CAAC,uBAAU,CAAC,qBAAqB,CAAC,CAAC;QAC7D,YAAY,CAAC,UAAU,EAAE,CAAC;QAC1B,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;QAE7D,MAAM,cAAc,GAAG,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAErD,IAAI,uBAAU,CAAC,YAAY,EAAE;YACzB,KAAK,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;SACnC;aAAM;YACH,MAAM,QAAQ,GAAG,uBAAU,CAAC,cAAc,CAAC;YAC3C,KAAK,IAAI,CAAC,GAAG,uBAAU,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACrD,KAAK,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;gBACvC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;aAChC;SACJ;QAED,KAAK,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE/C,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AAED,KAAK,UAAU,UAAU;IACrB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;IAC9C,IAAI,CAAC,aAAa,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;KACrD;IAED,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;IACzC,IAAI,CAAC,MAAM,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;KACrC;IACD,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AAChC,CAAC;AAED,UAAU,EAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEb,+GAAmD;AACnD,8HAAuD;AAGvD,MAAM,YAAY;IAOd,YAAmB,YAA2B;QAC1C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7C,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;SAC7C,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI;YAClC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACnD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE;gBACJ,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,aAAa;gBACzB,OAAO,EAAE,EAAE;aACd;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,eAAe;gBAC3B,OAAO,EAAE,CAAC;wBACN,MAAM,EAAE,YAAY,CAAC,aAAa;qBACrC,CAAC;aACL;YACD,SAAS,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,WAAW;aACxB;YACD,YAAY,EAAE;gBACV,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,YAAY,CAAC,kBAAkB;aAC1C;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACjD,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC;oBACN,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C,CAAC;SACL,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,iBAAuC,EAAE,QAAkB;QACrE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACnD,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1D,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;CACJ;AAGG,oCAAY;;;;;;;;;;;;ACnEhB,qDAAqD;;;;;;;;;;;;;;;;;;;;;;;;;;AAErD,6GAAsC;AACtC,8FAA2D;AAY3D,SAAS,KAAK,CAAC,CAAS,EAAE,GAAW,EAAE,GAAW;IAC9C,IAAI,CAAC,GAAG,GAAG,EAAE;QACT,OAAO,GAAG,CAAC;KACd;SAAM,IAAI,CAAC,GAAG,GAAG,EAAE;QAChB,OAAO,GAAG,CAAC;KACd;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AAED,MAAM,SAAS,GAAG;IACd,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3B,EAAE,QAAQ,EAAE,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC5C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,EAAE;IACzC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,EAAE;IAC1C,EAAE,QAAQ,EAAE,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC5C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE;CAC9C,CAAC;AAEF,MAAM,QAAQ,GAAG;IACb,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3B,EAAE,QAAQ,EAAE,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC5C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,kBAAkB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC5C,EAAE,QAAQ,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,EAAE;IAC1C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE;IAC3C,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE;IAC5C,EAAE,QAAQ,EAAE,gBAAgB,EAAE,KAAK,EAAE,IAAI,EAAE;CAC9C,CAAC;AAEF,SAAS,WAAW,CAAC,KAA4C,EAAE,QAAgB;IAC/E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACvC,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAE,CAAC;QAC/B,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAE,CAAC;QAC/B,IAAI,QAAQ,GAAG,YAAY,CAAC,QAAQ,EAAE;YAClC,OAAO,YAAY,CAAC,KAAK,CAAC;SAC7B;aAAM,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,EAAE;YACrC,OAAO,YAAY,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;SACxJ;KACJ;IACD,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAE,CAAC,KAAK,CAAC;AAC1C,CAAC;AAED,MAAM,OAAO,GAAG,GAAG,CAAC;AACpB,MAAM,OAAO,GAAG,CAAC,CAAC;AAElB,MAAM,MAAM;IAeR;QAdiB,YAAO,GAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEnC,sBAAiB,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAC3C,wBAAmB,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAE7C,iBAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACtC,gBAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACrC,sBAAiB,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAC3C,cAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAE5C,SAAI,GAAG,CAAC,CAAC;QACT,UAAK,GAAG,CAAC,CAAC;QACV,QAAG,GAAG,GAAG,CAAC;QAGd,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAa,EAAE,EAAE;YACpD,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC;YAC7B,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAU,EAAE,EAAU,EAAE,EAAE;YAC5D,IAAI,CAAC,KAAK,IAAI,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG,EAAE,CAAC;YACrC,IAAI,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YAC7B,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,yCAAyC;QACzC;YACI,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YAC9C,IAAI,CAAC,aAAa,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;aAC3C;YAED,aAAa,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC,KAAiB,EAAE,EAAE;gBAChE,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,OAAO,KAAK,CAAC;YACjB,CAAC,CAAC,CAAC;YACH,IAAI,oBAAoB,GAAG,KAAK,CAAC;YACjC,MAAM,iBAAiB,GAAG,CAAC,CAAC;YAC5B,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;YACvD,aAAa,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,KAAiB,EAAE,EAAE;gBAC9D,IAAI,KAAK,CAAC,MAAM,KAAK,iBAAiB,EAAE;oBACpC,oBAAoB,GAAG,IAAI,CAAC;oBAC5B,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;iBACtD;YACL,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAiB,EAAE,EAAE;gBACvD,IAAI,KAAK,CAAC,MAAM,KAAK,iBAAiB,EAAE;oBACpC,oBAAoB,GAAG,KAAK,CAAC;iBAChC;YACL,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAY,EAAE,IAAY,EAAE,EAAE;gBAChE,IAAI,oBAAoB,EAAE;oBACtB,MAAM,EAAE,GAAG,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBACvC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;oBACtB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;oBAElD,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBAC/B;gBACD,iBAAiB,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;SACN;QAED,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChC,CAAC;IAED,IAAW,QAAQ;QACf,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAEjC,OAAO;YACH,OAAO,EAAE,IAAI,CAAC,WAAW;YACzB,OAAO,EAAE,IAAI,CAAC,iBAAiB;YAC/B,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,cAAc,EAAE,IAAI,CAAC,YAAY;YACjC,QAAQ,EAAE,IAAI,CAAC,iBAAiB;YAChC,WAAW,EAAE,IAAI,CAAC,mBAAmB;YACrC,gBAAgB,EAAE,IAAI,CAAC,IAAI,GAAG,OAAO;SACxC,CAAC;IACN,CAAC;IAEO,6BAA6B;QACjC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACrF,CAAC;IAEO,yBAAyB;QAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;QAEjD,IAAI,uBAAU,CAAC,gBAAgB,KAAK,wBAAW,CAAC,WAAW,EAAE;YACzD,oCAAoC;YACpC,yCAAyC;YACzC,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YAClD,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;SACrG;aAAM;YACH,MAAM,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YAC7B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,GAAG,WAAW,EAAE,IAAI,GAAG,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC;SAChJ;QAED,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACzC,CAAC;IAEO,mBAAmB;QACvB,MAAM,EAAE,GAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACpC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,oCAAoC;YAChG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;SACb;QAED,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAE5E,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAElD,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAChD,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAChD,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IAEO,oBAAoB;QACxB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAE9E,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC/B,CAAC;IAEO,SAAS;QACb,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAEO,QAAQ;QACZ,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED,IAAY,QAAQ;QAChB,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;IAC1B,CAAC;CACJ;AAMG,wBAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1NV,+GAAmD;AACnD,8HAAuD;AAOvD,MAAM,YAAY;IAOd,YAAmB,YAA2B;QAC1C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7C,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YAC1C,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;SACtD,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI;YAClC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACnD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE;gBACJ,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,aAAa;gBACzB,OAAO,EAAE,EAAE;aACd;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,eAAe;gBAC3B,OAAO,EAAE,CAAC;wBACN,MAAM,EAAE,YAAY,CAAC,aAAa;qBACrC,CAAC;aACL;YACD,SAAS,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,WAAW;aACxB;YACD,YAAY,EAAE;gBACV,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,YAAY,CAAC,kBAAkB;aAC1C;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACjD,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC;oBACN,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C,CAAC;SACL,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,iBAAuC,EAAE,UAAsB;QACzE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACnD,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1D,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC;CACJ;AAGG,oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEhB,+GAAmD;AACnD,8HAAuD;AAQvD,MAAM,6BAA6B;IAO/B,YAAmB,YAA2B,EAAE,gBAAuC;QACnF,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7C,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YAC1C,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAC7C,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAChD,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SAC/C,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEtD,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,IAAI,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,uBAAuB;YAC3D,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACnD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE;gBACJ,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,aAAa;gBACzB,OAAO,EAAE;oBACL;wBACI,UAAU,EAAE;4BACR;gCACI,cAAc,EAAE,CAAC;gCACjB,MAAM,EAAE,gBAAgB,CAAC,uBAAuB,CAAC,MAAM;gCACvD,MAAM,EAAE,gBAAgB,CAAC,uBAAuB,CAAC,MAAM;6BAC1D;yBACJ;wBACD,WAAW,EAAE,gBAAgB,CAAC,iBAAiB;wBAC/C,QAAQ,EAAE,UAAU;qBACvB;iBACJ;aACJ;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,eAAe;gBAC3B,OAAO,EAAE,CAAC;wBACN,MAAM,EAAE,YAAY,CAAC,aAAa;wBAClC,KAAK,EAAE;4BACH,KAAK,EAAE;gCACH,SAAS,EAAE,WAAW;gCACtB,SAAS,EAAE,qBAAqB;gCAChC,SAAS,EAAE,KAAK;6BACnB;4BACD,KAAK,EAAE;gCACH,SAAS,EAAE,MAAM;gCACjB,SAAS,EAAE,KAAK;gCAChB,SAAS,EAAE,KAAK;6BACnB;yBACJ;qBACJ,CAAC;aACL;YACD,SAAS,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,WAAW;aACxB;YACD,YAAY,EAAE;gBACV,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,YAAY,CAAC,kBAAkB;aAC1C;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACjD,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC;oBACN,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C,CAAC;SACL,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,iBAAuC,EAAE,IAAgB;QACnE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACnD,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1D,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACrD,iBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAClH,CAAC;CACJ;AAGG,sEAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGjC,+GAAmD;AACnD,8HAAuD;AAQvD,MAAM,iBAAiB;IAMnB,YAAmB,YAA2B;QAC1C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7C,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YAC1C,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAC7C,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAChD,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SAC/C,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEtD,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,SAAS;YACvC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACnD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE;gBACJ,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,aAAa;gBACzB,OAAO,EAAE;oBACL;wBACI,UAAU,EAAE;4BACR;gCACI,cAAc,EAAE,CAAC;gCACjB,MAAM,EAAE,CAAC;gCACT,MAAM,EAAE,QAAQ;6BACnB;yBACJ;wBACD,WAAW,EAAE,WAAW,CAAC,iBAAiB;wBAC1C,QAAQ,EAAE,UAAU;qBACvB;iBACJ;aACJ;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,eAAe;gBAC3B,OAAO,EAAE,CAAC;wBACN,MAAM,EAAE,YAAY,CAAC,aAAa;qBACrC,CAAC;aACL;YACD,SAAS,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,WAAW;aACxB;YACD,YAAY,EAAE;gBACV,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,YAAY,CAAC,kBAAkB;aAC1C;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACjD,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC;oBACN,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C,CAAC;SACL,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,iBAAuC,EAAE,UAAsB;QACzE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACnD,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1D,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QACpF,iBAAiB,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;IAClF,CAAC;CACJ;AAGG,8CAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FrB,iIAA0D;AAC1D,6GAAsC;AAEtC,MAAM,cAAc;IAMhB,YAAmB,MAAiB,EAAE,IAAU;QAFhC,gBAAW,GAAkB,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAGhE,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;QAC/C,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;YACpC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM;YAC3C,KAAK,EAAE,cAAc,CAAC,MAAM;SAC/B,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;YACnC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;CACJ;AAGG,wCAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/ClB,6GAAsC;AAEtC,kHAAsD;AACtD,iIAA0D;AAC1D,qHAAmD;AAUnD,MAAM,YAAY;IAOd,YAAmB,YAA2B;QAC1C,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7C,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YAC1C,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YAClD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACtD,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SAClD,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,IAAI;YAClC,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACnD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE;gBACJ,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,aAAa;gBACzB,OAAO,EAAE;oBACL;wBACI,UAAU,EAAE;4BACR;gCACI,cAAc,EAAE,CAAC;gCACjB,MAAM,EAAE,CAAC;gCACT,MAAM,EAAE,WAAW;6BACtB;4BACD;gCACI,cAAc,EAAE,CAAC;gCACjB,MAAM,EAAE,CAAC,GAAG,YAAY,CAAC,iBAAiB;gCAC1C,MAAM,EAAE,WAAW;6BACtB;yBACJ;wBACD,WAAW,EAAE,CAAC,GAAG,YAAY,CAAC,iBAAiB;wBAC/C,QAAQ,EAAE,QAAQ;qBACrB;iBACJ;aACJ;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,eAAe;gBAC3B,OAAO,EAAE,CAAC;wBACN,MAAM,EAAE,YAAY,CAAC,aAAa;qBACrC,CAAC;aACL;YACD,SAAS,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,eAAe;aAC5B;YACD,YAAY,EAAE;gBACV,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,YAAY,CAAC,kBAAkB;aAC1C;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACjD,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAEM,oBAAoB,CAAC,IAAU;QAClC,OAAO,IAAI,gCAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAEM,MAAM,CAAC,iBAAuC,EAAE,UAAsB;QACzE,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,OAAO;SACV;QAED,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;QAE5E,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEnD,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,MAAM,EAAE;YAClC,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACzC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1E,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAC3C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAE9E,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;YAE5B,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC5D,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC1D,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC9C;IACL,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;CACJ;AAGG,oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7HhB,kHAAsD;AACtD,iIAA0D;AAO1D,MAAM,IAAI;IAcN,YAAmB,MAAiB,EAAE,IAAU;QAHxC,wBAAmB,GAAwB,IAAI,CAAC;QAChD,sBAAiB,GAAwB,IAAI,CAAC;QAGlD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,EAAE,eAAe,CAAC,eAAe,GAAG,eAAe,CAAC,eAAe,CAAC,CAAC;QACpI,2IAA2I;QAE3I,MAAM,uBAAuB,GAAG;YAC5B,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACjD,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,UAAU;SAC1D,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC;QAC/E,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QAEtC,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC;QAC7E,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;QAEpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;YAC9C,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;oBAC5C,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI;oBAC1C,OAAO,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC;iBACrC,CAAC;gBACF,UAAU,EAAE,MAAM;gBAClB,SAAS,EAAE;oBACP,aAAa,EAAE,IAAI,CAAC,cAAc;iBACrC;aACJ;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAEM,OAAO,CAAC,cAAiC,EAAE,WAAmB;QACjE,IAAI,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACtD,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QAED,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAErC,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;QAC/C,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC;QAEjD,MAAM,WAAW,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtD,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACtD,WAAW,CAAC,kBAAkB,CAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,EAC7C,MAAM,CACT,CAAC;QAEF,WAAW,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACpD,WAAW,CAAC,kBAAkB,CAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,EAC9C,KAAK,CACR,CAAC;QACF,WAAW,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC;IAEM,mBAAmB,CAAC,IAAU;QACjC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,eAAe,GAAG,eAAe,CAAC,eAAe,CAAC,EAAE;YACnG,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC/C;QACD,uGAAuG;QACvG,mDAAmD;QACnD,IAAI;QACJ,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,KAAK,YAAY,EAAE;YAC/F,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAChD;QACD,uGAAuG;QACvG,oDAAoD;QACpD,IAAI;QAEJ,8IAA8I;QAC9I,yBAAyB;QACzB,IAAI;QAEJ,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;QAChD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC7C,oDAAoD;QAEpD,MAAM,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QAC3D,8DAA8D;QAC9D,MAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC7D,wEAAwE;QACxE,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACnD,MAAM;YACN,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,mBAAmB;iBAChC,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,oBAAoB;iBACjC,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,kBAAkB,CAAC,eAAe;oBACjD,OAAO;oBACP,kBAAkB;oBAClB,yCAAyC;oBACzC,OAAO;oBACP,kBAAkB;oBAClB,0CAA0C;iBAC7C;aACJ;SACJ,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACjD,MAAM;YACN,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,oBAAoB;iBACjC,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,mBAAmB;iBAChC,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe;oBAC/C,OAAO;oBACP,kBAAkB;oBAClB,0CAA0C;oBAC1C,OAAO;oBACP,kBAAkB;oBAClB,yCAAyC;iBAC5C;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAEO,kBAAkB,CAAC,WAAmB;QAC1C,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,MAAM,KAAK,GAAG,CAAC,CAAC;QAChB,MAAM,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;QACpD,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;YACxC,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;YAC1B,MAAM,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;YACrE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrB,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;SAC1C;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,OAAO,CAAC,CAAC,CAAE,IAAI,GAAG,CAAC;SACtB;QAED,OAAO,CAAC,OAAO,CAAC,CAAC,MAAc,EAAE,KAAa,EAAE,EAAE;YAC9C,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,eAAe,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;YACzE,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,eAAe,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;QACtC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;IACxC,CAAC;;AAID,oBAAI;AArLoB,mBAAc,GAAG,GAAG,CAAC;AACrB,gBAAW,GAAG,CAAC,CAAC;AAChB,0BAAqB,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVjG,kHAAsD;AACtD,iGAAiD;AACjD,iIAA0D;AAY1D,MAAM,WAAW;IAUb,YAAmB,YAA2B,EAAE,IAAU;QACtD,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAElC,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7C,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACnD,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAC/C,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAChD,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YACtC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAClD,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAC/C,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAClD,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAChD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACtD,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACjD,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW;YACjD,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;YACnD,MAAM,EAAE,MAAM;YACd,MAAM,EAAE;gBACJ,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,aAAa;aAC5B;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,eAAe;gBAC3B,OAAO,EAAE,CAAC;wBACN,MAAM,EAAE,YAAY,CAAC,aAAa;qBACrC,CAAC;aACL;YACD,SAAS,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,gBAAgB;aAC7B;YACD,YAAY,EAAE;gBACV,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,YAAY,CAAC,kBAAkB;aAC1C;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;YAC3C,SAAS,EAAE,QAAQ;YACnB,SAAS,EAAE,QAAQ;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAE3D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YACjD,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE;gBACL;oBACI,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;iBAC1C;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,iBAAuC,EAAE,QAAkB,EAAE,UAAsB;QAC7F,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;QACpE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,uBAAU,CAAC,WAAW,CAAC,CAAC;QACtE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE,uBAAU,CAAC,YAAY,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,uBAAU,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,uBAAU,CAAC,gBAAgB,CAAC,CAAC;QAC3E,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,uBAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACtF,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,uBAAU,CAAC,kBAAkB,CAAC,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,uBAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACnD,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1D,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC1D,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAEM,kBAAkB,CAAC,IAAU;QAChC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC;IAEO,sBAAsB,CAAC,IAAU;QACrC,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;YAC/B,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACjD,OAAO,EAAE,CAAC;oBACN,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,aAAa;iBAC/B,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;iBAC3C,EAAE;oBACC,OAAO,EAAE,CAAC;oBACV,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;iBACvC,CAAC;SACL,CAAC,CAAC;IACP,CAAC;CACJ;AAMG,kCAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClIf,kHAAsD;AACtD,iGAAiD;AACjD,iIAA0D;AAkC1D,MAAM,QAAQ;IAYV,YAAmB,YAA2B,EAAE,IAAU;QACtD,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QAElC,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,EAAE,eAAe,CAAC,iBAAiB,GAAG,eAAe,CAAC,eAAe,GAAG,eAAe,CAAC,eAAe,CAAC,CAAC;QACpK,IAAI,CAAC,WAAW,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,eAAe,CAAC,iBAAiB,GAAG,eAAe,CAAC,eAAe,CAAC,CAAC;QACnI,IAAI,CAAC,YAAY,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE,eAAe,CAAC,iBAAiB,GAAG,eAAe,CAAC,eAAe,CAAC,CAAC;QAEzI,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7C,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YAC/C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE;YAC9C,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YAChD,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;YAChD,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE;YACnD,EAAE,IAAI,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;SACtD,CAAC,CAAC;QAEH,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE;YACzD,IAAI,EAAE,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO;YAC7C,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;QAEH,kBAAkB;QAClB;YACI,MAAM,eAAe,GAAiC;gBAClD,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBAC5B,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACxB,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,MAAM,cAAc,GAAiC;gBACjD,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBAChC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACxB,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,MAAM,eAAe,GAAwC;gBACzD,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;gBACjC,eAAe,EAAE,CAAC;gBAClB,WAAW,EAAE,OAAO;gBACpB,YAAY,EAAE,OAAO;gBACrB,eAAe,EAAE,IAAI;aACxB,CAAC;YACF,MAAM,oBAAoB,GAA4B;gBAClD,gBAAgB,EAAE,CAAC,eAAe,EAAE,cAAc,CAAC;gBACnD,sBAAsB,EAAE,eAAe;aAC1C,CAAC;YACF,MAAM,kBAAkB,GAAG,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE;gBACnE,YAAY,EAAE,mBAAmB;gBACjC,gBAAgB,EAAE,IAAI,CAAC,uBAAuB;gBAC9C,SAAS,EAAE,aAAa,CAAC,GAAG,GAAG,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK;gBACxE,WAAW,EAAE,IAAI,CAAC,WAAW;aAChC,CAAC,CAAC;YACH,kBAAkB,CAAC,YAAY,GAAG;gBAC9B,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM;aACnC,CAAC;YACF,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;YACtE,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;gBAClD,MAAM,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACtC,OAAO,EAAE,CAAC;wBACN,OAAO,EAAE,CAAC;wBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;qBAC1C,CAAC;aACL,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,GAAG;gBACjB,eAAe;gBACf,cAAc;gBACd,eAAe;gBACf,UAAU,EAAE,oBAAoB;gBAChC,QAAQ;gBACR,iBAAiB;aACpB,CAAC;SACL;QAED,gBAAgB;QAChB;YACI,MAAM,eAAe,GAAiC;gBAClD,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBAC5B,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,MAAM,eAAe,GAAwC;gBACzD,IAAI,EAAE,IAAI,CAAC,qBAAqB;gBAChC,aAAa,EAAE,IAAI;gBACnB,eAAe,EAAE,IAAI;aACxB,CAAC;YACF,MAAM,oBAAoB,GAA4B;gBAClD,gBAAgB,EAAE,CAAC,eAAe,CAAC;gBACnC,sBAAsB,EAAE,eAAe;aAC1C,CAAC;YACF,MAAM,aAAa,GAAkB;gBACjC,KAAK,EAAE;oBACH,SAAS,EAAE,KAAK;oBAChB,SAAS,EAAE,KAAK;oBAChB,SAAS,EAAE,KAAK;iBACnB;gBACD,KAAK,EAAE;oBACH,SAAS,EAAE,KAAK;oBAChB,SAAS,EAAE,KAAK;oBAChB,SAAS,EAAE,KAAK;iBACnB;aACJ,CAAC;YACF,MAAM,kBAAkB,GAAG,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAAE;gBACnE,YAAY,EAAE,iBAAiB;gBAC/B,gBAAgB,EAAE,IAAI,CAAC,uBAAuB;gBAC9C,SAAS,EAAE,aAAa,CAAC,IAAI;gBAC7B,KAAK,EAAE,aAAa;aACvB,CAAC,CAAC;YACH,kBAAkB,CAAC,YAAY,GAAG;gBAC9B,iBAAiB,EAAE,KAAK;gBACxB,YAAY,EAAE,MAAM;gBACpB,MAAM,EAAE,YAAY,CAAC,kBAAkB;aAC1C,CAAC;YACF,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;YACtE,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;gBAClD,MAAM,EAAE,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACtC,OAAO,EAAE,CAAC;wBACN,OAAO,EAAE,CAAC;wBACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe;qBAC1C,CAAC;aACL,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,GAAG;gBACf,eAAe;gBACf,eAAe;gBACf,UAAU,EAAE,oBAAoB;gBAChC,QAAQ;gBACR,iBAAiB;aACpB,CAAC;SACL;IACL,CAAC;IAEM,MAAM,CAAC,cAAiC,EAAE,QAAkB,EAAE,IAAgB;QACjF,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;QACpE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,uBAAU,CAAC,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACnG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3E,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QAE5B,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC1C,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACvC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;QACxC,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;YACnC,MAAM,iBAAiB,GAAG,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAChF,iBAAiB,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACzD,iBAAiB,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACtD,iBAAiB,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACnD,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACrD,iBAAiB,CAAC,YAAY,CAAC,CAAC,EAAE,UAAU,CAAC,iBAAiB,CAAC,CAAC;YAChE,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC/C,iBAAiB,CAAC,GAAG,EAAE,CAAC;SAC3B;IACL,CAAC;IAEM,OAAO,CAAC,KAAa,EAAE,MAAc;QACxC,IAAI,gBAAgB,GAAG,KAAK,CAAC;QAE7B,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5D,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YACrC,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;gBACnC,UAAU,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aAC5D;YACD,gBAAgB,GAAG,IAAI,CAAC;SAC3B;QACD,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YACzC,KAAK,MAAM,UAAU,IAAI,YAAY,EAAE;gBACnC,IAAI,UAAU,CAAC,cAAc,EAAE;oBAC3B,UAAU,CAAC,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;iBAC/D;aACJ;YACD,gBAAgB,GAAG,IAAI,CAAC;SAC3B;QAED,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YAC1C,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;YACtE,gBAAgB,GAAG,IAAI,CAAC;SAC3B;QAED,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAEM,wBAAwB,CAAC,qBAAqC;QACjE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,GAAG,qBAAqB,CAAC;IAClE,CAAC;IAEO,wBAAwB,CAAC,YAA6B,EAAE,IAA4B;QACxF,MAAM,OAAO,GAA0B,EAAE,CAAC;QAE1C,MAAM,WAAW,GAAwB;YACrC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;SAC5B,CAAC;QACF,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SAClC;QACD,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE1B,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;SACrD;QAED,OAAO;YACH,MAAM,EAAE,MAAM;YACd,MAAM,EAAE;gBACJ,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,aAAa;gBACzB,OAAO,EAAE;oBACL;wBACI,UAAU,EAAE;4BACR;gCACI,cAAc,EAAE,CAAC;gCACjB,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,MAAM;gCACtD,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,MAAM;6BACzD;4BACD;gCACI,cAAc,EAAE,CAAC;gCACjB,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM;gCACpD,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM;6BACvD;4BACD;gCACI,cAAc,EAAE,CAAC;gCACjB,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM;gCAClD,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM;6BACrD;yBACJ;wBACD,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,iBAAiB;wBACpD,QAAQ,EAAE,UAAU;qBACvB;iBACJ;aACJ;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,YAAY;gBACpB,UAAU,EAAE,IAAI,CAAC,YAAY;gBAC7B,OAAO;aACV;YACD,SAAS,EAAE;gBACP,QAAQ,EAAE,MAAM;gBAChB,QAAQ,EAAE,eAAe;aAC5B;SACJ,CAAC;IACN,CAAC;CACJ;AAOG,4BAAQ;;;;;;;;;;;;;;ACnTZ,iGAAiD;AAGjD,uFAA8B;AAC9B,4GAAsF;AACtF,mGAAwG;AAExG,MAAM,eAAe;IAMjB,YAAmB,YAA2B,EAAE,IAAkB;QAC9D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,gBAAgB,GAAG,IAAI,mBAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAEzD,MAAM,YAAY,GAAG;YACjB,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO;YAC9C,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW;SACjD,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,IAAI,WAAI,CAAC,YAAY,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QACxD,IAAI,CAAC,mBAAmB,GAAG,IAAI,yBAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAC3E,CAAC;IAEM,cAAc,CAAC,cAAiC,EAAE,QAAkB,EAAE,IAAwB;QACjG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QAE7D,IAAI,uBAAU,CAAC,IAAI,EAAE;YACjB,MAAM,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,GAAG,CAAC;YAC1D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,gBAAgB,GAAG,WAAW,CAAC,CAAC;SAC9E;IACL,CAAC;IAEM,iBAAiB,CAAC,iBAAuC,EAAE,QAAkB,EAAE,UAAiC;QACnH,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,iBAAiB,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IAC7E,CAAC;IAEM,OAAO,CAAC,KAAa,EAAE,MAAc;QACxC,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;YAC9C,MAAM,YAAY,GAAG;gBACjB,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO;gBAC9C,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW;aACjD,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAC5C,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,wBAAwB,CAAC,qBAAqC;QACjE,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,CAAC;IAC1E,CAAC;CACJ;AAGG,0CAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DnB,6GAAsC;AACtC,yFAAyC;AACzC,uIAA+D;AAC/D,yJAAoE;AACpE,oHAAyD;AAEzD,oHAAyD;AACzD,gLAA8F;AAC9F,sIAAoE;AAEpE,8HAA8D;AAC9D,6IAAuE;AACvE,yGAA8C;AAC9C,6FAA8J;AAS9J,MAAM,KAAK;IAwBP,YAAmB,YAA2B,EAAE,IAAU;QArBzC,gBAAW,GAAkB,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACpD,cAAS,GAAkB,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAW3D,kBAAa,GAAgB,IAAI,CAAC;QAGzB,oBAAe,GAAqB,EAAE,CAAC;QACvC,mBAAc,GAAqB,EAAE,CAAC;QAE/C,yBAAoB,GAAW,CAAC,CAAC;QACjC,4BAAuB,GAAW,CAAC,CAAC;QAGxC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAEjC,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,CAAC,YAAY,CAAC,CAAC;QACnD,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,CAAC,YAAY,CAAC,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,IAAI,kCAAe,CAAC,YAAY,EAAE;YACrD,uBAAuB,EAAE,eAAM,CAAC,uBAAuB;YACvD,qBAAqB,EAAE,YAAY,CAAC,gBAAgB;SACvD,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,CAAC,YAAY,CAAC,CAAC;QACnD,IAAI,CAAC,iBAAiB,GAAG,IAAI,uCAAiB,CAAC,YAAY,CAAC,CAAC;QAC7D,IAAI,CAAC,8BAA8B,GAAG,IAAI,iEAA6B,CAAC,IAAI,CAAC,YAAY,EAAE,eAAM,CAAC,oBAAoB,CAAC,CAAC;QAExH,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC9E,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAE/F,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SACxF;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,eAAM,CAAC,YAAY,CAAC,MAAM,EAAE;YAC1C,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;YACnD,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,aAAa,EAAE,IAAI,CAAC,aAAa;SACpC,CAAC,CAAC;QACH,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACvE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAEM,MAAM,CAAC,cAAiC,EAAE,EAAU;QACvD,MAAM,eAAe,GAAG,uBAAU,CAAC,eAAe,CAAC;QACnD,IAAI,eAAe,KAAK,iCAAoB,CAAC,QAAQ,EAAE;YACnD,IAAI,CAAC,oBAAoB,IAAI,GAAG,GAAG,EAAE,CAAC;YACtC,uBAAU,CAAC,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC;SACzD;aAAM;YACH,IAAI,CAAC,oBAAoB,GAAG,uBAAU,CAAC,cAAc,CAAC;YACtD,IAAI,eAAe,KAAK,iCAAoB,CAAC,QAAQ,EAAE;gBACnD,IAAI,CAAC,uBAAuB,IAAI,GAAG,GAAG,EAAE,CAAC;gBACzC,uBAAU,CAAC,iBAAiB,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;aACnG;SACJ;QACD,MAAM,QAAQ,GAAG,uBAAU,CAAC,cAAc,CAAC;QAC3C,MAAM,OAAO,GAAkB,CAAC,CAAC,EAAE,uBAAU,CAAC,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,uBAAU,CAAC,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEvI,IAAI,uBAAU,CAAC,iBAAiB,KAAK,mCAAsB,CAAC,QAAQ,EAAE;YAClE,MAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAC9C,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;YACvE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,cAAc,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;YAChE,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAEzE,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;gBACpC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;aAC9E;YACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;SACpE;QACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAEM,MAAM,CAAC,cAAiC,EAAE,QAAkB;QAC/D,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,uBAAU,CAAC,cAAc,CAAC,CAAC;QACxF,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;QAChF,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE5E,MAAM,cAAc,GAA0B,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE9E;YACI,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YAC5E,MAAM,gBAAgB,GAAqB,EAAE,CAAC;YAC9C,IAAI,uBAAU,CAAC,qBAAqB,EAAE;gBAClC,gBAAgB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;aACjD;YACD,IAAI,uBAAU,CAAC,sBAAsB,EAAE;gBACnC,gBAAgB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;aAClD;YACD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBACxC,MAAM,EAAE,gBAAgB;gBACxB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,cAAc,EAAE,CAAC,CAAC,yBAAY,CAAC,KAAK,EAAE,yBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,uBAAU,CAAC,WAAW,CAAC;gBAC1F,cAAc;aACjB,CAAC,CAAC;YACH,iBAAiB,CAAC,GAAG,EAAE,CAAC;SAC3B;QAED,IAAI,uBAAU,CAAC,gBAAgB,EAAE;YAC7B,IAAI,CAAC,eAAe,CAAC,wBAAwB,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;YAClF,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,cAAc,EAAE,QAAQ,EAAE;gBAC1D,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS;gBAC9C,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc;gBACxD,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY;gBACpD,kBAAkB,EAAE,eAAM,CAAC,YAAY,CAAC,uBAAU,CAAC,wBAAwB,CAAC;gBAC5E,iBAAiB,EAAE,CAAC,yBAAY,CAAC,WAAW,EAAE,yBAAY,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,uBAAU,CAAC,WAAW,CAAC;aACrG,CAAC,CAAC;SACN;QAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,cAAc,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;QAEtH,IAAI,uBAAU,CAAC,UAAU,EAAE;YACvB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;SACzD;QACD,IAAI,uBAAU,CAAC,aAAa,EAAE;YAC1B,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBACxC,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,uBAAU,CAAC,iBAAiB,CAAC;aACpD,CAAC,CAAC;SACN;QAED,IAAI,uBAAU,CAAC,gBAAgB,EAAE;YAC7B,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,QAAQ,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;SAC3F;QAED,QAAQ,uBAAU,CAAC,eAAe,EAAE;YAChC,KAAK,6BAAgB,CAAC,KAAK;gBACvB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,EAAE;oBAC7C,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB;oBACzC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;iBACjC,CAAC,CAAC;gBACH,MAAM;YACV,KAAK,6BAAgB,CAAC,mBAAmB;gBACrC,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,iBAAiB,EAAE;oBAC1D,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,SAAS;oBAC5D,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;iBACjC,CAAC,CAAC;gBACH,MAAM;SACb;QACD,iBAAiB,CAAC,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEM,YAAY;QACf,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;QAC3B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;YACpC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,kBAAkB;QACrB,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;QACjC,uBAAU,CAAC,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACtD,uBAAU,CAAC,iBAAiB,GAAG,CAAC,CAAC;IACrC,CAAC;IAEM,kBAAkB,CAAC,IAAY;QAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACd,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;YACnD,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,aAAa,EAAE,IAAI;SACtB,CAAC,CAAC;QACH,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;YACpC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACvE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAEM,oBAAoB,CAAC,QAA4B;QACpD,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,eAAe,EAAE;YAC/C,cAAc,CAAC,IAAI,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;QAEhC,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACd,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;YACnD,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY;SACxD,CAAC,CAAC;QACH,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;YACpC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACvE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAEM,WAAW,CAAC,QAAuB;QACtC,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,cAAc,EAAE;YAC9C,cAAc,CAAC,IAAI,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;QAE/B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QACtD,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SACxF;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACd,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;YACnD,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,YAAY;SACxD,CAAC,CAAC;QACH,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE;YACpC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACvE,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAEM,aAAa,CAAC,KAAa,EAAE,MAAc;QAC9C,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;IAEO,MAAM,CAAC,iBAAiB,CAAC,QAA4B;QACzD,QAAQ,QAAQ,EAAE;YACd,KAAK,+BAAkB,CAAC,CAAC;gBACrB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzC,KAAK,+BAAkB,CAAC,CAAC;gBACrB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzC,KAAK,+BAAkB,CAAC,EAAE;gBACtB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;YAC1C,KAAK,+BAAkB,CAAC,GAAG;gBACvB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3C,KAAK,+BAAkB,CAAC,IAAI;gBACxB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC5C,KAAK,+BAAkB,CAAC,KAAK;gBACzB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC7C;gBACI,MAAM,IAAI,KAAK,EAAE,CAAC;SACzB;IACL,CAAC;IAEO,MAAM,CAAC,gBAAgB,CAAC,QAAuB;QACnD,QAAQ,QAAQ,EAAE;YACd,KAAK,0BAAa,CAAC,IAAI;gBACnB,OAAO,IAAI,CAAC;YAChB,KAAK,0BAAa,CAAC,QAAQ;gBACvB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAChD,KAAK,0BAAa,CAAC,KAAK;gBACpB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC7C,KAAK,0BAAa,CAAC,aAAa;gBAC5B,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACpD,KAAK,0BAAa,CAAC,MAAM;gBACrB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC9C,KAAK,0BAAa,CAAC,GAAG;gBAClB,OAAO,WAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3C;gBACI,MAAM,IAAI,KAAK,EAAE,CAAC;SACzB;IACL,CAAC;CACJ;AAGG,sBAAK;;;;;;;;;;;;ACrST,iDAAiD;;;;;;AAEjD,4MAA6F;AAC7F,6LAAoF;AACpF,qLAA4E;AAC5E,4KAAuE;AACvE,0LAAkF;AAClF,kNAAiG;AACjG,uLAAiF;AACjF,qKAAqE;AAErE,4KAA0E;AAC1E,kLAA8E;AAC9E,yKAAwE;AACxE,8LAAqF;AAErF,oIAAkD;AAClD,oIAAkD;AAClD,sJAA6D;AAC7D,oIAAkD;AAClD,oJAA0D;AAC1D,yKAAwE;AACxE,6JAAgE;AAEhE,MAAM,MAAM,GAAG;IACX,QAAQ,EAAE;QACN,qBAAqB,EAArB,uCAAqB;QACrB,iBAAiB,EAAjB,kCAAiB;QACjB,gBAAgB,EAAhB,iCAAgB;QAChB,uBAAuB,EAAvB,yCAAuB;QACvB,gBAAgB,EAAhB,gCAAgB;QAChB,UAAU,EAAV,0BAAU;QACV,SAAS,EAAE;YACP,QAAQ,EAAR,wBAAQ;YACR,MAAM,EAAN,qBAAM;SACT;KACJ;IACD,UAAU,EAAE;QACR,YAAY,EAAZ,2BAAY;QACZ,cAAc,EAAd,6BAAc;QACd,WAAW,EAAX,0BAAW;QACX,iBAAiB,EAAjB,iCAAiB;KACpB;CACJ,CAAC;AAeY,wBAAM;AAbpB,MAAM,SAAS,GAAG;IACd,IAAI,EAAJ,mBAAI;IACJ,IAAI,EAAJ,mBAAI;IACJ,SAAS,EAAT,yBAAS;IACT,IAAI,EAAJ,mBAAI;IACJ,OAAO,EAAE;QACL,IAAI,EAAJ,mBAAI;QACJ,WAAW,EAAX,0BAAW;QACX,OAAO,EAAP,sBAAO;KACV;CACJ,CAAC;AAIe,8BAAS;;;;;;;;;;;;;;ACzD1B,MAAM,OAAO;IAIT;QAHQ,UAAK,GAAW,CAAC,CAAC;QACnB,aAAQ,GAAuB,IAAI,CAAC;QAGvC,IAAI,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QACnC,WAAW,CAAC,GAAG,EAAE;YACb,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;YAC9B,MAAM,EAAE,GAAG,GAAG,GAAG,UAAU,CAAC;YAC5B,UAAU,GAAG,GAAG,CAAC;YAEjB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,MAAM,eAAe,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;gBAC/C,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;aAClC;YACD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACnB,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEM,QAAQ;QACX,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;CACJ;AAGG,0BAAO;;;;;;;;;;;;AC3BX,qDAAqD;;;AAIrD,SAAS,aAAa,CAAC,KAAa;IAChC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC1E,CAAC;AAeG,sCAAa;AAbjB,SAAS,aAAa,CAAC,KAAa;IAChC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,GAAG,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACtE,CAAC;AAYG,sCAAa;AAVjB,SAAS,iBAAiB,CAAC,KAAa;IACpC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,KAAK,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;AACjF,CAAC;AAUG,8CAAiB;AARrB,SAAS,WAAW,CAAC,KAA4B;IAC7C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;AAC7I,CAAC;AAKG,kCAAW;;;;;;;;;;;;ACvBf,qDAAqD;;;AAErD,MAAM,SAAS,GAAG;IACd,qBAAqB,EAAE,0BAA0B;IACjD,qBAAqB,EAAE,0BAA0B;IACjD,4BAA4B,EAAE,sCAAsC;IAEpE,6BAA6B,EAAE,4BAA4B;IAC3D,gBAAgB,EAAE,qBAAqB;IACvC,8BAA8B,EAAE,uBAAuB;IACvD,0BAA0B,EAAE,+BAA+B;IAC3D,oBAAoB,EAAE,yBAAyB;IAC/C,0BAA0B,EAAE,+BAA+B;IAC3D,oBAAoB,EAAE,yBAAyB;IAC/C,wBAAwB,EAAE,6BAA6B;IACvD,sBAAsB,EAAE,2BAA2B;IAEnD,qBAAqB,EAAE,0BAA0B;IACjD,yBAAyB,EAAE,8BAA8B;IACzD,uBAAuB,EAAE,4BAA4B;IACrD,0BAA0B,EAAE,+BAA+B;IAC3D,sBAAsB,EAAE,2BAA2B;IAEnD,eAAe,EAAE,qBAAqB;IACtC,yBAAyB,EAAE,+BAA+B;IAC1D,sBAAsB,EAAE,2BAA2B;IACnD,yBAAyB,EAAE,8BAA8B;IAEzD,uBAAuB,EAAE,4BAA4B;IACrD,qBAAqB,EAAE,0BAA0B;IACjD,wBAAwB,EAAE,6BAA6B;IACvD,uBAAuB,EAAE,4BAA4B;IACrD,mBAAmB,EAAE,wBAAwB;IAE7C,mBAAmB,EAAE,wBAAwB;IAC7C,0BAA0B,EAAE,+BAA+B;IAC3D,yBAAyB,EAAE,8BAA8B;IACzD,uBAAuB,EAAE,4BAA4B;IACrD,mBAAmB,EAAE,wBAAwB;CAChD,CAAC;AAEF,SAAS,0BAA0B;IAC/B,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;IACtF,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC;AACzD,CAAC;AACD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,0BAA0B,EAAE,0BAA0B,CAAC,CAAC;AAC5F,0BAA0B,EAAE,CAAC;AAI7B,SAAS,UAAU,CAAC,EAAU;IAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC5C,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC;AAED,IAAK,WAGJ;AAHD,WAAK,WAAW;IACZ,8BAAe;IACf,0CAA2B;AAC/B,CAAC,EAHI,WAAW,KAAX,WAAW,QAGf;AAmQG,kCAAW;AAjQf,IAAK,YAQJ;AARD,WAAK,YAAY;IACb,mEAAkB;IAClB,6EAAuB;IACvB,2EAAsB;IACtB,6DAAe;IACf,iDAAS;IACT,iDAAS;IACT,iDAAS;AACb,CAAC,EARI,YAAY,KAAZ,YAAY,QAQhB;AAmPG,oCAAY;AAjPhB,IAAK,gBAIJ;AAJD,WAAK,gBAAgB;IACjB,2DAAU;IACV,qFAAuB;IACvB,yDAAS;AACb,CAAC,EAJI,gBAAgB,KAAhB,gBAAgB,QAIpB;AA+OG,4CAAgB;AA7OpB,IAAK,aAOJ;AAPD,WAAK,aAAa;IACd,8BAAa;IACb,sCAAqB;IACrB,gCAAe;IACf,gDAA+B;IAC/B,kCAAiB;IACjB,4BAAW;AACf,CAAC,EAPI,aAAa,KAAb,aAAa,QAOjB;AAyOG,sCAAa;AAvOjB,IAAK,oBAIJ;AAJD,WAAK,oBAAoB;IACrB,qCAAa;IACb,2CAAmB;IACnB,6CAAqB;AACzB,CAAC,EAJI,oBAAoB,KAApB,oBAAoB,QAIxB;AA+NG,oDAAoB;AA7NxB,IAAK,sBAGJ;AAHD,WAAK,sBAAsB;IACvB,uCAAa;IACb,6CAAmB;AACvB,CAAC,EAHI,sBAAsB,KAAtB,sBAAsB,QAG1B;AA4NG,wDAAsB;AA1N1B,IAAK,kBAOJ;AAPD,WAAK,kBAAkB;IACnB,6BAAO;IACP,6BAAO;IACP,+BAAS;IACT,iCAAW;IACX,mCAAa;IACb,qCAAe;AACnB,CAAC,EAPI,kBAAkB,KAAlB,kBAAkB,QAOtB;AAoNG,gDAAkB;AAlNtB,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC;AAEnF,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;AAE7E,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC;AACzE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,yBAAyB,EAAE,SAAS,CAAC,CAAC;AAE5E,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;AACvE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;AACvE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;AAC3E,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC;AAEzE,MAAe,UAAU;IASd,MAAM,KAAK,YAAY;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;IACpE,CAAC;IACM,MAAM,KAAK,cAAc;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;IAChE,CAAC;IACM,MAAM,KAAK,mBAAmB;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;IACvE,CAAC;IAEM,MAAM,KAAK,qBAAqB;QACnC,OAAO,UAAU,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAC;IAC/D,CAAC;IACM,MAAM,KAAK,gBAAgB;QAC9B,OAAO,UAAU,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;IAChE,CAAC;IACM,MAAM,KAAK,kBAAkB;QAChC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;IACrE,CAAC;IACM,MAAM,KAAK,UAAU;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;IACnE,CAAC;IACM,MAAM,KAAK,UAAU;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;IACnE,CAAC;IACM,MAAM,KAAK,eAAe;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACvE,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,CAAC,KAAyB,CAAC;IACtC,CAAC;IACM,MAAM,KAAK,gBAAgB;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAgB,CAAC;IACnF,CAAC;IAEM,MAAM,KAAK,eAAe;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,CAAC,KAAK,CAAC;IAClB,CAAC;IACM,MAAM,KAAK,iBAAiB;QAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;QACxE,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,KAA2B,CAAC;IACvC,CAAC;IACM,MAAM,KAAK,gBAAgB;QAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;IAClE,CAAC;IACM,MAAM,KAAK,gBAAgB;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;IACzE,CAAC;IACM,MAAM,KAAK,sBAAsB;QACpC,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,MAAM,KAAK,YAAY;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC9D,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,KAAsB,CAAC;IAClC,CAAC;IACM,MAAM,KAAK,iBAAiB;QAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;QACxE,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,KAA+B,CAAC;IAC3C,CAAC;IACM,MAAM,KAAK,qBAAqB;QACnC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;IACrE,CAAC;IACM,MAAM,KAAK,wBAAwB;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;IACxE,CAAC;IAEM,MAAM,KAAK,eAAe;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;QACtE,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,KAA6B,CAAC;IACzC,CAAC;IACM,MAAM,KAAK,cAAc,CAAC,KAAa;QAC1C,MAAM,QAAQ,GAAG,CAAC,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAC;IACM,MAAM,KAAK,cAAc;QAC5B,OAAO,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,qBAAqB,CAAC,GAAG,GAAG,CAAC;IAChF,CAAC;IACM,MAAM,KAAK,iBAAiB,CAAC,KAAa;QAC7C,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC;IACM,MAAM,KAAK,iBAAiB;QAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;IACnE,CAAC;IACM,MAAM,KAAK,aAAa;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;IACtE,CAAC;IAEM,MAAM,KAAK,IAAI;QAClB,IAAI,UAAU,CAAC,SAAS,EAAE;YACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;SACjE;aAAM;YACH,OAAO,UAAU,CAAC,WAAW,KAAK,YAAY,CAAC,KAAK,CAAC;SACxD;IACL,CAAC;IAEM,MAAM,KAAK,mBAAmB;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;IACrE,CAAC;IAEM,MAAM,KAAK,WAAW;QACzB,IAAI,KAAgC,CAAC;QACrC,IAAI,UAAU,CAAC,SAAS,EAAE;YACtB,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;SACrE;aAAM;YACH,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9D;QAED,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,CAAC,KAAqB,CAAC;IAClC,CAAC;IAEM,MAAM,KAAK,gBAAgB;QAC9B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;IAClE,CAAC;IAEM,MAAM,KAAK,YAAY;QAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAC9D,CAAC;;AAuDD,gCAAU;AAxMa,oBAAS,GAAY,SAAS,CAAC;AAE/B,oCAAyB,GAAmB,EAAE,CAAC;AAC/C,oCAAyB,GAAmB,EAAE,CAAC;AAC/C,iCAAsB,GAAmB,EAAE,CAAC;AAC5C,kCAAuB,GAAmB,EAAE,CAAC;AAC7C,2BAAgB,GAAmB,EAAE,CAAC;AA8IjE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACxD,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,uBAAuB,EAAE;QACvD,QAAQ,EAAE,CAAC;KACd;AACL,CAAC,CAAC,CAAC;AACH,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,yBAAyB,EAAE,GAAG,EAAE;IAC9D,iCAAiC,EAAE,CAAC;IACpC,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,yBAAyB,EAAE;QACzD,QAAQ,EAAE,CAAC;KACd;AACL,CAAC,CAAC,CAAC;AACH,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAC3D,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,yBAAyB,EAAE;QACzD,QAAQ,EAAE,CAAC;KACd;AACL,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACxD,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,sBAAsB,EAAE;QACtD,QAAQ,EAAE,CAAC;KACd;AACL,CAAC,CAAC,CAAC;AAEH,SAAS,iCAAiC;IACtC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,yBAAyB,EAAE,UAAU,CAAC,YAAY,KAAK,aAAa,CAAC,IAAI,CAAC,CAAC;AACrH,CAAC;AACD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,eAAe,EAAE,GAAG,EAAE;IACpD,iCAAiC,EAAE,CAAC;IACpC,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,gBAAgB,EAAE;QAChD,QAAQ,EAAE,CAAC;KACd;AACL,CAAC,CAAC,CAAC;AACH,iCAAiC,EAAE,CAAC;AAEpC,SAAS,6BAA6B;IAClC,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW,KAAK,YAAY,CAAC,KAAK,CAAC;IAClE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,8BAA8B,EAAE,WAAW,CAAC,CAAC;IACnF,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC,0BAA0B,EAAE,WAAW,CAAC,CAAC;AACnF,CAAC;AACD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,6BAA6B,CAAC,CAAC;AACjF,6BAA6B,EAAE,CAAC;AAEhC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;;;;;ACpTtE,0FAAmD;AAQnD,MAAM,sBAAsB,GAA2B,EAAE,CAAC;AAE1D,SAAS,oBAAoB;IACzB,IAAI,MAAM,GAAG,yBAAyB,CAAC;IACvC,KAAK,MAAM,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE;QAC3E,MAAM,aAAa,GAAG,oCAAyB,EAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,IAAI,OAAO,UAAU,KAAK,aAAa,IAAI,CAAC;KACrD;IACD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AAC1B,CAAC;AAED,IAAI,oBAAoB,GAAG,CAAC,CAAC,CAAC;AAC9B,SAAS,iBAAiB;IACtB,IAAI,oBAAoB,GAAG,CAAC,EAAE;QAC1B,YAAY,CAAC,oBAAoB,CAAC,CAAC;KACtC;IACD,oBAAoB,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;QAC1C,oBAAoB,EAAE,CAAC;QACvB,oBAAoB,GAAG,CAAC,CAAC,CAAC;IAC9B,CAAC,EAAE,IAAI,CAAC,CAAC;AACb,CAAC;AAED,SAAS,SAAS,CAAC,IAA0B;IACzC,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,EAAE;QAClB,OAAO,GAAG,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,GAAG,CAAC;KACpD;IACD,OAAO,IAAI,CAAC,UAAU,CAAC;AAC3B,CAAC;AAED,SAAS,kBAAkB,CAAC,IAA0B;IAClD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QAC1C,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;KAC/C;IACD,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC;IAElE,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7B,MAAM,mBAAmB,GAAG,oCAAyB,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAE9E,OAAO,CAAC,KAAK,CAAC,aAAa,IAAI,YAAY,mBAAmB,GAAG,CAAC,CAAC;IACnE,iBAAiB,EAAE,CAAC;AACxB,CAAC;AAmBG,gDAAkB;AAjBtB,SAAS,mBAAmB,CAAC,IAA0B;IACnD,IAAI,OAAO,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,WAAW,EAAE;QAChE,MAAM,IAAI,KAAK,CAAC,uCAAuC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;KAC9E;IACD,IAAI,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE;QACnE,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;KACnE;IACD,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC;IAElE,MAAM,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7B,MAAM,mBAAmB,GAAG,oCAAyB,EAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAE9E,OAAO,CAAC,KAAK,CAAC,aAAa,IAAI,YAAY,mBAAmB,GAAG,CAAC,CAAC;IACnE,iBAAiB,EAAE,CAAC;AACxB,CAAC;AAIG,kDAAmB;;;;;;;;;;;;;;ACpEvB,SAAS,SAAS,CAAC,IAAY;IAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACtB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;KACzB;SAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAC1B;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAY,EAAE,KAAe;IACnD,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACnC,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;KAC1C;IACD,OAAO,gBAAgB,CAAC,IAAI,GAAG,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAED,SAAS,yBAAyB,CAAC,WAAmB;IAClD,OAAO,gBAAgB,CAAC,WAAW,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAClE,CAAC;AAeG,8DAAyB;AAb7B,SAAS,6BAA6B,CAAC,eAAuB;IAC1D,OAAO,gBAAgB,CAAC,eAAe,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACjE,CAAC;AAYG,sEAA6B;AAVjC,SAAS,6BAA6B,CAAC,eAAuB;IAC1D,OAAO,gBAAgB,CAAC,eAAe,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC3D,CAAC;AASG,sEAA6B;AAPjC,SAAS,6BAA6B,CAAC,eAAuB;IAC1D,OAAO,gBAAgB,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;AACrD,CAAC;AAMG,sEAA6B;;;;;;;;;;;;;;ACrCjC,QAAQ,CAAC,CAAC,wBAAwB,CAAI,KAAU;IAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,MAAM,cAAc,GAAG,KAAK,CAAC,CAAC,CAAE,CAAC;QAEjC,MAAM,iBAAiB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,MAAS,EAAE,KAAa,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;QAClF,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,MAAM,KAAK,CAAC;SACf;aAAM;YACH,KAAK,MAAM,cAAc,IAAI,wBAAwB,CAAC,iBAAiB,CAAC,EAAE;gBACtE,MAAM,CAAC,cAAc,EAAE,GAAG,cAAc,CAAC,CAAC;aAC7C;SACJ;KACJ;AACL,CAAC;AAGG,4DAAwB;;;;;;;;;;;;;;ACf5B,gHAAoC;AAMpC,MAAM,SAAS;IAQX,YAAmB,kBAAkC,EAAE,CAAS;QAC5D,MAAM,QAAQ,GAAW,EAAE,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,QAAQ,CAAC,IAAI,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;SAC3C;QACD,MAAM,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjC,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;SACjD;QAED,IAAI,CAAC,QAAQ,GAAG,SAAS,YAAY,CAAC,QAAQ,KAAK,CAAC,GAAG,CAAC;QACxD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,qBAAO,EAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEM,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChE,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,MAAM,WAAW,GAAG,KAAkB,CAAC;QAEvC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAmB,EAAE,KAAa,EAAE,EAAE;YACvD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,CAAC,OAAO,EAAE;gBACV,MAAM,IAAI,KAAK,EAAE,CAAC;aACrB;YAED,MAAM,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;YACxC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,GAAG,WAAW,EAAE,UAAU,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAGG,8BAAS;;;;;;;;;;;;;;AClDb,MAAM,SAAS;IAAf;QACoB,aAAQ,GAAW,aAAa,CAAC;QACjC,oBAAe,GAAoB,QAAQ,CAAC;QAC5C,UAAK,GAAW,CAAC,CAAC;QAClB,SAAI,GAAW,CAAC,CAAC;IASrC,CAAC;IAPU,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QAED,IAAI,UAAU,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACxD,CAAC;CACJ;AAED,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AAG9B,8BAAS;;;;;;;;;;;;;;AClBb,MAAM,SAAS;IAAf;QACoB,aAAQ,GAAW,aAAa,CAAC;QACjC,oBAAe,GAAoB,QAAQ,CAAC;QAC5C,UAAK,GAAW,CAAC,CAAC;QAClB,SAAI,GAAW,CAAC,CAAC;IASrC,CAAC;IAPU,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;YACpE,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QAED,IAAI,WAAW,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC;CACJ;AAED,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AAG9B,8BAAS;;;;;;;;;;;;;;AClBb,MAAM,GAAG;IAAT;QACoB,aAAQ,GAAW,KAAK,CAAC;QACzB,oBAAe,GAAoB,SAAS,CAAC;QAC7C,UAAK,GAAW,CAAC,CAAC;QAClB,SAAI,GAAW,CAAC,CAAC;IAQrC,CAAC;IANU,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,IAAI,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC;CACJ;AAED,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;AAGlB,kBAAG;;;;;;;;;;;;;;ACjBP,MAAM,GAAG;IAAT;QACoB,aAAQ,GAAW,KAAK,CAAC;QACzB,oBAAe,GAAoB,QAAQ,CAAC;QAC5C,UAAK,GAAW,CAAC,CAAC;QAClB,SAAI,GAAW,CAAC,CAAC;IAQrC,CAAC;IANU,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACvD,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,IAAI,UAAU,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACxD,CAAC;CACJ;AAED,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;AAGlB,kBAAG;;;;;;;;;;;;;;AClBP,iHAAyC;AAEzC,MAAM,MAAM;IAAZ;QACoB,aAAQ,GAAW,aAAa,CAAC;QACjC,UAAK,GAAW,CAAC,CAAC;QAClB,SAAI,GAAW,EAAE,CAAC;IAmBtC,CAAC;IAjBU,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,CAAC,yBAAW,EAAC,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,MAAM,YAAY,GAAG,KAA2B,CAAC;QACjD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QAED,MAAM,MAAM,GAAG,YAAyB,CAAC;QACzC,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;YACtB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;aAChD;SACJ;QACD,IAAI,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAA2B,CAAC,CAAC;IAClF,CAAC;CACJ;AAED,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAGxB,wBAAM;;;;;;;;;;;;;;AC7BV,iHAAyC;AAEzC,MAAM,MAAM;IAAZ;QACoB,aAAQ,GAAW,aAAa,CAAC;QACjC,UAAK,GAAW,EAAE,CAAC;QACnB,SAAI,GAAW,EAAE,CAAC;IAmBtC,CAAC;IAjBU,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,CAAC,yBAAW,EAAC,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,MAAM,YAAY,GAAG,KAA2B,CAAC;QACjD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QAED,MAAM,MAAM,GAAG,YAAyB,CAAC;QACzC,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;YACtB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;aAChD;SACJ;QACD,IAAI,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAA2B,CAAC,CAAC;IAClF,CAAC;CACJ;AAED,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAGxB,wBAAM;;;;;;;;;;;;;;AC5BV,MAAM,GAAG;IAAT;QACoB,aAAQ,GAAW,KAAK,CAAC;QACzB,oBAAe,GAAoB,QAAQ,CAAC;QAC5C,UAAK,GAAW,CAAC,CAAC;QAClB,SAAI,GAAW,CAAC,CAAC;IAQrC,CAAC;IANU,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;YACpE,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,IAAI,WAAW,CAAC,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC;CACJ;AAED,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;AAGlB,kBAAG;;;;;;;;;;;;;;ACnBP,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAGjC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAGjC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAGjC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAGnC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAGnC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAGnC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAGnC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAGnC,0BAAO;;;;;;;;;;;;;;ACLX,8HAAqC;AAErC,MAAM,OAAO,GAAG,IAAI,kBAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAGnC,0BAAO;;;;;;;;;;;;;;ACJX,iHAAyC;AAEzC,MAAM,OAAO;IAOT,YAAmB,CAAY,EAAE,KAAa,EAAE,IAAY;QACxD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,EAAE,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAEM,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,CAAC,yBAAW,EAAC,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,MAAM,YAAY,GAAG,KAAkB,CAAC;QACxC,IAAI,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QAED,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;YAC5B,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;aAChD;SACJ;QACD,IAAI,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,YAAiC,CAAC,CAAC;IACzF,CAAC;CACJ;AAGG,0BAAO;;;;;;;;;;;;;;ACrCX,iHAAyC;AAEzC,MAAM,OAAO;IAOT,YAAmB,CAAY,EAAE,KAAa,EAAE,IAAY;QACxD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,EAAE,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAEM,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,CAAC,yBAAW,EAAC,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,MAAM,YAAY,GAAG,KAAkB,CAAC;QACxC,IAAI,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QAED,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;YAC5B,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;gBACnD,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;aAChD;SACJ;QACD,IAAI,UAAU,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,YAAiC,CAAC,CAAC;IACvF,CAAC;CACJ;AAGG,0BAAO;;;;;;;;;;;;;;ACrCX,iHAAyC;AAEzC,MAAM,OAAO;IAOT,YAAmB,CAAY,EAAE,KAAa,EAAE,IAAY;QACxD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,EAAE,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAEM,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,CAAC,yBAAW,EAAC,KAAK,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,MAAM,YAAY,GAAG,KAAkB,CAAC;QACxC,IAAI,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QAED,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;YAC5B,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE;gBAC9D,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;aAChD;SACJ;QACD,IAAI,WAAW,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,YAAiC,CAAC,CAAC;IACxF,CAAC;CACJ;AAGG,0BAAO;;;;;;;;;;;;;;ACtCX,SAAS,OAAO,CAAC,CAAS,EAAE,CAAS;IACjC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AAChC,CAAC;AAQG,0BAAO;AANX,SAAS,WAAW,CAAC,KAAc;IAC/B,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7D,CAAC;AAGG,kCAAW;;;;;;;;;;;;;;ACTf,4HAA2C;AAC3C,0GAA8B;AAE9B,MAAM,sBAAsB,GAAG,IAAI,wBAAU,CAAC,oBAAoB,EAAE;IAChE,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,WAAG,EAAE;IAClC,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,WAAG,EAAE;IACrC,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,WAAG,EAAE;IAClC,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,WAAG,EAAE;CACvC,CAAC,CAAC;AAGC,wDAAsB;;;;;;;;;;;;;;ACV1B,gHAAoC;AAwBpC,MAAM,UAAU;IAOZ,YAAmB,UAAkB,EAAE,qBAA4C;QAC/E,MAAM,UAAU,GAAgB,EAAE,CAAC;QACnC,qBAAqB,CAAC,OAAO,CAAC,CAAC,mBAAwC,EAAE,KAAa,EAAE,EAAE;YACtF,MAAM,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;YAEtC,KAAK,MAAM,cAAc,IAAI,UAAU,EAAE;gBACrC,IAAI,cAAc,CAAC,IAAI,KAAK,IAAI,EAAE;oBAC9B,MAAM,IAAI,KAAK,CAAC,6BAA6B,IAAI,IAAI,CAAC,CAAC;iBAC1D;aACJ;YAED,IAAI,KAAa,CAAC;YAClB,MAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC;YACpD,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;gBACjC,IAAI,WAAW,GAAG,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE;oBAC9C,MAAM,IAAI,KAAK,CAAC,iBAAiB,WAAW,4CAA4C,mBAAmB,CAAC,IAAI,CAAC,KAAK,UAAU,IAAI,WAAW,mBAAmB,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;iBACzL;gBACD,KAAK,GAAG,WAAW,CAAC;aACvB;iBAAM;gBACH,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC;aAC1C;YAED,IAAI,IAAY,CAAC;YACjB,MAAM,UAAU,GAAG,mBAAmB,CAAC,UAAU,CAAC;YAClD,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;gBAChC,IAAI,UAAU,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE;oBAC5C,MAAM,IAAI,KAAK,CAAC,gBAAgB,UAAU,4CAA4C,mBAAmB,CAAC,IAAI,CAAC,IAAI,UAAU,IAAI,WAAW,mBAAmB,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;iBACtL;gBACD,IAAI,GAAG,UAAU,CAAC;aACrB;iBAAM;gBACH,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;aACxC;YAED,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,MAAM,iBAAiB,GAAG,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAChD,IAAI,iBAAiB,EAAE;gBACnB,MAAM,GAAG,qBAAO,EAAC,KAAK,EAAE,iBAAiB,CAAC,MAAM,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9E;YAED,UAAU,CAAC,IAAI,CAAC;gBACZ,IAAI;gBACJ,IAAI,EAAE,mBAAmB,CAAC,IAAI;gBAC9B,KAAK;gBACL,IAAI;gBACJ,MAAM;gBACN,WAAW;gBACX,UAAU;aACb,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;YAChC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;SAC5C;QAED,MAAM,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,aAAa,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC/D;QACD,MAAM,IAAI,GAAG,qBAAO,EAAC,KAAK,EAAE,aAAa,CAAC,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;QAEvE,IAAI,CAAC,QAAQ,GAAG,UAAU,UAAU,EAAE,CAAC;QACvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAEM,QAAQ,CAAC,WAAwB,EAAE,MAAc,EAAE,KAAc;QACpE,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,kBAAkB,KAAK,IAAI,CAAC,CAAC;SAChD;QACD,MAAM,aAAa,GAAG,KAAe,CAAC;QACtC,KAAK,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YACzE,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;SAC7E;IACL,CAAC;IAEM,gBAAgB,CAAC,WAAwB,EAAE,MAAc,EAAE,aAAqB,EAAE,cAAuB;QAC5G,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACrC,IAAI,SAAS,CAAC,IAAI,KAAK,aAAa,EAAE;gBAClC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;gBAChF,OAAO;aACV;SACJ;QACD,MAAM,IAAI,KAAK,CAAC,6BAA6B,aAAa,IAAI,CAAC,CAAC;IACpE,CAAC;IAEM,iBAAiB,CAAC,aAAqB;QAC1C,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACrC,IAAI,SAAS,CAAC,IAAI,KAAK,aAAa,EAAE;gBAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE;oBACjC,MAAM,IAAI,KAAK,CAAC,+BAA+B,SAAS,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC;iBAC/E;gBAED,OAAO;oBACH,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,eAAe;oBACtC,MAAM,EAAE,SAAS,CAAC,MAAM;iBAC3B,CAAC;aACL;SACJ;QACD,MAAM,IAAI,KAAK,CAAC,sBAAsB,aAAa,IAAI,CAAC,CAAC;IAC7D,CAAC;IAEM,QAAQ;QACX,MAAM,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACzD,IAAI,WAAW,GAAG,MAAM,CAAC;YACzB,IAAI,OAAO,SAAS,CAAC,WAAW,KAAK,QAAQ,EAAE;gBAC3C,WAAW,IAAI,UAAU,SAAS,CAAC,WAAW,IAAI,CAAC;aACtD;YACD,IAAI,OAAO,SAAS,CAAC,UAAU,KAAK,QAAQ,EAAE;gBAC1C,WAAW,IAAI,SAAS,SAAS,CAAC,UAAU,IAAI,CAAC;aACpD;YACD,WAAW,IAAI,GAAG,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC;YAChE,MAAM,aAAa,GAAG,UAAU,SAAS,CAAC,MAAM,GAAG,CAAC;YACpD,MAAM,YAAY,GAAG,SAAS,SAAS,CAAC,KAAK,GAAG,CAAC;YACjD,MAAM,WAAW,GAAG,QAAQ,SAAS,CAAC,IAAI,GAAG,CAAC;YAC9C,OAAO;gBACH,WAAW;gBACX,aAAa;gBACb,YAAY;gBACZ,WAAW;aACd,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,MAAM,iBAAiB,GAAG,UAAU,IAAI,CAAC,IAAI,IAAI,CAAC;QAClD,MAAM,kBAAkB,GAAG,SAAS,IAAI,CAAC,KAAK,GAAG,CAAC;QAClD,MAAM,iBAAiB,GAAG,QAAQ,IAAI,CAAC,IAAI,GAAG,CAAC;QAE/C,IAAI,kBAAkB,GAAG,iBAAiB,CAAC,MAAM,CAAC;QAClD,IAAI,oBAAoB,GAAG,CAAC,CAAC;QAC7B,IAAI,mBAAmB,GAAG,kBAAkB,CAAC,MAAM,CAAC;QACpD,IAAI,kBAAkB,GAAG,iBAAiB,CAAC,MAAM,CAAC;QAClD,KAAK,MAAM,iBAAiB,IAAI,oBAAoB,EAAE;YAClD,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YACxF,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,iBAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC9F,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAC3F,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SAC3F;QAED,MAAM,gBAAgB,GAAG,oBAAoB,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE;YACpE,OAAO,GAAG,mBAAmB,CAAC,WAAW,CAAC,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,oBAAoB,EAAE,GAAG,CAAC,IAAI,mBAAmB,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,EAAE,GAAG,CAAC,IAAI,mBAAmB,CAAC,WAAW,CAAC,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC,EAAE,CAAC;QAClS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACd,OAAO,GAAG,iBAAiB,CAAC,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC,OAAO,GAAG,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,EAAE,GAAG,CAAC,IAAI,iBAAiB,CAAC,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC;EACpN,gBAAgB;GACf,CAAC;IACA,CAAC;IAEM,SAAS;QACZ,IAAI,mBAAmB,GAAG,CAAC,CAAC;QAC5B,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACrC,mBAAmB,IAAI,SAAS,CAAC,IAAI,CAAC;SACzC;QACD,OAAO,IAAI,CAAC,IAAI,KAAK,mBAAmB,CAAC;IAC7C,CAAC;CACJ;AAOG,gCAAU;;;;;;;;;;;;;;AClMd,uHAAyC;AAAhC,iHAAS;AAElB,6IAAoD;AAA3C,iHAAS;AAClB,6IAAoD;AAA3C,iHAAS;AAClB,wHAAuC;AAA9B,8FAAG;AACZ,wHAAuC;AAA9B,8FAAG;AACZ,iIAA6C;AAApC,uGAAM;AACf,iIAA6C;AAApC,uGAAM;AACf,wHAAuC;AAA9B,8FAAG;AACZ,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,uIAAgD;AAAvC,2GAAO;AAChB,oKAAqE;AAA5D,0JAAsB;AAC/B,0HAAiE;AAAxD,oHAAU;;;;;;;;;;;;;;ACfnB,MAAM,YAAY,GAA0C;IACxD,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,QAAQ,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC1B,QAAQ,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC1B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC3B,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,WAAW,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC7B,YAAY,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC9B,iBAAiB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACnC,YAAY,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC9B,WAAW,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC7B,WAAW,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC7B,YAAY,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC9B,iBAAiB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACnC,cAAc,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAChC,cAAc,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAChC,eAAe,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACjC,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,WAAW,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC7B,YAAY,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC9B,YAAY,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC9B,aAAa,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC/B,YAAY,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IAC/B,YAAY,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IAC/B,aAAa,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IAChC,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC5B,cAAc,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAChC,aAAa,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC/B,sBAAsB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACxC,cAAc,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAChC,uBAAuB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACzC,gBAAgB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAClC,qBAAqB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACvC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,aAAa,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC/B,aAAa,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAC/B,cAAc,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACjC,cAAc,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACjC,iBAAiB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACpC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAClC,qBAAqB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACvC,kBAAkB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACpC,uBAAuB,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IACzC,iBAAiB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACpC,sBAAsB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACzC,cAAc,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAChC,cAAc,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;IAChC,eAAe,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IAClC,eAAe,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IAClC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,gBAAgB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACnC,qBAAqB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACxC,iBAAiB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACpC,sBAAsB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACzC,iBAAiB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACpC,sBAAsB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACzC,iBAAiB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACpC,sBAAsB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACzC,kBAAkB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACrC,uBAAuB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IAC1C,kBAAkB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACrC,uBAAuB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IAC1C,kBAAkB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;IACrC,uBAAuB,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;CAC7C,CAAC;AAGE,oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGhB,4IAA2D;AAC3D,qHAA+C;AAE/C,SAAS,iBAAiB,CAAC,KAAa,EAAE,MAAc,EAAE,MAAwB;IAC9E,MAAM,SAAS,GAAG,4BAAY,CAAC,MAAM,CAAC,CAAC;IACvC,OAAO,KAAK,GAAG,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC;AAChD,CAAC;AAED,MAAM,OAAO;IAOT,YACqB,MAAiB,EAClB,MAAwB,EACxB,KAA2B;QAF1B,WAAM,GAAN,MAAM,CAAW;QAClB,WAAM,GAAN,MAAM,CAAkB;QACxB,UAAK,GAAL,KAAK,CAAsB;QAPvC,UAAK,GAAW,CAAC,CAAC;QAClB,WAAM,GAAW,CAAC,CAAC;QACnB,YAAO,GAAsB,IAAI,CAAC;IAO1C,CAAC;IAEM,GAAG;QACN,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;gBACrC,MAAM,IAAI,KAAK,CAAC,wBAAwB,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;aACzE;YAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;gBACrC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC;gBAC/B,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,KAAK,EAAE,IAAI,CAAC,KAAK;aACpB,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YACjC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YAEnC,aAAa,CAAC,kBAAkB,CAAC;gBAC7B,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,iBAAiB,EAAE,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC;gBAChE,UAAU,EAAE,GAAG,KAAK,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;aACnD,CAAC,CAAC;SACN;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEM,OAAO,CAAC,UAAiC;QAC5C,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,OAAO,CAAC,KAAa,EAAE,MAAc;QACxC,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;YAChD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,QAAQ,CAAC,KAA2B;QACvC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,KAAK,CAAC;IAC1C,CAAC;IAEM,IAAI;QACP,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YACjC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACnC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,aAAa,CAAC,mBAAmB,CAAC;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,iBAAiB,EAAE,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC;gBAChE,UAAU,EAAE,GAAG,KAAK,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;aACnD,CAAC,CAAC;SACN;IACL,CAAC;;AAID,0BAAO;AA/EiB,kBAAU,GAAW,YAAY,CAAC;;;;;;;;;;;;;;ACT9D,qGAA2D;AAC3D,iJAA0F;AAyEtF,4FAzE+B,wBAAU,QAyE/B;AAxEd,6GAA+C;AAE/C,MAAM,cAAc;IAShB,YAAmB,MAAiB,EAAE,qBAA4C;QAF1E,kBAAa,GAAY,IAAI,CAAC;QAGlC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,IAAI,wBAAU,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC;QAEpE,IAAI,cAAc,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE;YAC9D,MAAM,eAAe,GAAG,cAAc,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;YACtE,MAAM,cAAc,GAAG,IAAI,wBAAU,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;YACnE,IAAI,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;gBAC5C,OAAO,CAAC,IAAI,CAAC,uDAAuD,IAAI,CAAC,UAAU,CAAC,IAAI,MAAM,IAAI,CAAC,UAAU,6BAA6B,cAAc,CAAC,IAAI,MAAM,cAAc,EAAE,CAAC,CAAC;aACxL;SACJ;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAClD,IAAI,CAAC,SAAS,GAAG,IAAI,4BAAY,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3C,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;YAC1B,KAAK,EAAE,cAAc,CAAC,QAAQ,GAAG,cAAc,CAAC,OAAO;SAC1D,CAAC,CAAC;IACP,CAAC;IAED,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC;IAC1C,CAAC;IAEM,gBAAgB,CAAC,IAAY,EAAE,KAAc;QAChD,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAC5D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAEM,WAAW;QACd,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACtE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC9B;IACL,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IAEM,IAAI;QACP,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,qBAA4C;QAC9D,IAAI,eAAe,GAAG,qBAAqB,CAAC;QAC5C,IAAI,OAAO,GAAG,IAAI,wBAAU,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC,IAAI,CAAC;QAErE,KAAK,MAAM,WAAW,IAAI,oCAAwB,EAAC,qBAAqB,CAAC,EAAE;YACvE,MAAM,IAAI,GAAG,IAAI,wBAAU,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC;YAC1D,IAAI,IAAI,GAAG,OAAO,EAAE;gBAChB,OAAO,GAAG,IAAI,CAAC;gBACf,eAAe,GAAG,WAAW,CAAC;aACjC;SACJ;QAED,OAAO,eAAe,CAAC;IAC3B,CAAC;;AAID,wCAAc;AApEA,4BAAa,GAAY,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLhD,2IAA0D;AAO1D,MAAM,YAAY;IAOd,YACqB,MAAiB,EAClC,UAAsB;QADL,WAAM,GAAN,MAAM,CAAW;QAL9B,WAAM,GAAqB,IAAI,CAAC;QAQpC,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;IAClC,CAAC;IAED,IAAW,SAAS;QAChB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;gBAC5B,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;aACpB,CAAC,CAAC;SACN;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,IAAW,eAAe;QACtB,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;IACtC,CAAC;IAEM,cAAc,CAAC,MAAkB,EAAE,IAAgB;QACtD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC;gBAC5B,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,gBAAgB,EAAE,IAAI;aACzB,CAAC,CAAC;SACN;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACnC,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACnD,MAAM,IAAI,KAAK,EAAE,CAAC;SACrB;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAEM,QAAQ,CAAC,KAA0B;QACtC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,KAAK,CAAC;IAC1C,CAAC;IAEM,IAAI;QACP,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YAEnB,aAAa,CAAC,mBAAmB,CAAC;gBAC9B,UAAU,EAAE,YAAY,CAAC,UAAU;gBACnC,iBAAiB,EAAE,IAAI,CAAC,IAAI;aAC/B,CAAC,CAAC;SACN;IACL,CAAC;IAEO,YAAY,CAAC,UAA+B;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAEpD,aAAa,CAAC,kBAAkB,CAAC;YAC7B,UAAU,EAAE,YAAY,CAAC,UAAU;YACnC,iBAAiB,EAAE,IAAI,CAAC,IAAI;SAC/B,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;;AAID,oCAAY;AA9EY,uBAAU,GAAW,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR7D,2GAA4C;AAC5C,kHAA0C;AAO1C,MAAM,YAAY;IAWd,YAAoC,MAAyB;QAAzB,WAAM,GAAN,MAAM,CAAmB;QACzD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAEhD;YACI,MAAM,WAAW,GAAG,QAAQ,CAAC;YAC7B,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAC/C,IAAI,CAAC,OAAO,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,oBAAoB,WAAW,wBAAwB,CAAC,CAAC;aAC5E;YACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SAC1B;QAED,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,mBAAmB,GAAG;YACvB,MAAM;YACN,MAAM,EAAE,SAAS,CAAC,GAAG,CAAC,wBAAwB,EAAE;YAChD,KAAK,EAAE,eAAe,CAAC,iBAAiB;YACxC,SAAS,EAAE,QAAQ;YACnB,0DAA0D;SAC7D,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,IAAI,iBAAO,CAAC,MAAM,EAAE,cAAc,EAAE,eAAe,CAAC,iBAAiB,CAAC,CAAC;QAC3F,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAEpD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;QACrD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;QAE7C,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAED,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;IACpC,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;IAC3C,CAAC;IAED,IAAW,KAAK;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7B,CAAC;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED,IAAW,kBAAkB;QACzB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,KAAuC;QACxD,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC;IAEM,UAAU;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAChF,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAElF,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,YAAY,EAAE;YAC1E,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,YAAY,CAAC;YAElC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;gBAClE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;aACvD;SACJ;IACL,CAAC;IAEM,eAAe,CAAC,cAAiC,EAAE,OAA2B;QACjF,MAAM,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QACnE,MAAM,iBAAiB,GAAG,cAAc,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;QAC/E,iBAAiB,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACnE,iBAAiB,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAChE,OAAO,iBAAiB,CAAC;IAC7B,CAAC;IAEO,uBAAuB,CAAC,OAA2B;QACvD,OAAO;YACH,gBAAgB,EAAE,CAAC;oBACf,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,UAAU,EAAE;oBACnD,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,MAAM,EAAE,CAAC,QAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,MAAK,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;oBAC1D,OAAO,EAAE,OAAO;iBACnB,CAAC;YACF,sBAAsB,EAAE;gBACpB,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;gBACjC,eAAe,EAAE,CAAC;gBAClB,WAAW,EAAE,CAAC,QAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,MAAK,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAC,CAAC,OAAO;gBAC9D,YAAY,EAAE,OAAO;gBACrB,eAAe,EAAE,IAAI;aACxB;SACJ,CAAC;IACN,CAAC;CACJ;AAGG,oCAAY;;;;;;;;;;;;ACzHhB,qDAAqD;;;AAErD,SAAS,wBAAwB,CAAC,EAAU,EAAE,OAAe;IACzD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAC3C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACpC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC;AAED,MAAM,GAAG,GAAQ,SAAS,CAAC,GAAG,CAAC;AA6B3B,kBAAG;AA5BP,IAAI,CAAC,GAAG,EAAE;IACN,wBAAwB,CAAC,gBAAgB,EAAE,+CAA+C,CAAC,CAAC;CAC/F;AAED,IAAI,OAAO,GAAsB,IAAI,CAAC;AAsBlC,0BAAO;AArBX,IAAI,MAAM,GAAqB,IAAI,CAAC;AAsBhC,wBAAM;AApBV,KAAK,UAAU,aAAa;IACxB,IAAI,CAAC,MAAM,EAAE;QACT,yBAAO,GAAG,MAAM,GAAG,CAAC,cAAc,CAAC;YAC/B,eAAe,EAAE,kBAAkB;SACtC,CAAC,CAAC;QAEH,IAAI,OAAO,EAAE;YACT,IAAI,OAAO,CAAC,iBAAiB,EAAE;gBAC3B,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,oBAAoB,EAAE,2EAA2E,CAAC,CAAC;aACpI;YACD,uBAAM,GAAG,MAAM,OAAO,CAAC,aAAa,EAAE,CAAC;SAC1C;aAAM;YACH,wBAAwB,CAAC,gBAAgB,EAAE,iCAAiC,CAAC,CAAC;SACjF;KACJ;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAMoB,mCAAU;;;;;;;;;;;;;;AC3B/B,MAAe,YAAY;IAChB,MAAM,CAAC,MAAM,CAAC,MAAiB,EAAE,IAAU;QAC9C,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAErB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACtD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACnC;SACJ;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACtE,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC;SACvD;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAmB,EAAE,EAAE;gBACzF,OAAO,SAAS,IAAI,MAAM,KAAK,GAAG,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC;SACrD;QAED,OAAO,MAAM,CAAC,kBAAkB,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC;CACJ;AAGG,oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvChB,6IAAsD;AACtD,yGAA4C;AAAnC,0GAAO;AAChB,iHAA+D;AAAtD,0HAAc,QAAY;AACnC,2GAAyD;AAAhD,oHAAY,QAAU;AAC/B,2GAAyD;AAAhD,oHAAY,QAAU;AAC/B,4GAAgC;AAChC,gIAAsD;AAA7C,iIAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCNrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://water-webgpu/./node_modules/gl-matrix/esm/common.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/index.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/mat2.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/mat2d.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/mat3.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/mat4.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/quat.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/quat2.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/vec2.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/vec3.js","webpack://water-webgpu/./node_modules/gl-matrix/esm/vec4.js","webpack://water-webgpu/./src/ts/engine/engine.ts","webpack://water-webgpu/./src/ts/engine/indexing/count-particles-per-cell.ts","webpack://water-webgpu/./src/ts/engine/indexing/finalize-prefix-sum.ts","webpack://water-webgpu/./src/ts/engine/indexing/indexing.ts","webpack://water-webgpu/./src/ts/engine/indexing/prefix-sum.ts","webpack://water-webgpu/./src/ts/engine/indexing/prepare-prefix-sum.ts","webpack://water-webgpu/./src/ts/engine/indexing/reorder-particles.ts","webpack://water-webgpu/./src/ts/engine/indexing/reset-cells.ts","webpack://water-webgpu/./src/ts/engine/initial-conditions/fillable-mesh.ts","webpack://water-webgpu/./src/ts/engine/initial-conditions/initial-positions.ts","webpack://water-webgpu/./src/ts/engine/initial-conditions/models/mesh.ts","webpack://water-webgpu/./src/ts/engine/initial-conditions/models/models.ts","webpack://water-webgpu/./src/ts/engine/initial-conditions/models/triangle.ts","webpack://water-webgpu/./src/ts/engine/initial-conditions/ray-caster.ts","webpack://water-webgpu/./src/ts/engine/simulation/acceleration.ts","webpack://water-webgpu/./src/ts/engine/simulation/initialization.ts","webpack://water-webgpu/./src/ts/engine/simulation/integration.ts","webpack://water-webgpu/./src/ts/engine/simulation/obstacles-rotation.ts","webpack://water-webgpu/./src/ts/main.ts","webpack://water-webgpu/./src/ts/rendering/axes-renderer.ts","webpack://water-webgpu/./src/ts/rendering/camera.ts","webpack://water-webgpu/./src/ts/rendering/cube-renderer.ts","webpack://water-webgpu/./src/ts/rendering/grid-cells-by-population-renderer.ts","webpack://water-webgpu/./src/ts/rendering/grid-cells-renderer.ts","webpack://water-webgpu/./src/ts/rendering/mesh/mesh-renderable.ts","webpack://water-webgpu/./src/ts/rendering/mesh/mesh-renderer.ts","webpack://water-webgpu/./src/ts/rendering/spheres/blur.ts","webpack://water-webgpu/./src/ts/rendering/spheres/composition.ts","webpack://water-webgpu/./src/ts/rendering/spheres/deferred.ts","webpack://water-webgpu/./src/ts/rendering/spheres/spheres-renderer.ts","webpack://water-webgpu/./src/ts/scene.ts","webpack://water-webgpu/./src/ts/shader-sources.ts","webpack://water-webgpu/./src/ts/ui/counter.ts","webpack://water-webgpu/./src/ts/ui/indicators.ts","webpack://water-webgpu/./src/ts/ui/parameters.ts","webpack://water-webgpu/./src/ts/webgpu-utils/helpers/memory-metrics.ts","webpack://water-webgpu/./src/ts/webgpu-utils/helpers/size.ts","webpack://water-webgpu/./src/ts/webgpu-utils/helpers/utils.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/array-type.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/atomic-i32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/atomic-u32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/f32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/i32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/mat2x2.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/mat4x4.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/u32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec2-f32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec2-i32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec2-u32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec3-f32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec3-i32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec3-u32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec4-f32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec4-i32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vec4-u32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vecx-f32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vecx-i32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/base-types/vecx-u32.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/helpers.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/indirect-draw-buffer-type.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/struct-type.ts","webpack://water-webgpu/./src/ts/webgpu-utils/host-shareable-types/types.ts","webpack://water-webgpu/./src/ts/webgpu-utils/texture/texture-types.ts","webpack://water-webgpu/./src/ts/webgpu-utils/texture/texture.ts","webpack://water-webgpu/./src/ts/webgpu-utils/uniforms-buffer.ts","webpack://water-webgpu/./src/ts/webgpu-utils/webgpu-buffer.ts","webpack://water-webgpu/./src/ts/webgpu-utils/webgpu-canvas.ts","webpack://water-webgpu/./src/ts/webgpu-utils/webgpu-device.ts","webpack://water-webgpu/./src/ts/webgpu-utils/webgpu-shader-module.ts","webpack://water-webgpu/./src/ts/webgpu-utils/webgpu-utils.ts","webpack://water-webgpu/webpack/bootstrap","webpack://water-webgpu/webpack/runtime/define property getters","webpack://water-webgpu/webpack/runtime/hasOwnProperty shorthand","webpack://water-webgpu/webpack/runtime/make namespace object","webpack://water-webgpu/webpack/before-startup","webpack://water-webgpu/webpack/startup","webpack://water-webgpu/webpack/after-startup"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"gl-matrix\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-utils\";\r\nimport { CellsBufferData, CellsBufferDescriptor, GridData, Indexing, NonEmptyCellsBuffers } from \"./indexing/indexing\";\r\nimport { FillableMesh } from \"./initial-conditions/fillable-mesh\";\r\nimport { InitialPositions } from \"./initial-conditions/initial-positions\";\r\nimport { Mesh } from \"./initial-conditions/models/mesh\";\r\nimport { Acceleration } from \"./simulation/acceleration\";\r\nimport { Initialization } from \"./simulation/initialization\";\r\nimport { Integration } from \"./simulation/integration\";\r\nimport { ParticlesRotation } from \"./simulation/obstacles-rotation\";\r\n\r\ntype Data = {\r\n    particlesContainerMesh: Mesh;\r\n    obstaclesMesh: Mesh | null;\r\n    spheresRadius: number;\r\n};\r\n\r\ntype SpheresBufferDescriptor = {\r\n    readonly positionAttribute: WebGPU.Types.VertexAttribute;\r\n    readonly weightAttribute: WebGPU.Types.VertexAttribute;\r\n    readonly foamAttribute: WebGPU.Types.VertexAttribute;\r\n    readonly bufferArrayStride: number;\r\n};\r\n\r\ntype SpheresBuffer = {\r\n    readonly gpuBuffer: GPUBuffer;\r\n    readonly instancesCount: number;\r\n    readonly sphereRadius: number;\r\n};\r\n\r\ntype ParticlesBufferData = {\r\n    readonly particlesBuffer: WebGPU.Buffer;\r\n    readonly particlesStructType: WebGPU.Types.StructType;\r\n    readonly particlesCount: number;\r\n};\r\n\r\ntype ResetResult = {\r\n    particlesBuffer: WebGPU.Buffer;\r\n    particlesCount: number;\r\n\r\n    particlesPositions: glMatrix.vec3[];\r\n    obstaclesPositions: glMatrix.vec3[];\r\n\r\n    cellSize: number;\r\n    gridSize: glMatrix.ReadonlyVec3;\r\n};\r\n\r\nclass Engine {\r\n    private static readonly particleStructType = new WebGPU.Types.StructType(\"Particle\", [\r\n        { name: \"position\", type: WebGPU.Types.vec3F32 },\r\n        { name: \"weight\", type: WebGPU.Types.f32 },\r\n        { name: \"velocity\", type: WebGPU.Types.vec3F32 },\r\n        { name: \"foam\", type: WebGPU.Types.f32 },\r\n        { name: \"acceleration\", type: WebGPU.Types.vec3F32 },\r\n        { name: \"indexInCell\", type: WebGPU.Types.u32 },\r\n    ]);\r\n    public static readonly spheresBufferDescriptor: SpheresBufferDescriptor = {\r\n        positionAttribute: Engine.particleStructType.asVertexAttribute(\"position\"),\r\n        weightAttribute: Engine.particleStructType.asVertexAttribute(\"weight\"),\r\n        foamAttribute: Engine.particleStructType.asVertexAttribute(\"foam\"),\r\n        bufferArrayStride: Engine.particleStructType.size,\r\n    };\r\n\r\n    private readonly device: GPUDevice;\r\n\r\n    private particlesBuffer: WebGPU.Buffer;\r\n    private particlesCount: number;\r\n\r\n    private spheresRadius: number;\r\n    private cellSize: number;\r\n    private gridSize: glMatrix.ReadonlyVec3;\r\n\r\n    private readonly initialization: Initialization;\r\n    private needsInitialization: boolean;\r\n\r\n    private readonly acceleration: Acceleration;\r\n    private readonly integration: Integration;\r\n    private readonly obstaclesRotation: ParticlesRotation;\r\n\r\n    private readonly indexing: Indexing;\r\n    private needsIndexing: boolean;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.particlesBuffer = resetResult.particlesBuffer;\r\n        this.particlesCount = resetResult.particlesCount;\r\n        this.spheresRadius = data.spheresRadius;\r\n        this.cellSize = resetResult.cellSize;\r\n        this.gridSize = resetResult.gridSize;\r\n\r\n        const particlesBufferData: ParticlesBufferData = {\r\n            particlesBuffer: this.particlesBuffer,\r\n            particlesCount: this.particlesCount,\r\n            particlesStructType: Engine.particleStructType,\r\n        };\r\n\r\n        this.initialization = new Initialization(this.device, {\r\n            particlesPositions: resetResult.particlesPositions,\r\n            obstaclesPositions: resetResult.obstaclesPositions,\r\n            particlesBufferData,\r\n        });\r\n\r\n        this.indexing = new Indexing(this.device, {\r\n            gridSize: this.gridSize,\r\n            cellSize: this.cellSize,\r\n            particlesBufferData,\r\n        });\r\n\r\n        this.acceleration = new Acceleration(this.device, {\r\n            gridSize: this.gridSize,\r\n            cellSize: this.cellSize,\r\n            cellsBufferData: this.indexing.cellsBufferData,\r\n            particlesBufferData,\r\n            particleRadius: this.spheresRadius,\r\n            weightThreshold: Engine.getMaxWeight(false),\r\n        });\r\n        this.integration = new Integration(this.device, {\r\n            particlesBufferData,\r\n            particleRadius: this.spheresRadius,\r\n            weightThreshold: Engine.getMaxWeight(false),\r\n        });\r\n        this.obstaclesRotation = new ParticlesRotation(this.device, {\r\n            particlesBufferData,\r\n            weightThreshold: Initialization.PARTICLE_WEIGHT_THRESHOLD,\r\n        });\r\n\r\n        this.needsInitialization = true;\r\n        this.needsIndexing = true;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder, dt: number, gravity: glMatrix.ReadonlyVec3, obstaclesRotationMatrix?: glMatrix.ReadonlyMat4): void {\r\n        if (this.needsInitialization) {\r\n            this.initialization.compute(commandEncoder);\r\n            this.needsInitialization = false;\r\n            this.needsIndexing = true;\r\n        }\r\n\r\n        this.indexIfNeeded(commandEncoder);\r\n\r\n        if (dt > 0) {\r\n            this.acceleration.compute(commandEncoder, dt, gravity);\r\n            this.integration.compute(commandEncoder, dt);\r\n\r\n            if (obstaclesRotationMatrix) {\r\n                this.obstaclesRotation.compute(commandEncoder, obstaclesRotationMatrix);\r\n            }\r\n\r\n            this.needsIndexing = true;\r\n\r\n            this.indexIfNeeded(commandEncoder);\r\n        }\r\n    }\r\n\r\n    public reinitialize(): void {\r\n        this.needsInitialization = true;\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        this.particlesBuffer.free();\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.particlesBuffer = resetResult.particlesBuffer;\r\n        this.particlesCount = resetResult.particlesCount;\r\n        this.spheresRadius = data.spheresRadius;\r\n        this.cellSize = resetResult.cellSize;\r\n        this.gridSize = resetResult.gridSize;\r\n\r\n        const particlesBufferData: ParticlesBufferData = {\r\n            particlesBuffer: this.particlesBuffer,\r\n            particlesCount: this.particlesCount,\r\n            particlesStructType: Engine.particleStructType,\r\n        };\r\n\r\n        this.initialization.reset({\r\n            particlesPositions: resetResult.particlesPositions,\r\n            obstaclesPositions: resetResult.obstaclesPositions,\r\n            particlesBufferData,\r\n        });\r\n\r\n        this.indexing.reset({\r\n            gridSize: this.gridSize,\r\n            cellSize: this.cellSize,\r\n            particlesBufferData,\r\n        });\r\n\r\n        this.acceleration.reset({\r\n            gridSize: this.gridSize,\r\n            cellSize: this.cellSize,\r\n            cellsBufferData: this.indexing.cellsBufferData,\r\n            particlesBufferData,\r\n            particleRadius: this.spheresRadius,\r\n            weightThreshold: Engine.getMaxWeight(false),\r\n        });\r\n        this.integration.reset({\r\n            particlesBufferData,\r\n            particleRadius: this.spheresRadius,\r\n            weightThreshold: Engine.getMaxWeight(false),\r\n        });\r\n        this.obstaclesRotation.reset({\r\n            particlesBufferData,\r\n            weightThreshold: Initialization.PARTICLE_WEIGHT_THRESHOLD,\r\n        });\r\n\r\n        this.needsInitialization = true;\r\n        this.needsIndexing = true;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        const particlesFillableMesh = new FillableMesh(data.particlesContainerMesh.triangles);\r\n        const particlesPositionsComputer = new InitialPositions(data.spheresRadius, particlesFillableMesh, true);\r\n        const particlesPositions = particlesPositionsComputer.computePositions();\r\n\r\n        let obstaclesPositions: glMatrix.vec3[] = [];\r\n        if (data.obstaclesMesh) {\r\n            const obstaclesFillableMesh = new FillableMesh(data.obstaclesMesh.triangles);\r\n            const obstaclesPositionsComputer = new InitialPositions(data.spheresRadius, obstaclesFillableMesh, false);\r\n            obstaclesPositions = obstaclesPositionsComputer.computePositions();\r\n        }\r\n\r\n        const particlesCount = particlesPositions.length + obstaclesPositions.length;\r\n        const particlesBuffer = new WebGPU.Buffer(this.device, {\r\n            size: Engine.particleStructType.size * particlesCount,\r\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\r\n        });\r\n\r\n        const cellSize = Math.max(0.01, 2.05 * data.spheresRadius);\r\n        const gridSize: glMatrix.vec3 = [Math.ceil(1 / cellSize), Math.ceil(1 / cellSize), Math.ceil(1 / cellSize)];\r\n\r\n        return { particlesBuffer, particlesCount, particlesPositions, obstaclesPositions, cellSize, gridSize };\r\n    }\r\n\r\n    public static getMaxWeight(includeObstacles: boolean): number {\r\n        if (includeObstacles) {\r\n            return Initialization.PARTICLE_WEIGHT_OBSTACLE + 1000;\r\n        }\r\n        return Initialization.PARTICLE_WEIGHT_THRESHOLD;\r\n    }\r\n\r\n    public static get cellBufferDescriptor(): CellsBufferDescriptor {\r\n        return Indexing.cellsBufferDescriptor;\r\n    }\r\n    public get cellsBufferData(): CellsBufferData {\r\n        return this.indexing.cellsBufferData;\r\n    }\r\n    public get nonEmptyCellsBuffers(): NonEmptyCellsBuffers {\r\n        return this.indexing.nonEmptyCellsBuffers;\r\n    }\r\n    public get gridData(): GridData {\r\n        return this.indexing.gridData;\r\n    }\r\n\r\n    public get spheresBuffer(): SpheresBuffer {\r\n        return {\r\n            gpuBuffer: this.particlesBuffer.gpuBuffer,\r\n            instancesCount: this.particlesCount,\r\n            sphereRadius: this.spheresRadius,\r\n        };\r\n    }\r\n\r\n    private indexIfNeeded(commandEncoder: GPUCommandEncoder): void {\r\n        if (this.needsIndexing) {\r\n            this.indexing.compute(commandEncoder);\r\n            this.needsIndexing = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport type {\r\n    ParticlesBufferData,\r\n    CellsBufferData,\r\n    CellsBufferDescriptor,\r\n    GridData,\r\n    NonEmptyCellsBuffers,\r\n    SpheresBuffer,\r\n    SpheresBufferDescriptor,\r\n};\r\nexport {\r\n    Engine,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type ParticlesBufferData } from \"../engine\";\r\nimport { CellsBufferData } from \"./indexing\";\r\n\r\ntype Data = {\r\n    cellsBufferData: CellsBufferData;\r\n    gridSize: glMatrix.ReadonlyVec3,\r\n    cellSize: number,\r\n\r\n    particlesBufferData: ParticlesBufferData,\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass CountParticlesPerCell {\r\n    private static readonly WORKGROUP_SIZE: number = 128;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        const cellStructType = new WebGPU.Types.StructType(\"Cell\", [\r\n            { name: \"particlesCount\", type: WebGPU.Types.atomicU32 },\r\n            { name: \"offset\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"gridSize\", type: WebGPU.Types.vec3I32 },\r\n            { name: \"cellSize\", type: WebGPU.Types.f32 },\r\n            { name: \"cellsStride\", type: WebGPU.Types.vec3U32 },\r\n            { name: \"particlesCount\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Indexing.CountParticlesPerCell,\r\n                    structs: [this.uniforms, cellStructType, data.particlesBufferData.particlesStructType],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: CountParticlesPerCell.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"gridSize\", data.gridSize);\r\n        this.uniforms.setValueFromName(\"cellSize\", data.cellSize);\r\n        this.uniforms.setValueFromName(\"cellsStride\", [1, data.gridSize[0], data.gridSize[0] * data.gridSize[1]]);\r\n        this.uniforms.setValueFromName(\"particlesCount\", data.particlesBufferData.particlesCount);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const workgroupsCount = Math.ceil(data.particlesBufferData.particlesCount / CountParticlesPerCell.WORKGROUP_SIZE);\r\n\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.cellsBufferData.cellsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: data.particlesBufferData.particlesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    CountParticlesPerCell,\r\n};\r\n\r\n","import * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type CellsBufferData } from \"./indexing\";\r\n\r\ntype Data = {\r\n    dataItemsBuffer: WebGPU.Buffer,\r\n\r\n    cellsBufferData: CellsBufferData,\r\n\r\n    cellsIndirectDrawBuffer: WebGPU.Buffer,\r\n    nonEmptyCellsIndicesBuffer: WebGPU.Buffer,\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass FinalizePrefixSum {\r\n    private static readonly WORKGROUP_SIZE: number = 128;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"cellsCount\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Indexing.FinalizePrefixSum,\r\n                    structs: [data.cellsBufferData.cellStructType, WebGPU.Types.indirectDrawBufferType, this.uniforms],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: FinalizePrefixSum.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"cellsCount\", data.cellsBufferData.cellsCount);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const workgroupsCount = Math.ceil(data.cellsBufferData.cellsCount / FinalizePrefixSum.WORKGROUP_SIZE);\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.dataItemsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: data.cellsBufferData.cellsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: data.cellsIndirectDrawBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    resource: data.nonEmptyCellsIndicesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 4,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    FinalizePrefixSum,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type ParticlesBufferData } from \"../engine\";\r\nimport { CountParticlesPerCell } from \"./count-particles-per-cell\";\r\nimport { FinalizePrefixSum } from \"./finalize-prefix-sum\";\r\nimport { PrefixSum } from \"./prefix-sum\";\r\nimport { PreparePrefixSum } from \"./prepare-prefix-sum\";\r\nimport { ReorderParticles } from \"./reorder-particles\";\r\nimport { ResetCells } from \"./reset-cells\";\r\n\r\ntype Data = {\r\n    readonly gridSize: glMatrix.ReadonlyVec3;\r\n    readonly cellSize: number;\r\n\r\n    readonly particlesBufferData: ParticlesBufferData\r\n};\r\n\r\ntype CellsBufferDescriptor = {\r\n    readonly particlesCountAttribute: WebGPU.Types.VertexAttribute;\r\n    readonly bufferArrayStride: number;\r\n};\r\n\r\ntype CellsBufferData = {\r\n    readonly cellsBuffer: WebGPU.Buffer;\r\n    readonly cellStructType: WebGPU.Types.StructType;\r\n    readonly cellsCount: number;\r\n};\r\n\r\ntype NonEmptyCellsBuffers = {\r\n    readonly nonEmptyCellsIndicesBuffer: GPUBuffer;\r\n    readonly cellsIndirectDrawBuffer: GPUBuffer;\r\n}\r\n\r\ntype GridData = {\r\n    readonly gridSize: glMatrix.ReadonlyVec3;\r\n    readonly cellSize: number;\r\n}\r\n\r\ntype ResetResult = {\r\n    cellsCount: number;\r\n    cellsBuffer: WebGPU.Buffer;\r\n    nonEmptyCellsIndicesBuffer: WebGPU.Buffer;\r\n    gridData: GridData;\r\n};\r\n\r\nclass Indexing {\r\n    private static readonly cellStructType = new WebGPU.Types.StructType(\"Cell\", [\r\n        { name: \"particlesCount\", type: WebGPU.Types.u32 },\r\n        { name: \"offset\", type: WebGPU.Types.u32 },\r\n    ]);\r\n    public static readonly cellsBufferDescriptor: CellsBufferDescriptor = {\r\n        particlesCountAttribute: Indexing.cellStructType.asVertexAttribute(\"particlesCount\"),\r\n        bufferArrayStride: Indexing.cellStructType.size,\r\n    };\r\n\r\n    private cellsBuffer: WebGPU.Buffer;\r\n    private nonEmptyCellsIndicesBuffer: WebGPU.Buffer;\r\n    public gridData: GridData;\r\n    private cellsCount: number;\r\n\r\n    private readonly device: GPUDevice;\r\n\r\n    private readonly cellsIndirectDrawBuffer: WebGPU.Buffer;\r\n\r\n    private readonly resetCells: ResetCells;\r\n    private readonly countParticlesPerCell: CountParticlesPerCell;\r\n    private readonly preparePrefixSum: PreparePrefixSum;\r\n    private readonly prefixSum: PrefixSum;\r\n    private readonly finalizePrefixSum: FinalizePrefixSum;\r\n    private readonly reorderParticles: ReorderParticles;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.cellsIndirectDrawBuffer = new WebGPU.Buffer(device, {\r\n            size: WebGPU.Types.indirectDrawBufferType.size,\r\n            usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.STORAGE,\r\n        });\r\n        WebGPU.Types.indirectDrawBufferType.setValue(this.cellsIndirectDrawBuffer.getMappedRange(), 0, {\r\n            vertexCount: 24,\r\n            instancesCount: 0, // will be dynamically computed on GPU\r\n            firstVertex: 0,    // will be dynamically computed on GPU\r\n            firstInstance: 0,  // will be dynamically computed on GPU\r\n        });\r\n        this.cellsIndirectDrawBuffer.unmap();\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.cellsCount = resetResult.cellsCount;\r\n        this.cellsBuffer = resetResult.cellsBuffer;\r\n        this.nonEmptyCellsIndicesBuffer = resetResult.nonEmptyCellsIndicesBuffer;\r\n        this.gridData = resetResult.gridData;\r\n\r\n        this.resetCells = new ResetCells(device, {\r\n            cellsBufferData: this.cellsBufferData,\r\n        });\r\n\r\n        this.countParticlesPerCell = new CountParticlesPerCell(device, {\r\n            cellsBufferData: this.cellsBufferData,\r\n            gridSize: data.gridSize,\r\n            cellSize: data.cellSize,\r\n            particlesBufferData: data.particlesBufferData,\r\n        });\r\n\r\n        this.preparePrefixSum = new PreparePrefixSum(device, {\r\n            cellsBufferData: this.cellsBufferData,\r\n        });\r\n\r\n        this.prefixSum = new PrefixSum(device, {\r\n            itemsBuffer: this.preparePrefixSum.dataItemsBuffer,\r\n            itemsCount: this.cellsCount,\r\n            type: WebGPU.Types.vec2U32,\r\n        });\r\n\r\n        this.finalizePrefixSum = new FinalizePrefixSum(device, {\r\n            dataItemsBuffer: this.preparePrefixSum.dataItemsBuffer,\r\n            cellsBufferData: this.cellsBufferData,\r\n            cellsIndirectDrawBuffer: this.cellsIndirectDrawBuffer,\r\n            nonEmptyCellsIndicesBuffer: this.nonEmptyCellsIndicesBuffer,\r\n        });\r\n\r\n        this.reorderParticles = new ReorderParticles(device, {\r\n            particlesBufferData: data.particlesBufferData,\r\n            cellsBufferData: this.cellsBufferData,\r\n            gridSize: data.gridSize,\r\n            cellSize: data.cellSize,\r\n        });\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        this.resetCells.compute(commandEncoder);\r\n        this.countParticlesPerCell.compute(commandEncoder);\r\n\r\n        this.preparePrefixSum.compute(commandEncoder);\r\n        this.prefixSum.compute(commandEncoder);\r\n        this.finalizePrefixSum.compute(commandEncoder);\r\n\r\n        this.reorderParticles.compute(commandEncoder);\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        this.cellsBuffer.free();\r\n        this.nonEmptyCellsIndicesBuffer.free();\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.cellsCount = resetResult.cellsCount;\r\n        this.cellsBuffer = resetResult.cellsBuffer;\r\n        this.nonEmptyCellsIndicesBuffer = resetResult.nonEmptyCellsIndicesBuffer;\r\n        this.gridData = resetResult.gridData;\r\n\r\n        this.resetCells.reset({\r\n            cellsBufferData: this.cellsBufferData,\r\n        });\r\n\r\n        this.countParticlesPerCell.reset({\r\n            cellsBufferData: this.cellsBufferData,\r\n            gridSize: data.gridSize,\r\n            cellSize: data.cellSize,\r\n            particlesBufferData: data.particlesBufferData,\r\n        });\r\n\r\n        this.preparePrefixSum.reset({\r\n            cellsBufferData: this.cellsBufferData,\r\n        });\r\n\r\n        this.prefixSum.reset({\r\n            itemsBuffer: this.preparePrefixSum.dataItemsBuffer,\r\n            itemsCount: this.cellsCount,\r\n            type: WebGPU.Types.vec2U32,\r\n        });\r\n\r\n        this.finalizePrefixSum.reset({\r\n            dataItemsBuffer: this.preparePrefixSum.dataItemsBuffer,\r\n            cellsBufferData: this.cellsBufferData,\r\n            cellsIndirectDrawBuffer: this.cellsIndirectDrawBuffer,\r\n            nonEmptyCellsIndicesBuffer: this.nonEmptyCellsIndicesBuffer,\r\n        });\r\n\r\n        this.reorderParticles.reset({\r\n            particlesBufferData: data.particlesBufferData,\r\n            cellsBufferData: this.cellsBufferData,\r\n            gridSize: data.gridSize,\r\n            cellSize: data.cellSize,\r\n        });\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        const cellsCount = data.gridSize[0] * data.gridSize[1] * data.gridSize[2];\r\n\r\n        const cellsBuffer = new WebGPU.Buffer(this.device, {\r\n            size: Indexing.cellStructType.size * cellsCount,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX,\r\n        });\r\n\r\n        const nonEmptyCellsIndicesBuffer = new WebGPU.Buffer(this.device, {\r\n            size: Uint32Array.BYTES_PER_ELEMENT * cellsCount,\r\n            usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\r\n        });\r\n\r\n        const gridData = {\r\n            gridSize: data.gridSize,\r\n            cellSize: data.cellSize,\r\n        };\r\n\r\n        return { cellsCount, cellsBuffer, nonEmptyCellsIndicesBuffer, gridData };\r\n    }\r\n\r\n    public get nonEmptyCellsBuffers(): NonEmptyCellsBuffers {\r\n        return {\r\n            nonEmptyCellsIndicesBuffer: this.nonEmptyCellsIndicesBuffer.gpuBuffer,\r\n            cellsIndirectDrawBuffer: this.cellsIndirectDrawBuffer.gpuBuffer,\r\n        };\r\n    }\r\n\r\n    public get cellsBufferData(): CellsBufferData {\r\n        return {\r\n            cellsBuffer: this.cellsBuffer,\r\n            cellStructType: Indexing.cellStructType,\r\n            cellsCount: this.cellsCount,\r\n        };\r\n    }\r\n}\r\n\r\nexport type {\r\n    CellsBufferData,\r\n    CellsBufferDescriptor,\r\n    GridData,\r\n    NonEmptyCellsBuffers,\r\n};\r\nexport {\r\n    Indexing,\r\n};\r\n\r\n","import * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\n\r\ntype Data = {\r\n    itemsBuffer: WebGPU.Buffer;\r\n    type: WebGPU.Types.Type;\r\n    itemsCount: number;\r\n};\r\n\r\ntype ResetResult = {\r\n    dispatchSize: number;\r\n    localTotalsBuffer: WebGPU.Buffer;\r\n\r\n    reduceBindgroup: GPUBindGroup;\r\n    downPassBindgroup: GPUBindGroup | null;\r\n\r\n    childPrefixSum: PrefixSum | null;\r\n};\r\n\r\nclass PrefixSum {\r\n    private static readonly MAX_WORKGROUP_LEVEL = 8;\r\n    private static readonly WORKGROUP_SIZE = 1 << (PrefixSum.MAX_WORKGROUP_LEVEL - 1);\r\n\r\n    private static reducePipeline: GPUComputePipeline;\r\n    private static downPassPipeline: GPUComputePipeline | null = null;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n\r\n    private dispatchSize: number;\r\n    private localTotalsBuffer: WebGPU.Buffer;\r\n\r\n    private reduceBindgroup: GPUBindGroup;\r\n    private downPassBindgroup: GPUBindGroup | null = null;\r\n\r\n    private childPrefixSum: PrefixSum | null = null;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"itemsCount\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        if (!PrefixSum.reducePipeline) {\r\n            PrefixSum.reducePipeline = device.createComputePipeline({\r\n                layout: \"auto\",\r\n                compute: {\r\n                    module: WebGPU.ShaderModule.create(device, {\r\n                        code: ShaderSources.Engine.Indexing.PrefixSum.Reduce,\r\n                        aliases: {\r\n                            \"Type\": data.type.typeName,\r\n                        },\r\n                        structs: [this.uniforms],\r\n                    }),\r\n                    entryPoint: \"main\",\r\n                    constants: {\r\n                        workgroupSize: PrefixSum.WORKGROUP_SIZE,\r\n                        maxLevel: PrefixSum.MAX_WORKGROUP_LEVEL,\r\n                    },\r\n                }\r\n            });\r\n        }\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.dispatchSize = resetResult.dispatchSize;\r\n        this.localTotalsBuffer = resetResult.localTotalsBuffer;\r\n\r\n        this.reduceBindgroup = resetResult.reduceBindgroup;\r\n        this.downPassBindgroup = resetResult.downPassBindgroup;\r\n\r\n        this.childPrefixSum = resetResult.childPrefixSum;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        if (!PrefixSum.reducePipeline) {\r\n            throw new Error();\r\n        }\r\n\r\n        const reducePass = commandEncoder.beginComputePass();\r\n        reducePass.setPipeline(PrefixSum.reducePipeline);\r\n        this.localSort(reducePass);\r\n        reducePass.end();\r\n\r\n        if (this.childPrefixSum) {\r\n            if (!PrefixSum.downPassPipeline) {\r\n                throw new Error();\r\n            }\r\n\r\n            const downPass = commandEncoder.beginComputePass();\r\n            downPass.setPipeline(PrefixSum.downPassPipeline);\r\n            this.downPass(downPass);\r\n            downPass.end();\r\n        }\r\n    }\r\n\r\n    private localSort(pass: GPUComputePassEncoder): void {\r\n        pass.setBindGroup(0, this.reduceBindgroup);\r\n        pass.dispatchWorkgroups(this.dispatchSize);\r\n\r\n        if (this.childPrefixSum) {\r\n            this.childPrefixSum.localSort(pass);\r\n        }\r\n    }\r\n\r\n    private downPass(pass: GPUComputePassEncoder): void {\r\n        if (this.childPrefixSum) {\r\n            this.childPrefixSum.downPass(pass);\r\n\r\n            if (!this.downPassBindgroup) {\r\n                throw new Error();\r\n            }\r\n\r\n            pass.setBindGroup(0, this.downPassBindgroup);\r\n            pass.dispatchWorkgroups(this.dispatchSize);\r\n        }\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        this.localTotalsBuffer.free();\r\n\r\n        let child = this.childPrefixSum;\r\n        while (child) {\r\n            child.localTotalsBuffer.free();\r\n            child.uniforms.free();\r\n            child = child.childPrefixSum;\r\n        }\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.dispatchSize = resetResult.dispatchSize;\r\n        this.localTotalsBuffer = resetResult.localTotalsBuffer;\r\n\r\n        this.reduceBindgroup = resetResult.reduceBindgroup;\r\n        this.downPassBindgroup = resetResult.downPassBindgroup;\r\n\r\n        this.childPrefixSum = resetResult.childPrefixSum;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        if (data.itemsBuffer.size !== data.type.size * data.itemsCount) {\r\n            throw new Error(\"Prefix sum: invalid data\");\r\n        }\r\n\r\n        this.uniforms.setValueFromName(\"itemsCount\", data.itemsCount);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const dispatchSize = Math.ceil(data.itemsCount / PrefixSum.WORKGROUP_SIZE);\r\n\r\n        const localTotalsBuffer = new WebGPU.Buffer(this.device, {\r\n            size: data.type.size * dispatchSize,\r\n            usage: GPUBufferUsage.STORAGE,\r\n        });\r\n\r\n        const reduceBindgroup = this.device.createBindGroup({\r\n            layout: PrefixSum.reducePipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.itemsBuffer.bindingResource,\r\n                }, {\r\n                    binding: 1,\r\n                    resource: localTotalsBuffer.bindingResource,\r\n                }, {\r\n                    binding: 2,\r\n                    resource: this.uniforms.bindingResource,\r\n                }\r\n            ]\r\n        });\r\n\r\n        let childPrefixSum: PrefixSum | null = null;\r\n        let downPassBindgroup: GPUBindGroup | null = null;\r\n\r\n        if (dispatchSize > 1) { // I will need another prefix sum on the totals\r\n            if (!PrefixSum.downPassPipeline) {\r\n                PrefixSum.downPassPipeline = this.device.createComputePipeline({\r\n                    layout: \"auto\",\r\n                    compute: {\r\n                        module: WebGPU.ShaderModule.create(this.device, {\r\n                            code: ShaderSources.Engine.Indexing.PrefixSum.DownPass,\r\n                            aliases: {\r\n                                \"Type\": data.type.typeName,\r\n                            },\r\n                            structs: [this.uniforms],\r\n                        }),\r\n                        entryPoint: \"main\",\r\n                        constants: {\r\n                            workgroupSize: PrefixSum.WORKGROUP_SIZE,\r\n                        },\r\n                    }\r\n                });\r\n            }\r\n\r\n            downPassBindgroup = this.device.createBindGroup({\r\n                layout: PrefixSum.downPassPipeline.getBindGroupLayout(0),\r\n                entries: [\r\n                    {\r\n                        binding: 0,\r\n                        resource: localTotalsBuffer.bindingResource,\r\n                    }, {\r\n                        binding: 1,\r\n                        resource: data.itemsBuffer.bindingResource,\r\n                    }, {\r\n                        binding: 2,\r\n                        resource: this.uniforms.bindingResource,\r\n                    }\r\n                ]\r\n            });\r\n\r\n            childPrefixSum = new PrefixSum(this.device, {\r\n                itemsBuffer: localTotalsBuffer,\r\n                itemsCount: dispatchSize,\r\n                type: data.type,\r\n            });\r\n        }\r\n\r\n        return { dispatchSize, localTotalsBuffer, reduceBindgroup, downPassBindgroup, childPrefixSum };\r\n    }\r\n}\r\n\r\nexport {\r\n    PrefixSum,\r\n};\r\n\r\n","import * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type CellsBufferData } from \"./indexing\";\r\n\r\ntype Data = {\r\n    cellsBufferData: CellsBufferData;\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    dataItemsBuffer: WebGPU.Buffer;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass PreparePrefixSum {\r\n    private static readonly WORKGROUP_SIZE: number = 128;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    public dataItemsBuffer: WebGPU.Buffer;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"cellsCount\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Indexing.PreparePrefixSum,\r\n                    structs: [data.cellsBufferData.cellStructType, this.uniforms],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: PreparePrefixSum.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.dataItemsBuffer = resetResult.dataItemsBuffer;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        this.dataItemsBuffer.free();\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.dataItemsBuffer = resetResult.dataItemsBuffer;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"cellsCount\", data.cellsBufferData.cellsCount);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const workgroupsCount = Math.ceil(data.cellsBufferData.cellsCount / PreparePrefixSum.WORKGROUP_SIZE);\r\n\r\n        const dataItemsBuffer = new WebGPU.Buffer(this.device, {\r\n            size: (Uint32Array.BYTES_PER_ELEMENT * 2) * data.cellsBufferData.cellsCount,\r\n            usage: GPUBufferUsage.STORAGE,\r\n        });\r\n\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.cellsBufferData.cellsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: dataItemsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, dataItemsBuffer, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    PreparePrefixSum,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { ParticlesBufferData } from \"../engine\";\r\nimport { type CellsBufferData } from \"./indexing\";\r\n\r\ntype Data = {\r\n    particlesBufferData: ParticlesBufferData,\r\n    cellsBufferData: CellsBufferData,\r\n    gridSize: glMatrix.ReadonlyVec3,\r\n    cellSize: number,\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    tempParticlesBuffer: WebGPU.Buffer;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass ReorderParticles {\r\n    private static readonly WORKGROUP_SIZE: number = 256;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private sourceParticlesBuffer: WebGPU.Buffer;\r\n    private tempParticlesBuffer: WebGPU.Buffer;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"gridSize\", type: WebGPU.Types.vec3I32 },\r\n            { name: \"cellSize\", type: WebGPU.Types.f32 },\r\n            { name: \"cellsStride\", type: WebGPU.Types.vec3U32 },\r\n            { name: \"particlesCount\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Indexing.ReorderParticles,\r\n                    structs: [data.cellsBufferData.cellStructType, data.particlesBufferData.particlesStructType, this.uniforms],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: ReorderParticles.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.sourceParticlesBuffer = data.particlesBufferData.particlesBuffer;\r\n        this.tempParticlesBuffer = resetResult.tempParticlesBuffer;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n        commandEncoder.copyBufferToBuffer(this.tempParticlesBuffer.gpuBuffer, 0, this.sourceParticlesBuffer.gpuBuffer, 0, this.sourceParticlesBuffer.size);\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        this.tempParticlesBuffer.free();\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.sourceParticlesBuffer = data.particlesBufferData.particlesBuffer;\r\n        this.tempParticlesBuffer = resetResult.tempParticlesBuffer;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"gridSize\", data.gridSize);\r\n        this.uniforms.setValueFromName(\"cellSize\", data.cellSize);\r\n        this.uniforms.setValueFromName(\"cellsStride\", [1, data.gridSize[0], data.gridSize[0] * data.gridSize[1]]);\r\n        this.uniforms.setValueFromName(\"particlesCount\", data.particlesBufferData.particlesCount);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const workgroupsCount = Math.ceil(data.particlesBufferData.particlesCount / ReorderParticles.WORKGROUP_SIZE);\r\n\r\n        if (!data.particlesBufferData.particlesBuffer.hasUsage(GPUBufferUsage.COPY_DST)) {\r\n            throw new Error();\r\n        }\r\n\r\n        const tempParticlesBuffer = new WebGPU.Buffer(this.device, {\r\n            size: data.particlesBufferData.particlesBuffer.size,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\r\n        });\r\n        if (!tempParticlesBuffer.hasUsage(GPUBufferUsage.COPY_SRC)) {\r\n            throw new Error();\r\n        }\r\n\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.particlesBufferData.particlesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: data.cellsBufferData.cellsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: tempParticlesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, tempParticlesBuffer, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    ReorderParticles,\r\n};\r\n\r\n","import * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type CellsBufferData } from \"./indexing\";\r\n\r\ntype Data = {\r\n    cellsBufferData: CellsBufferData;\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass ResetCells {\r\n    private static readonly WORKGROUP_SIZE: number = 128;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"cellsCount\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Indexing.ResetCells,\r\n                    structs: [data.cellsBufferData.cellStructType, this.uniforms],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: ResetCells.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"cellsCount\", data.cellsBufferData.cellsCount);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const workgroupsCount = Math.ceil(data.cellsBufferData.cellsCount / ResetCells.WORKGROUP_SIZE);\r\n\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.cellsBufferData.cellsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: this.uniforms.bindingResource,\r\n                }\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    ResetCells,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { Triangle } from \"./models/triangle\";\r\nimport { ERayDirection, RayCaster, Segment } from \"./ray-caster\";\r\n\r\ntype RegisteredSegments = {\r\n    readonly direction: ERayDirection;\r\n    readonly coords: glMatrix.ReadonlyVec2;\r\n    readonly segments: ReadonlyArray<Segment>;\r\n};\r\n\r\nclass FillableMesh {\r\n    private readonly rayCasterX: RayCaster;\r\n    private readonly rayCasterY: RayCaster;\r\n    private readonly rayCasterZ: RayCaster;\r\n\r\n    private readonly boundingBoxMin: glMatrix.ReadonlyVec3;\r\n    private readonly boundingBoxMax: glMatrix.ReadonlyVec3;\r\n\r\n    private registeredSegments: RegisteredSegments[] = [];\r\n\r\n    public constructor(triangles: ReadonlyArray<Triangle>) {\r\n        this.rayCasterX = new RayCaster(ERayDirection.X, triangles);\r\n        this.rayCasterY = new RayCaster(ERayDirection.Y, triangles);\r\n        this.rayCasterZ = new RayCaster(ERayDirection.Z, triangles);\r\n\r\n        const boundingBoxMin: glMatrix.vec3 = [+100, +100, +100];\r\n        const boundingBoxMax: glMatrix.vec3 = [-100, -100, -100];\r\n\r\n        for (const triangle of triangles) {\r\n            for (let i = 0; i < 3; i++) {\r\n                boundingBoxMin[i]! = Math.min(boundingBoxMin[i]!, triangle.p1[i]!, triangle.p2[i]!, triangle.p3[i]!);\r\n                boundingBoxMax[i]! = Math.max(boundingBoxMax[i]!, triangle.p1[i]!, triangle.p2[i]!, triangle.p3[i]!);\r\n            }\r\n        }\r\n        this.boundingBoxMin = boundingBoxMin;\r\n        this.boundingBoxMax = boundingBoxMax;\r\n    }\r\n\r\n    public isInside(point: glMatrix.ReadonlyVec3): boolean {\r\n        for (let i = 0; i < 3; i++) {\r\n            if (point[i]! < this.boundingBoxMin[i]! || point[i]! > this.boundingBoxMax[i]!) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return this.isInsideAccordingToProjection(ERayDirection.X, [point[1], point[2]], point[0]) &&\r\n            this.isInsideAccordingToProjection(ERayDirection.Y, [point[0], point[2]], point[1]) &&\r\n            this.isInsideAccordingToProjection(ERayDirection.Z, [point[0], point[1]], point[2]);\r\n    }\r\n\r\n    public getSegments(rayDirection: ERayDirection, rayCoords: glMatrix.ReadonlyVec2): ReadonlyArray<Segment> {\r\n        let segments: ReadonlyArray<Segment>;\r\n\r\n        const registeredSegment = this.registeredSegments.find(segment => {\r\n            return segment.direction === rayDirection &&\r\n                segment.coords[0] === rayCoords[0] &&\r\n                segment.coords[1] === rayCoords[1];\r\n        });\r\n        if (registeredSegment) {\r\n            segments = registeredSegment.segments;\r\n        } else {\r\n            if (rayDirection === ERayDirection.X) {\r\n                segments = this.rayCasterX.computeInternalSegments(rayCoords);\r\n            } else if (rayDirection === ERayDirection.Y) {\r\n                segments = this.rayCasterY.computeInternalSegments(rayCoords);\r\n            } else {\r\n                segments = this.rayCasterZ.computeInternalSegments(rayCoords);\r\n            }\r\n            this.registeredSegments.push({\r\n                direction: rayDirection,\r\n                coords: rayCoords,\r\n                segments,\r\n            });\r\n        }\r\n\r\n        return segments;\r\n    }\r\n\r\n    private isInsideAccordingToProjection(rayDirection: ERayDirection, rayCoords: glMatrix.ReadonlyVec2, depth: number): boolean {\r\n        const segments = this.getSegments(rayDirection, rayCoords);\r\n\r\n        for (const segment of segments) {\r\n            if (segment.from <= depth && depth <= segment.to) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport {\r\n    FillableMesh,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { ERayDirection, Segment } from \"./ray-caster\";\r\n\r\ntype FillableMesh = {\r\n    isInside(point: glMatrix.ReadonlyVec3): boolean;\r\n    getSegments(rayDirection: ERayDirection, rayCoords: glMatrix.ReadonlyVec2): ReadonlyArray<Segment>;\r\n};\r\n\r\nfunction shiftToStart(x: number, stride: number): number {\r\n    while (x >= stride) {\r\n        x -= stride;\r\n    }\r\n    return x;\r\n}\r\n\r\nclass InitialPositions {\r\n    private readonly strideX: number;\r\n    private readonly strideY: number;\r\n    private readonly strideZ: number;\r\n\r\n    public constructor(\r\n        private readonly spheresRadius: number,\r\n        private readonly mesh: FillableMesh,\r\n        private readonly restrictToDomain: boolean) {\r\n        this.strideX = 2 * spheresRadius;\r\n        this.strideY = spheresRadius * Math.sqrt(3);\r\n        this.strideZ = 2 * spheresRadius * Math.sqrt(6) / 3;\r\n    }\r\n\r\n    public computePositions(): glMatrix.vec3[] {\r\n        const positions: glMatrix.vec3[] = [];\r\n\r\n        const startZ = -this.strideZ;\r\n        for (let z = startZ, nZ = 0; z < 1 + this.strideZ; z += this.strideZ, nZ++) {\r\n            const xShiftFromZ = (nZ % 2 === 0) ? 0 : this.spheresRadius;\r\n            let startY = 0;\r\n            if (nZ % 4 === 1 || nZ % 4 === 3) {\r\n                startY = Math.sqrt(3) * this.spheresRadius / 3;\r\n            } else if (nZ % 4 === 2) {\r\n                startY = 2 * Math.sqrt(3) * this.spheresRadius / 3;\r\n            }\r\n            startY = shiftToStart(startY, this.strideY) - this.strideY;\r\n            for (let y = startY, nY = 0; y < 1 + this.strideY; y += this.strideY, nY++) {\r\n                const xShiftFromY = ((nY + 1) % 2) * this.spheresRadius;\r\n                const startX = shiftToStart(xShiftFromZ + xShiftFromY, this.strideX) - this.strideX;\r\n\r\n                const segments = this.mesh.getSegments(ERayDirection.X, [y, z]);\r\n                this.addRow(startX, y, z, positions, segments);\r\n            }\r\n        }\r\n\r\n        return positions;\r\n    }\r\n\r\n    private addRow(startX: number, y: number, z: number, positions: glMatrix.vec3[], segments: ReadonlyArray<Segment>): void {\r\n        for (let x = startX; x <= 1 + this.strideX; x += this.strideX) {\r\n            const isInDomain = !this.restrictToDomain || ((x >= this.spheresRadius) && (y >= this.spheresRadius) && (z >= this.spheresRadius) && (1 - x >= this.spheresRadius) && (1 - y >= this.spheresRadius) && (1 - z >= this.spheresRadius));\r\n            if (isInDomain) {\r\n                for (const segment of segments) {\r\n                    if (segment.from <= x && x <= segment.to) {\r\n                        positions.push([x, y, z]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    InitialPositions,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { Triangle } from \"./triangle\";\r\n\r\nclass Mesh {\r\n    public static load(input: string): Mesh {\r\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\r\n        const vertices: glMatrix.vec3[] = [];\r\n        const triangles: Triangle[] = [];\r\n\r\n        const lines = input.split(\"\\n\");\r\n        lines.forEach((line: string, i: number) => {\r\n            const lineItems = line.trim().split(/\\s+/);\r\n            const command = lineItems[0];\r\n\r\n            if (command === \"v\") { // declare vertex\r\n                if (lineItems.length !== 4) {\r\n                    throw new Error(`Obj loading: line ${i} because it is a vertice declaration that has the wrong count of coordinates: '${line}'.`);\r\n                }\r\n                vertices.push([\r\n                    parseFloat(lineItems[1]!),\r\n                    parseFloat(lineItems[2]!),\r\n                    parseFloat(lineItems[3]!),\r\n                ]);\r\n            } else if (command === \"f\") { // declare face\r\n                if (lineItems.length < 4) {\r\n                    throw new Error(`Obj loading: line ${i} because it is a face declaration that doesn't mention enough vertices: '${line}'.`);\r\n                }\r\n\r\n                // faces with more that 3 vertices are interpreted as TRIANGLE_FAN\r\n                for (let iV = 3; iV < lineItems.length; iV++) {\r\n                    const indices: [number, number, number] = [\r\n                        +(lineItems[1]!.split(\"/\")[0]!),\r\n                        +(lineItems[iV - 1]!.split(\"/\")[0]!),\r\n                        +(lineItems[iV]!.split(\"/\")[0]!),\r\n                    ];\r\n\r\n                    for (const indice of indices) {\r\n                        if (indice < 1 || indice > vertices.length) {\r\n                            throw new Error(`Obj loading: line ${i} because vertex index ${indice} is out of range: '${line}'.`);\r\n                        }\r\n                    }\r\n\r\n                    triangles.push(new Triangle(\r\n                        vertices[indices[0] - 1]!,\r\n                        vertices[indices[1] - 1]!,\r\n                        vertices[indices[2] - 1]!\r\n                    ));\r\n                }\r\n            } else {\r\n                if (line !== \"\") {\r\n                    console.debug(`Ignoring line ${i} because it is not a vertice or face declaration: '${line}'.`);\r\n                }\r\n            }\r\n        });\r\n\r\n        return new Mesh(triangles);\r\n    }\r\n\r\n    protected constructor(\r\n        public readonly triangles: ReadonlyArray<Triangle>) {\r\n    }\r\n}\r\n\r\nexport {\r\n    Mesh,\r\n};\r\n\r\n","/// <reference types=\"./obj-type\"/>\r\n\r\nimport Column from \"../../../../models/column.obj\";\r\nimport S from \"../../../../models/particles-s.obj\";\r\nimport X from \"../../../../models/particles-x.obj\";\r\nimport XX from \"../../../../models/particles-xx.obj\";\r\nimport XXX from \"../../../../models/particles-xxx.obj\";\r\nimport XXXX from \"../../../../models/particles-xxxx.obj\";\r\nimport XXXXX from \"../../../../models/particles-xxxxx.obj\";\r\n\r\nimport Capsules from \"../../../../models/capsules.obj\";\r\nimport Cup from \"../../../../models/cup.obj\";\r\nimport Funnel from \"../../../../models/funnel.obj\";\r\nimport Helix from \"../../../../models/helix.obj\";\r\nimport PiercedFloor from \"../../../../models/pierced-floor.obj\";\r\n\r\nconst particles = {\r\n    Column,\r\n    S,\r\n    X,\r\n    XX,\r\n    XXX,\r\n    XXXX,\r\n    XXXXX,\r\n};\r\n\r\nconst obstacles = {\r\n    Capsules,\r\n    Cup,\r\n    Funnel,\r\n    Helix,\r\n    PiercedFloor\r\n};\r\n\r\nexport {\r\n    particles as Particles,\r\n    obstacles as Obstacles,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\n\r\nfunction minus(a: glMatrix.ReadonlyVec3, b: glMatrix.ReadonlyVec3): glMatrix.vec3 {\r\n    return [\r\n        a[0] - b[0],\r\n        a[1] - b[1],\r\n        a[2] - b[2],\r\n    ];\r\n}\r\nfunction crossProduct(v1: glMatrix.ReadonlyVec3, v2: glMatrix.ReadonlyVec3): glMatrix.vec3 {\r\n    return [\r\n        v1[1] * v2[2] - v1[2] * v2[1],\r\n        v1[2] * v2[0] - v1[0] * v2[2],\r\n        v1[0] * v2[1] - v1[1] * v2[0],\r\n    ];\r\n}\r\nfunction normalize(v: glMatrix.vec3): void {\r\n    const lengthSquared = glMatrix.vec3.sqrLen(v);\r\n    if (lengthSquared > 0) {\r\n        const length = Math.sqrt(lengthSquared);\r\n        v[0] /= length;\r\n        v[1] /= length;\r\n        v[2] /= length;\r\n    } else {\r\n        v[0] = 1;\r\n        v[1] = 0;\r\n        v[2] = 0;\r\n    }\r\n}\r\n\r\nclass Triangle {\r\n    public readonly normal: glMatrix.ReadonlyVec3;\r\n\r\n    public constructor(\r\n        public readonly p1: glMatrix.ReadonlyVec3,\r\n        public readonly p2: glMatrix.ReadonlyVec3,\r\n        public readonly p3: glMatrix.ReadonlyVec3) {\r\n        const v12 = minus(p2, p1);\r\n        const v13 = minus(p3, p1);\r\n        const normal = crossProduct(v12, v13);\r\n        normalize(normal);\r\n        this.normal = normal;\r\n    }\r\n}\r\n\r\nexport {\r\n    Triangle,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { Triangle } from \"./models/triangle\";\r\n\r\ntype Segment = {\r\n    readonly from: number;\r\n    readonly to: number;\r\n};\r\n\r\nenum ERayDirection {\r\n    X,\r\n    Y,\r\n    Z,\r\n}\r\n\r\ntype Triangle2D = {\r\n    readonly p1: glMatrix.ReadonlyVec2,\r\n    readonly c1: number;\r\n    readonly p2: glMatrix.ReadonlyVec2,\r\n    readonly c2: number;\r\n    readonly p3: glMatrix.ReadonlyVec2,\r\n    readonly c3: number;\r\n};\r\n\r\nfunction minus(a: glMatrix.ReadonlyVec2, b: glMatrix.ReadonlyVec2): glMatrix.vec2 {\r\n    return [\r\n        a[0] - b[0],\r\n        a[1] - b[1],\r\n    ];\r\n}\r\nfunction dot(a: glMatrix.ReadonlyVec2, b: glMatrix.ReadonlyVec2): number {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/** Computes the barycentric coordinates of a point relatively to the triangle.\r\n * Only takes into account the X and Y coordinates.\r\n */\r\nfunction computeBarycentricXY(triangle: Triangle2D, p: glMatrix.ReadonlyVec2): [number, number, number] {\r\n    const v0 = minus(triangle.p2, triangle.p1);\r\n    const v1 = minus(triangle.p3, triangle.p1);\r\n    const v2 = minus(p, triangle.p1);\r\n    const d00 = dot(v0, v0);\r\n    const d01 = dot(v0, v1);\r\n    const d11 = dot(v1, v1);\r\n    const d20 = dot(v2, v0);\r\n    const d21 = dot(v2, v1);\r\n    const denom = d00 * d11 - d01 * d01;\r\n    const v = (denom === 0) ? -2 : (d11 * d20 - d01 * d21) / denom;\r\n    const w = (denom === 0) ? -2 : (d00 * d21 - d01 * d20) / denom;\r\n    const u = 1 - v - w;\r\n    return [u, v, w];\r\n}\r\n\r\nclass RayCaster {\r\n    private readonly triangles2D: ReadonlyArray<Triangle2D>;\r\n\r\n    public constructor(direction: ERayDirection, triangles: ReadonlyArray<Triangle>) {\r\n        let coord1: 0 | 1 | 2;\r\n        let coord2: 0 | 1 | 2;\r\n        let selectedCoord: 0 | 1 | 2;\r\n        switch (direction) {\r\n            case ERayDirection.X:\r\n                selectedCoord = 0;\r\n                coord1 = 1;\r\n                coord2 = 2;\r\n                break;\r\n            case ERayDirection.Y:\r\n                coord1 = 0;\r\n                selectedCoord = 1;\r\n                coord2 = 2;\r\n                break;\r\n            case ERayDirection.Z:\r\n                coord1 = 0;\r\n                coord2 = 1;\r\n                selectedCoord = 2;\r\n                break;\r\n        }\r\n\r\n        this.triangles2D = triangles.map((triangle: Triangle) => {\r\n            return {\r\n                p1: [triangle.p1[coord1], triangle.p1[coord2]],\r\n                c1: triangle.p1[selectedCoord],\r\n                p2: [triangle.p2[coord1], triangle.p2[coord2]],\r\n                c2: triangle.p2[selectedCoord],\r\n                p3: [triangle.p3[coord1], triangle.p3[coord2]],\r\n                c3: triangle.p3[selectedCoord],\r\n            };\r\n        });\r\n    }\r\n\r\n    public computeInternalSegments(rayCoords: glMatrix.ReadonlyVec2): Segment[] {\r\n        const intersections: number[] = [];\r\n        // {\r\n        const rawIntersections: number[] = [];\r\n\r\n        for (const triangle of this.triangles2D) {\r\n            const barycentric = computeBarycentricXY(triangle, rayCoords);\r\n            const rayHitsTriangle = Math.max(...barycentric) < 1 && Math.min(...barycentric) > 0;\r\n\r\n            if (rayHitsTriangle) {\r\n                const z = barycentric[0] * triangle.c1 + barycentric[1] * triangle.c2 + barycentric[2] * triangle.c3;\r\n                rawIntersections.push(z);\r\n            }\r\n        }\r\n\r\n        if (rawIntersections.length > 0) {\r\n            rawIntersections.sort();\r\n            let last = -10000;\r\n            rawIntersections.forEach(value => {\r\n                if (Math.abs(value - last) > 0.0001) {\r\n                    intersections.push(value);\r\n                    last = value;\r\n                }\r\n            });\r\n        }\r\n        // }\r\n\r\n        // if (intersections.length % 2 !== 0) {\r\n        //     throw new Error(`Invalid intersections length '${intersections.length}'.`);\r\n        // }\r\n\r\n        const segments: Segment[] = [];\r\n        for (let i = 0; i + 1 < intersections.length; i += 2) {\r\n            segments.push({\r\n                from: intersections[i]!,\r\n                to: intersections[i + 1]!,\r\n            });\r\n        }\r\n        return segments;\r\n    }\r\n}\r\n\r\nexport type {\r\n    Segment,\r\n};\r\nexport {\r\n    ERayDirection,\r\n    RayCaster,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport { Parameters } from \"../../ui/parameters\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { ParticlesBufferData } from \"../engine\";\r\nimport { CellsBufferData } from \"../indexing/indexing\";\r\n\r\ntype Data = {\r\n    particlesBufferData: ParticlesBufferData;\r\n    particleRadius: number;\r\n    cellsBufferData: CellsBufferData;\r\n    gridSize: glMatrix.ReadonlyVec3,\r\n    cellSize: number,\r\n    weightThreshold: number,\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass Acceleration {\r\n    private static readonly WORKGROUP_SIZE: number = 128;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private bindgroup: GPUBindGroup;\r\n    private particleRadius: number;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"gridSize\", type: WebGPU.Types.vec3I32 },\r\n            { name: \"cellSize\", type: WebGPU.Types.f32 },\r\n            { name: \"cellsStride\", type: WebGPU.Types.vec3U32 },\r\n            { name: \"particleRadius\", type: WebGPU.Types.f32 },\r\n            { name: \"gravity\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"dt\", type: WebGPU.Types.f32 },\r\n            { name: \"upperBound\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"particlesCount\", type: WebGPU.Types.u32 },\r\n            { name: \"lowerBound\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"weightThreshold\", type: WebGPU.Types.f32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Simulation.Acceleration,\r\n                    structs: [data.particlesBufferData.particlesStructType, this.uniforms, data.cellsBufferData.cellStructType],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: Acceleration.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n        this.particleRadius = data.particleRadius;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder, dt: number, gravity: glMatrix.ReadonlyVec3): void {\r\n        this.uniforms.setValueFromName(\"gravity\", gravity);\r\n        this.uniforms.setValueFromName(\"dt\", dt);\r\n        this.uniforms.setValueFromName(\"lowerBound\", [this.particleRadius, this.particleRadius, this.particleRadius]);\r\n        this.uniforms.setValueFromName(\"upperBound\", [1 - this.particleRadius, 1 - this.particleRadius, Parameters.domainContraction - this.particleRadius]);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n        this.particleRadius = data.particleRadius;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"gridSize\", data.gridSize);\r\n        this.uniforms.setValueFromName(\"cellSize\", data.cellSize);\r\n        this.uniforms.setValueFromName(\"cellsStride\", [1, data.gridSize[0], data.gridSize[0] * data.gridSize[1]]);\r\n        this.uniforms.setValueFromName(\"particlesCount\", data.particlesBufferData.particlesCount);\r\n        this.uniforms.setValueFromName(\"particleRadius\", data.particleRadius);\r\n        this.uniforms.setValueFromName(\"weightThreshold\", data.weightThreshold);\r\n\r\n        const workgroupsCount = Math.ceil(data.particlesBufferData.particlesCount / Acceleration.WORKGROUP_SIZE);\r\n\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.particlesBufferData.particlesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: data.cellsBufferData.cellsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    Acceleration,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { ParticlesBufferData } from \"../engine\";\r\n\r\ntype Data = {\r\n    particlesPositions: ReadonlyArray<glMatrix.ReadonlyVec3>;\r\n    obstaclesPositions: ReadonlyArray<glMatrix.ReadonlyVec3>;\r\n    particlesBufferData: ParticlesBufferData;\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    positionsBuffer: WebGPU.Buffer;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass Initialization {\r\n    private static readonly WORKGROUP_SIZE: number = 256;\r\n    public static readonly PARTICLE_WEIGHT_WATER: number = 1;\r\n    public static readonly PARTICLE_WEIGHT_THRESHOLD: number = 10;\r\n    public static readonly PARTICLE_WEIGHT_OBSTACLE: number = 100000;\r\n\r\n    private static readonly initialParticleStructType: WebGPU.Types.StructType = new WebGPU.Types.StructType(\"InitialParticle\", [\r\n        { name: \"position\", type: WebGPU.Types.vec3F32 },\r\n        { name: \"weight\", type: WebGPU.Types.f32 },\r\n    ]);\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private positionsBuffer: WebGPU.Buffer;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"particlesCount\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Simulation.Initialization,\r\n                    structs: [data.particlesBufferData.particlesStructType, this.uniforms, Initialization.initialParticleStructType],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: Initialization.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.positionsBuffer = resetResult.positionsBuffer;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder): void {\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        this.positionsBuffer.free();\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.positionsBuffer = resetResult.positionsBuffer;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        if (data.particlesBufferData.particlesCount !== (data.particlesPositions.length + data.obstaclesPositions.length)) {\r\n            throw new Error();\r\n        }\r\n\r\n        const workgroupsCount = Math.ceil(data.particlesBufferData.particlesCount / Initialization.WORKGROUP_SIZE);\r\n\r\n        this.uniforms.setValueFromName(\"particlesCount\", data.particlesBufferData.particlesCount);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const positionsBuffer = new WebGPU.Buffer(this.device, {\r\n            size: Initialization.initialParticleStructType.size * (data.particlesPositions.length + data.obstaclesPositions.length),\r\n            usage: GPUBufferUsage.STORAGE,\r\n        });\r\n        const positionsData = positionsBuffer.getMappedRange();\r\n        data.particlesPositions.forEach((position: glMatrix.ReadonlyVec3, index: number) => {\r\n            const offset = index * Initialization.initialParticleStructType.size;\r\n            Initialization.initialParticleStructType.setValue(positionsData, offset, {\r\n                position,\r\n                weight: Initialization.PARTICLE_WEIGHT_WATER,\r\n            });\r\n        });\r\n        data.obstaclesPositions.forEach((position: glMatrix.ReadonlyVec3, index: number) => {\r\n            const offset = (data.particlesPositions.length + index) * Initialization.initialParticleStructType.size;\r\n            Initialization.initialParticleStructType.setValue(positionsData, offset, {\r\n                position,\r\n                weight: Initialization.PARTICLE_WEIGHT_OBSTACLE,\r\n            });\r\n        });\r\n        positionsBuffer.unmap();\r\n\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: positionsBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: data.particlesBufferData.particlesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, positionsBuffer, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    Initialization,\r\n};\r\n\r\n","import * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { ParticlesBufferData } from \"../engine\";\r\n\r\ntype Data = {\r\n    particlesBufferData: ParticlesBufferData;\r\n    particleRadius: number;\r\n    weightThreshold: number;\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass Integration {\r\n    private static readonly WORKGROUP_SIZE: number = 128;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"dt\", type: WebGPU.Types.f32 },\r\n            { name: \"particlesCount\", type: WebGPU.Types.u32 },\r\n            { name: \"particleRadius\", type: WebGPU.Types.f32 },\r\n            { name: \"weightThreshold\", type: WebGPU.Types.f32 },\r\n            { name: \"velocityDamping\", type: WebGPU.Types.f32 },\r\n            { name: \"foamDamping\", type: WebGPU.Types.f32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Simulation.Integration,\r\n                    structs: [data.particlesBufferData.particlesStructType, this.uniforms],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: Integration.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder, dt: number): void {\r\n        this.uniforms.setValueFromName(\"dt\", dt);\r\n        this.uniforms.setValueFromName(\"velocityDamping\", Math.pow(0.999, dt / 0.0005));\r\n        this.uniforms.setValueFromName(\"foamDamping\", Math.pow(0.997, dt / 0.0005));\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"particlesCount\", data.particlesBufferData.particlesCount);\r\n        this.uniforms.setValueFromName(\"particleRadius\", data.particleRadius);\r\n        this.uniforms.setValueFromName(\"weightThreshold\", data.weightThreshold);\r\n\r\n        const workgroupsCount = Math.ceil(data.particlesBufferData.particlesCount / Integration.WORKGROUP_SIZE);\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.particlesBufferData.particlesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    Integration,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { ParticlesBufferData } from \"../engine\";\r\n\r\ntype Data = {\r\n    particlesBufferData: ParticlesBufferData;\r\n    weightThreshold: number;\r\n};\r\n\r\ntype ResetResult = {\r\n    workgroupsCount: number;\r\n    bindgroup: GPUBindGroup;\r\n};\r\n\r\nclass ParticlesRotation {\r\n    private static readonly WORKGROUP_SIZE: number = 128;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly pipeline: GPUComputePipeline;\r\n\r\n    private workgroupsCount: number;\r\n    private bindgroup: GPUBindGroup;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(device, [\r\n            { name: \"rotationMatrix\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"particlesCount\", type: WebGPU.Types.u32 },\r\n            { name: \"weightThreshold\", type: WebGPU.Types.f32 },\r\n        ]);\r\n\r\n        this.pipeline = device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(device, {\r\n                    code: ShaderSources.Engine.Simulation.ObstaclesRotation,\r\n                    structs: [data.particlesBufferData.particlesStructType, this.uniforms],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: ParticlesRotation.WORKGROUP_SIZE,\r\n                },\r\n            },\r\n        });\r\n\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder, rotationMatrix: glMatrix.ReadonlyMat4): void {\r\n        this.uniforms.setValueFromName(\"rotationMatrix\", rotationMatrix);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroup);\r\n        computePass.dispatchWorkgroups(this.workgroupsCount);\r\n        computePass.end();\r\n    }\r\n\r\n    public reset(data: Data): void {\r\n        const resetResult = this.applyReset(data);\r\n        this.workgroupsCount = resetResult.workgroupsCount;\r\n        this.bindgroup = resetResult.bindgroup;\r\n    }\r\n\r\n    private applyReset(data: Data): ResetResult {\r\n        this.uniforms.setValueFromName(\"particlesCount\", data.particlesBufferData.particlesCount);\r\n        this.uniforms.setValueFromName(\"weightThreshold\", data.weightThreshold);\r\n\r\n        const workgroupsCount = Math.ceil(data.particlesBufferData.particlesCount / ParticlesRotation.WORKGROUP_SIZE);\r\n        const bindgroup = this.device.createBindGroup({\r\n            layout: this.pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: data.particlesBufferData.particlesBuffer.bindingResource,\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n\r\n        return { workgroupsCount, bindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    ParticlesRotation,\r\n};\r\n\r\n","import { Camera } from \"./rendering/camera\";\r\nimport { Scene } from \"./scene\";\r\nimport { Counter } from \"./ui/counter\";\r\nimport * as Indicators from \"./ui/indicators\";\r\nimport { Parameters } from \"./ui/parameters\";\r\nimport * as WebGPU from \"./webgpu-utils/webgpu-utils\";\r\n\r\nfunction main(device: GPUDevice, canvas: HTMLCanvasElement): void {\r\n    WebGPU.Uniforms.tryToOptimize = Parameters.isInDebug;\r\n\r\n    const webgpuCanvas = new WebGPU.Canvas(canvas);\r\n    const camera = new Camera();\r\n    const scene = new Scene(webgpuCanvas, {\r\n        spheresRadius: Parameters.particlesRadius,\r\n        obstacle: Parameters.obstacleType,\r\n        particlesQuantity: Parameters.particlesQuantity,\r\n    });\r\n\r\n    const framesCounter = new Counter();\r\n    framesCounter.onChange = Indicators.setAverageFps;\r\n\r\n    const iterationsCounter = new Counter();\r\n    iterationsCounter.onChange = Indicators.setAverageIps;\r\n\r\n    Parameters.onParticlesQuantityChange.push(() => scene.setParticlesQuantity(Parameters.particlesQuantity));\r\n    Parameters.onParticlesRadiusChange.push(() => scene.setParticlesRadius(Parameters.particlesRadius));\r\n    Parameters.onParticlesResetObservers.push(() => scene.reinitialize());\r\n    Parameters.onDomainResetObservers.push(() => scene.reinitializeDomain());\r\n    Parameters.onObstacleChange.push(() => scene.setObstacle(Parameters.obstacleType));\r\n\r\n    function mainLoop(): void {\r\n        framesCounter.register();\r\n\r\n        webgpuCanvas.setClearColor(Parameters.renderBackgroundColor);\r\n        webgpuCanvas.adjustSize();\r\n        scene.setCanvasSize(webgpuCanvas.width, webgpuCanvas.height);\r\n\r\n        const commandEncoder = device.createCommandEncoder();\r\n\r\n        if (Parameters.enginePaused) {\r\n            scene.update(commandEncoder, 0);\r\n        } else {\r\n            const timestep = Parameters.engineTimestep;\r\n            for (let i = Parameters.engineStepsPerFrame; i > 0; i--) {\r\n                scene.update(commandEncoder, timestep);\r\n                iterationsCounter.register();\r\n            }\r\n        }\r\n\r\n        scene.render(commandEncoder, camera.viewData);\r\n        device.queue.submit([commandEncoder.finish()]);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nasync function initialize(): Promise<void> {\r\n    const canvasElement = Page.Canvas.getCanvas();\r\n    if (!canvasElement) {\r\n        throw new Error(\"Could not find canvas on page.\");\r\n    }\r\n\r\n    const device = await WebGPU.initialize();\r\n    if (!device) {\r\n        throw new Error(\"No GPU device.\");\r\n    }\r\n    main(device, canvasElement);\r\n}\r\n\r\ninitialize();\r\n","import * as ShaderSources from \"../shader-sources\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-utils\";\r\nimport { type ViewData } from \"./camera\";\r\n\r\nclass AxesRenderer {\r\n    private readonly device: GPUDevice;\r\n    private readonly renderPipeline: GPURenderPipeline;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n\r\n    private readonly uniformsBindgroup: GPUBindGroup;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas) {\r\n        this.device = webgpuCanvas.device;\r\n        this.uniforms = new WebGPU.Uniforms(this.device, [\r\n            { name: \"mvp\", type: WebGPU.Types.mat4x4 },\r\n        ]);\r\n\r\n        const shaderModule = WebGPU.ShaderModule.create(this.device, {\r\n            code: ShaderSources.Rendering.Axes,\r\n            structs: [this.uniforms],\r\n        });\r\n\r\n        this.renderPipeline = this.device.createRenderPipeline({\r\n            layout: \"auto\",\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: []\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [{\r\n                    format: webgpuCanvas.textureFormat,\r\n                }],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"line-list\",\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\",\r\n                format: webgpuCanvas.depthTextureFormat,\r\n            },\r\n        });\r\n\r\n        this.uniformsBindgroup = this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: this.uniforms.bindingResource,\r\n            }]\r\n        });\r\n    }\r\n\r\n    public render(renderpassEncoder: GPURenderPassEncoder, viewData: ViewData): void {\r\n        this.uniforms.setValueFromName(\"mvp\", viewData.vpMatrix);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        renderpassEncoder.setPipeline(this.renderPipeline);\r\n        renderpassEncoder.setBindGroup(0, this.uniformsBindgroup);\r\n        renderpassEncoder.draw(6);\r\n    }\r\n}\r\n\r\nexport {\r\n    AxesRenderer,\r\n};\r\n\r\n","/// <reference types=\"../page-interface-generated\" />\r\n\r\nimport * as glMatrix from \"gl-matrix\";\r\nimport { EProjection, Parameters } from \"../ui/parameters\";\r\n\r\ntype ViewData = {\r\n    vMatrix: glMatrix.ReadonlyMat4;\r\n    pMatrix: glMatrix.ReadonlyMat4;\r\n    vpMatrix: glMatrix.ReadonlyMat4;\r\n    cameraPosition: glMatrix.ReadonlyVec3;\r\n    cameraUp: glMatrix.ReadonlyVec3;\r\n    cameraRight: glMatrix.ReadonlyVec3;\r\n    relativeDistance: number; // in [0, 1]\r\n};\r\n\r\nfunction clamp(x: number, min: number, max: number): number {\r\n    if (x < min) {\r\n        return min;\r\n    } else if (x > max) {\r\n        return max;\r\n    }\r\n    return x;\r\n}\r\n\r\nconst zNearData = [\r\n    { distance: 2, value: 0.6 },\r\n    { distance: 2.2222222222222223, value: 0.8 },\r\n    { distance: 2.469135802469136, value: 1 },\r\n    { distance: 2.7434842249657065, value: 1 },\r\n    { distance: 3.0483158055174515, value: 1.3 },\r\n    { distance: 3.387017561686057, value: 1.7 },\r\n    { distance: 3.763352846317841, value: 1.8 },\r\n    { distance: 4.223740568257958, value: 2.4 },\r\n    { distance: 6.437647566312998, value: 4.3 },\r\n    { distance: 9.811991413371434, value: 7.4 },\r\n    { distance: 16.6958844644795, value: 14.1 },\r\n];\r\n\r\nconst zFarData = [\r\n    { distance: 2, value: 3.3 },\r\n    { distance: 2.2222222222222223, value: 3.4 },\r\n    { distance: 2.469135802469136, value: 3.6 },\r\n    { distance: 2.7434842249657065, value: 3.9 },\r\n    { distance: 3.0483158055174515, value: 4 },\r\n    { distance: 3.387017561686057, value: 4.3 },\r\n    { distance: 3.763352846317841, value: 4.8 },\r\n    { distance: 4.223740568257958, value: 5.2 },\r\n    { distance: 6.437647566312998, value: 7.3 },\r\n    { distance: 9.811991413371434, value: 10.8 },\r\n    { distance: 16.6958844644795, value: 17.8 },\r\n];\r\n\r\nfunction interpolate(datas: { distance: number, value: number }[], distance: number): number {\r\n    for (let i = 0; i < datas.length - 1; i++) {\r\n        const previousData = datas[i]!;\r\n        const nextData = datas[i + 1]!;\r\n        if (distance < previousData.distance) {\r\n            return previousData.value;\r\n        } else if (distance < nextData.distance) {\r\n            return previousData.value + (nextData.value - previousData.value) * (distance - previousData.distance) / (nextData.distance - previousData.distance);\r\n        }\r\n    }\r\n    return datas[datas.length - 1]!.value;\r\n}\r\n\r\nconst minZoom = 0.6;\r\nconst maxZoom = 5;\r\n\r\nclass Camera {\r\n    private readonly _lookAt: glMatrix.vec3 = [0, 0, 0];\r\n\r\n    private readonly _viewUpWorldspace = glMatrix.vec3.create();\r\n    private readonly _viewRightWorlspace = glMatrix.vec3.create();\r\n\r\n    private readonly _eyePosition = glMatrix.vec3.create();\r\n    private readonly _viewMatrix = glMatrix.mat4.create();\r\n    private readonly _projectionMatrix = glMatrix.mat4.create();\r\n    private readonly _vpMatrix = glMatrix.mat4.create();\r\n\r\n    private zoom = 3;\r\n    private theta = 1;\r\n    private phi = 1.2;\r\n\r\n    public constructor() {\r\n        this.clampZoom();\r\n        this.clampPhi();\r\n\r\n        Page.Canvas.Observers.mouseWheel.push((delta: number) => {\r\n            this.zoom *= 1 - 0.1 * delta;\r\n            this.clampZoom();\r\n            this.recomputeEyePosition();\r\n        });\r\n\r\n        Page.Canvas.Observers.mouseDrag.push((dX: number, dY: number) => {\r\n            this.theta -= 0.5 * 2 * 3.14159 * dX;\r\n            this.phi -= 0.5 * 2 * 3 * dY;\r\n            this.clampPhi();\r\n            this.recomputeEyePosition();\r\n        });\r\n\r\n        // right button to move camera vertically\r\n        {\r\n            const canvasElement = Page.Canvas.getCanvas();\r\n            if (!canvasElement) {\r\n                throw new Error(\"No canvas element :(\");\r\n            }\r\n\r\n            canvasElement.addEventListener(\"contextmenu\", (event: MouseEvent) => {\r\n                event.preventDefault();\r\n                return false;\r\n            });\r\n            let rightMouseButtonDown = false;\r\n            const RIGHT_BUTTON_CODE = 2;\r\n            let lastMousePosition = Page.Canvas.getMousePosition();\r\n            canvasElement.addEventListener(\"mousedown\", (event: MouseEvent) => {\r\n                if (event.button === RIGHT_BUTTON_CODE) {\r\n                    rightMouseButtonDown = true;\r\n                    lastMousePosition = Page.Canvas.getMousePosition();\r\n                }\r\n            });\r\n            document.addEventListener(\"mouseup\", (event: MouseEvent) => {\r\n                if (event.button === RIGHT_BUTTON_CODE) {\r\n                    rightMouseButtonDown = false;\r\n                }\r\n            });\r\n            Page.Canvas.Observers.mouseMove.push((newX: number, newY: number) => {\r\n                if (rightMouseButtonDown) {\r\n                    const dY = newY - lastMousePosition[1];\r\n                    this._lookAt[2] += dY;\r\n                    this._lookAt[2] = clamp(this._lookAt[2], -.5, .5);\r\n\r\n                    this.recomputeEyePosition();\r\n                }\r\n                lastMousePosition = [newX, newY];\r\n            });\r\n        }\r\n\r\n        this.recomputeEyePosition();\r\n    }\r\n\r\n    public get viewData(): ViewData {\r\n        this.recomputeProjectionMatrix();\r\n\r\n        return {\r\n            vMatrix: this._viewMatrix,\r\n            pMatrix: this._projectionMatrix,\r\n            vpMatrix: this._vpMatrix,\r\n            cameraPosition: this._eyePosition,\r\n            cameraUp: this._viewUpWorldspace,\r\n            cameraRight: this._viewRightWorlspace,\r\n            relativeDistance: this.zoom / maxZoom,\r\n        };\r\n    }\r\n\r\n    private recomputeViewProjectionMatrix(): void {\r\n        glMatrix.mat4.multiply(this._vpMatrix, this._projectionMatrix, this._viewMatrix);\r\n    }\r\n\r\n    private recomputeProjectionMatrix(): void {\r\n        const aspectRatio = Page.Canvas.getAspectRatio();\r\n\r\n        if (Parameters.renderProjection === EProjection.PERSPECTIVE) {\r\n            // const zFar = this.distance + 1.3;\r\n            // const zNear = Math.max(0.6, zFar - 4);\r\n            const zFar = interpolate(zFarData, this.distance);\r\n            const zNear = interpolate(zNearData, this.distance);\r\n            glMatrix.mat4.perspective(this._projectionMatrix, 30 * (Math.PI / 180), aspectRatio, zNear, zFar);\r\n        } else {\r\n            const side = 2.5 / this.zoom;\r\n            glMatrix.mat4.ortho(this._projectionMatrix, -side * aspectRatio, side * aspectRatio, -side, side, this.distance - 3.75, this.distance + 1.1);\r\n        }\r\n\r\n        this.recomputeViewProjectionMatrix();\r\n    }\r\n\r\n    private recomputeViewMatrix(): void {\r\n        const up: glMatrix.vec3 = [0, 0, 1];\r\n        if (this._eyePosition[0] === 0 && this._eyePosition[1] === 0) { // we are the vertical of the origin\r\n            up[0] = -Math.sign(this._eyePosition[2]) * Math.cos(this.theta);\r\n            up[1] = -Math.sign(this._eyePosition[2]) * Math.sin(this.theta);\r\n            up[2] = 0;\r\n        }\r\n\r\n        glMatrix.mat4.lookAt(this._viewMatrix, this._eyePosition, this._lookAt, up);\r\n\r\n        this._viewRightWorlspace[0] = this._viewMatrix[0];\r\n        this._viewRightWorlspace[1] = this._viewMatrix[4];\r\n        this._viewRightWorlspace[2] = this._viewMatrix[8];\r\n\r\n        this._viewUpWorldspace[0] = this._viewMatrix[1];\r\n        this._viewUpWorldspace[1] = this._viewMatrix[5];\r\n        this._viewUpWorldspace[2] = this._viewMatrix[9];\r\n    }\r\n\r\n    private recomputeEyePosition(): void {\r\n        this._eyePosition[0] = this._lookAt[0] + this.distance * (Math.sin(this.phi) * Math.cos(this.theta));\r\n        this._eyePosition[1] = this._lookAt[1] + this.distance * (Math.sin(this.phi) * Math.sin(this.theta));\r\n        this._eyePosition[2] = this._lookAt[2] + this.distance * (Math.cos(this.phi));\r\n\r\n        this.recomputeViewMatrix();\r\n    }\r\n\r\n    private clampZoom(): void {\r\n        this.zoom = clamp(this.zoom, minZoom, maxZoom);\r\n    }\r\n\r\n    private clampPhi(): void {\r\n        this.phi = clamp(this.phi, 0, Math.PI);\r\n    }\r\n\r\n    private get distance(): number {\r\n        return 10 / this.zoom;\r\n    }\r\n}\r\n\r\nexport type {\r\n    ViewData,\r\n};\r\nexport {\r\n    Camera,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as ShaderSources from \"../shader-sources\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-utils\";\r\n\r\ntype RenderData = {\r\n    readonly mvpMatrix: glMatrix.ReadonlyMat4;\r\n    readonly proportions: glMatrix.ReadonlyVec3;\r\n};\r\n\r\nclass CubeRenderer {\r\n    private readonly device: GPUDevice;\r\n    private readonly renderPipeline: GPURenderPipeline;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n\r\n    private readonly uniformsBindgroup: GPUBindGroup;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas) {\r\n        this.device = webgpuCanvas.device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(this.device, [\r\n            { name: \"mvp\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"proportions\", type: WebGPU.Types.vec3F32 },\r\n        ]);\r\n\r\n        const shaderModule = WebGPU.ShaderModule.create(this.device, {\r\n            code: ShaderSources.Rendering.Cube,\r\n            structs: [this.uniforms],\r\n        });\r\n\r\n        this.renderPipeline = this.device.createRenderPipeline({\r\n            layout: \"auto\",\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: []\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [{\r\n                    format: webgpuCanvas.textureFormat,\r\n                }],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"line-list\",\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\",\r\n                format: webgpuCanvas.depthTextureFormat,\r\n            },\r\n        });\r\n\r\n        this.uniformsBindgroup = this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: this.uniforms.bindingResource,\r\n            }]\r\n        });\r\n    }\r\n\r\n    public render(renderpassEncoder: GPURenderPassEncoder, renderData: RenderData): void {\r\n        this.uniforms.setValueFromName(\"mvp\", renderData.mvpMatrix);\r\n        this.uniforms.setValueFromName(\"proportions\", renderData.proportions);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        renderpassEncoder.setPipeline(this.renderPipeline);\r\n        renderpassEncoder.setBindGroup(0, this.uniformsBindgroup);\r\n        renderpassEncoder.draw(24);\r\n    }\r\n}\r\n\r\nexport {\r\n    CubeRenderer,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { CellsBufferDescriptor, GridData } from \"../engine/engine\";\r\nimport * as ShaderSources from \"../shader-sources\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-utils\";\r\n\r\ntype RenderData = {\r\n    readonly mvpMatrix: glMatrix.ReadonlyMat4;\r\n    readonly gpuBuffer: GPUBuffer;\r\n    readonly gridData: GridData;\r\n};\r\n\r\nclass GridCellsByPopulationRenderer {\r\n    private readonly device: GPUDevice;\r\n\r\n    private readonly renderPipeline: GPURenderPipeline;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly uniformsBindgroup: GPUBindGroup;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas, bufferDescriptor: CellsBufferDescriptor) {\r\n        this.device = webgpuCanvas.device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(this.device, [\r\n            { name: \"mvp\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"color\", type: WebGPU.Types.vec4F32 },\r\n            { name: \"gridSize\", type: WebGPU.Types.vec3U32 },\r\n            { name: \"cellSize\", type: WebGPU.Types.f32 },\r\n        ]);\r\n        this.uniforms.setValueFromName(\"color\", [1, 1, 1, 1]);\r\n\r\n        const shaderModule = WebGPU.ShaderModule.create(this.device, {\r\n            code: ShaderSources.Engine.Indexing.RenderCellsByPopulation,\r\n            structs: [this.uniforms],\r\n        });\r\n\r\n        this.renderPipeline = this.device.createRenderPipeline({\r\n            layout: \"auto\",\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: bufferDescriptor.particlesCountAttribute.offset,\r\n                                format: bufferDescriptor.particlesCountAttribute.format,\r\n                            }\r\n                        ],\r\n                        arrayStride: bufferDescriptor.bufferArrayStride,\r\n                        stepMode: \"instance\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [{\r\n                    format: webgpuCanvas.textureFormat,\r\n                    blend: {\r\n                        color: {\r\n                            srcFactor: \"src-alpha\",\r\n                            dstFactor: \"one-minus-src-alpha\",\r\n                            operation: \"add\",\r\n                        },\r\n                        alpha: {\r\n                            srcFactor: \"zero\",\r\n                            dstFactor: \"one\",\r\n                            operation: \"add\",\r\n                        }\r\n                    },\r\n                }],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"line-list\",\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\",\r\n                format: webgpuCanvas.depthTextureFormat,\r\n            },\r\n        });\r\n\r\n        this.uniformsBindgroup = this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: this.uniforms.bindingResource,\r\n            }]\r\n        });\r\n    }\r\n\r\n    public render(renderpassEncoder: GPURenderPassEncoder, data: RenderData): void {\r\n        this.uniforms.setValueFromName(\"mvp\", data.mvpMatrix);\r\n        this.uniforms.setValueFromName(\"gridSize\", data.gridData.gridSize);\r\n        this.uniforms.setValueFromName(\"cellSize\", data.gridData.cellSize);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        renderpassEncoder.setPipeline(this.renderPipeline);\r\n        renderpassEncoder.setBindGroup(0, this.uniformsBindgroup);\r\n        renderpassEncoder.setVertexBuffer(0, data.gpuBuffer);\r\n        renderpassEncoder.draw(24, data.gridData.gridSize[0] * data.gridData.gridSize[1] * data.gridData.gridSize[2]);\r\n    }\r\n}\r\n\r\nexport {\r\n    GridCellsByPopulationRenderer,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { GridData, NonEmptyCellsBuffers } from \"../engine/engine\";\r\nimport * as ShaderSources from \"../shader-sources\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-utils\";\r\n\r\ntype RenderData = {\r\n    readonly buffers: NonEmptyCellsBuffers;\r\n    readonly gridData: GridData;\r\n    readonly mvpMatrix: glMatrix.ReadonlyMat4;\r\n};\r\n\r\nclass GridCellsRenderer {\r\n    private readonly device: GPUDevice;\r\n    private readonly renderPipeline: GPURenderPipeline;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly uniformsBindgroup: GPUBindGroup;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas) {\r\n        this.device = webgpuCanvas.device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(this.device, [\r\n            { name: \"mvp\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"color\", type: WebGPU.Types.vec4F32 },\r\n            { name: \"gridSize\", type: WebGPU.Types.vec3U32 },\r\n            { name: \"cellSize\", type: WebGPU.Types.f32 },\r\n        ]);\r\n        this.uniforms.setValueFromName(\"color\", [1, 1, 1, 1]);\r\n\r\n        const shaderModule = WebGPU.ShaderModule.create(this.device, {\r\n            code: ShaderSources.Rendering.GridCells,\r\n            structs: [this.uniforms],\r\n        });\r\n\r\n        this.renderPipeline = this.device.createRenderPipeline({\r\n            layout: \"auto\",\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"uint32\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Uint32Array.BYTES_PER_ELEMENT,\r\n                        stepMode: \"instance\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [{\r\n                    format: webgpuCanvas.textureFormat,\r\n                }],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"line-list\",\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\",\r\n                format: webgpuCanvas.depthTextureFormat,\r\n            },\r\n        });\r\n\r\n        this.uniformsBindgroup = this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: this.uniforms.bindingResource,\r\n            }]\r\n        });\r\n    }\r\n\r\n    public render(renderpassEncoder: GPURenderPassEncoder, renderData: RenderData): void {\r\n        this.uniforms.setValueFromName(\"mvp\", renderData.mvpMatrix);\r\n        this.uniforms.setValueFromName(\"gridSize\", renderData.gridData.gridSize);\r\n        this.uniforms.setValueFromName(\"cellSize\", renderData.gridData.cellSize);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        renderpassEncoder.setPipeline(this.renderPipeline);\r\n        renderpassEncoder.setBindGroup(0, this.uniformsBindgroup);\r\n        renderpassEncoder.setVertexBuffer(0, renderData.buffers.nonEmptyCellsIndicesBuffer);\r\n        renderpassEncoder.drawIndirect(renderData.buffers.cellsIndirectDrawBuffer, 0);\r\n    }\r\n}\r\n\r\nexport {\r\n    GridCellsRenderer,\r\n};\r\n\r\n","import { Mesh } from \"../../engine/initial-conditions/models/mesh\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport * as glMatrix from \"gl-matrix\";\r\n\r\nclass MeshRenderable {\r\n    public readonly verticesCount: number;\r\n    public readonly buffer: WebGPU.Buffer;\r\n\r\n    public readonly modelMatrix: glMatrix.mat4 = glMatrix.mat4.create();\r\n\r\n    public constructor(device: GPUDevice, mesh: Mesh) {\r\n        this.verticesCount = 3 * mesh.triangles.length;\r\n        this.buffer = new WebGPU.Buffer(device, {\r\n            size: 4 * 2 * 3 * 3 * mesh.triangles.length,\r\n            usage: GPUBufferUsage.VERTEX,\r\n        });\r\n        const buffer = new Float32Array(this.buffer.getMappedRange());\r\n        let i = 0;\r\n        for (const triangle of mesh.triangles) {\r\n            buffer[i++] = triangle.p1[0];\r\n            buffer[i++] = triangle.p1[1];\r\n            buffer[i++] = triangle.p1[2];\r\n            buffer[i++] = triangle.normal[0];\r\n            buffer[i++] = triangle.normal[1];\r\n            buffer[i++] = triangle.normal[2];\r\n            buffer[i++] = triangle.p2[0];\r\n            buffer[i++] = triangle.p2[1];\r\n            buffer[i++] = triangle.p2[2];\r\n            buffer[i++] = triangle.normal[0];\r\n            buffer[i++] = triangle.normal[1];\r\n            buffer[i++] = triangle.normal[2];\r\n            buffer[i++] = triangle.p3[0];\r\n            buffer[i++] = triangle.p3[1];\r\n            buffer[i++] = triangle.p3[2];\r\n            buffer[i++] = triangle.normal[0];\r\n            buffer[i++] = triangle.normal[1];\r\n            buffer[i++] = triangle.normal[2];\r\n        }\r\n        this.buffer.unmap();\r\n    }\r\n\r\n    public free(): void {\r\n        this.buffer.free();\r\n    }\r\n}\r\n\r\nexport {\r\n    MeshRenderable,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { Mesh } from \"../../engine/initial-conditions/models/mesh\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { MeshRenderable } from \"./mesh-renderable\";\r\n\r\ntype RenderData = {\r\n    readonly meshes: MeshRenderable[];\r\n    readonly modelMatrix: glMatrix.ReadonlyMat4;\r\n    readonly mvpMatrix: glMatrix.ReadonlyMat4;\r\n    readonly displayNormals: boolean;\r\n    readonly lightDirection: glMatrix.ReadonlyVec3;\r\n};\r\n\r\nclass MeshRenderer {\r\n    private readonly device: GPUDevice;\r\n    private readonly renderPipeline: GPURenderPipeline;\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n\r\n    private readonly uniformsBindgroup: GPUBindGroup;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas) {\r\n        this.device = webgpuCanvas.device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(this.device, [\r\n            { name: \"mvp\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"modelMatrix\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"lightDirection\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"displayMode\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        const shaderModule = WebGPU.ShaderModule.create(this.device, {\r\n            code: ShaderSources.Rendering.Mesh,\r\n            structs: [this.uniforms],\r\n        });\r\n\r\n        this.renderPipeline = this.device.createRenderPipeline({\r\n            layout: \"auto\",\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"float32x3\",\r\n                            },\r\n                            {\r\n                                shaderLocation: 1,\r\n                                offset: 3 * Float32Array.BYTES_PER_ELEMENT,\r\n                                format: \"float32x3\",\r\n                            }\r\n                        ],\r\n                        arrayStride: 6 * Float32Array.BYTES_PER_ELEMENT,\r\n                        stepMode: \"vertex\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [{\r\n                    format: webgpuCanvas.textureFormat,\r\n                }],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"triangle-list\",\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\",\r\n                format: webgpuCanvas.depthTextureFormat,\r\n            },\r\n        });\r\n\r\n        this.uniformsBindgroup = this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: this.uniforms.bindingResource,\r\n                },\r\n            ]\r\n        });\r\n    }\r\n\r\n    public createMeshRenderable(mesh: Mesh): MeshRenderable {\r\n        return new MeshRenderable(this.device, mesh);\r\n    }\r\n\r\n    public render(renderpassEncoder: GPURenderPassEncoder, renderData: RenderData): void {\r\n        if (renderData.meshes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.uniforms.setValueFromName(\"displayMode\", renderData.displayNormals ? 1 : 0);\r\n        this.uniforms.setValueFromName(\"lightDirection\", renderData.lightDirection);\r\n\r\n        renderpassEncoder.setPipeline(this.renderPipeline);\r\n\r\n        for (const mesh of renderData.meshes) {\r\n            const mvpMatrix = glMatrix.mat4.create();\r\n            glMatrix.mat4.multiply(mvpMatrix, renderData.mvpMatrix, mesh.modelMatrix);\r\n            const modelMatrix = glMatrix.mat4.create();\r\n            glMatrix.mat4.multiply(modelMatrix, renderData.modelMatrix, mesh.modelMatrix);\r\n\r\n            this.uniforms.setValueFromName(\"mvp\", mvpMatrix);\r\n            this.uniforms.setValueFromName(\"modelMatrix\", modelMatrix);\r\n            this.uniforms.uploadToGPU();\r\n\r\n            renderpassEncoder.setVertexBuffer(0, mesh.buffer.gpuBuffer);\r\n            renderpassEncoder.setBindGroup(0, this.uniformsBindgroup);\r\n            renderpassEncoder.draw(mesh.verticesCount);\r\n        }\r\n    }\r\n\r\n    public free(): void {\r\n        this.uniforms.free();\r\n    }\r\n}\r\n\r\nexport {\r\n    MeshRenderer,\r\n};\r\n\r\n","import * as ShaderSources from \"../../shader-sources\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\n\r\ntype Data = {\r\n    readonly deferredTexture: WebGPU.Texture;\r\n    // readonly foamTexture: WebGPU.Texture;\r\n};\r\n\r\nclass Blur {\r\n    private static readonly WORKGROUP_SIZE = 256;\r\n    private static readonly BLUR_RADIUS = 8;\r\n    private static readonly USEFUL_WORKGROUP_SIZE = Blur.WORKGROUP_SIZE - (2 * Blur.BLUR_RADIUS);\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly temporaryTexture: WebGPU.Texture;\r\n    // private readonly temporaryFoamTexture: WebGPU.Texture;\r\n    private readonly pipeline: GPUComputePipeline;\r\n    private readonly uniformsHorizontal: WebGPU.Uniforms;\r\n    private readonly uniformsVertical: WebGPU.Uniforms;\r\n    private bindgroupHorizontal: GPUBindGroup | null = null;\r\n    private bindgroupVertical: GPUBindGroup | null = null;\r\n\r\n    public constructor(device: GPUDevice, data: Data) {\r\n        this.device = device;\r\n\r\n        this.temporaryTexture = new WebGPU.Texture(device, \"rgba8unorm\", GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING);\r\n        // this.temporaryFoamTexture = new WebGPU.Texture(device, \"rgba8unorm\", GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING);\r\n\r\n        const uniformBufferAttributes = [\r\n            { name: \"direction\", type: WebGPU.Types.vec2I32 },\r\n            { name: \"blurFactors_0\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_1\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_2\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_3\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_4\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_5\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_6\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_7\", type: WebGPU.Types.f32 },\r\n            { name: \"blurFactors_8\", type: WebGPU.Types.f32 },\r\n            { name: \"padding\", type: WebGPU.Types.f32 }, // padding\r\n        ];\r\n        this.uniformsHorizontal = new WebGPU.Uniforms(device, uniformBufferAttributes);\r\n        this.uniformsHorizontal.setValueFromName(\"direction\", [1, 0]);\r\n        this.uniformsHorizontal.uploadToGPU();\r\n\r\n        this.uniformsVertical = new WebGPU.Uniforms(device, uniformBufferAttributes);\r\n        this.uniformsVertical.setValueFromName(\"direction\", [0, 1]);\r\n        this.uniformsVertical.uploadToGPU();\r\n\r\n        this.pipeline = this.device.createComputePipeline({\r\n            layout: \"auto\",\r\n            compute: {\r\n                module: WebGPU.ShaderModule.create(this.device, {\r\n                    code: ShaderSources.Rendering.Spheres.Blur,\r\n                    structs: [this.uniformsHorizontal],\r\n                }),\r\n                entryPoint: \"main\",\r\n                constants: {\r\n                    workgroupSize: Blur.WORKGROUP_SIZE,\r\n                }\r\n            }\r\n        });\r\n\r\n        this.setDeferredTextures(data);\r\n    }\r\n\r\n    public compute(commandEncoder: GPUCommandEncoder, compression: number): void {\r\n        if (!this.bindgroupHorizontal || !this.bindgroupVertical) {\r\n            throw new Error();\r\n        }\r\n\r\n        this.computeBlurFactors(compression);\r\n\r\n        const width = this.temporaryTexture.getWidth();\r\n        const height = this.temporaryTexture.getHeight();\r\n\r\n        const computePass = commandEncoder.beginComputePass();\r\n        computePass.setPipeline(this.pipeline);\r\n        computePass.setBindGroup(0, this.bindgroupHorizontal);\r\n        computePass.dispatchWorkgroups(\r\n            Math.ceil(width / Blur.USEFUL_WORKGROUP_SIZE),\r\n            height\r\n        );\r\n\r\n        computePass.setBindGroup(0, this.bindgroupVertical);\r\n        computePass.dispatchWorkgroups(\r\n            Math.ceil(height / Blur.USEFUL_WORKGROUP_SIZE),\r\n            width\r\n        );\r\n        computePass.end();\r\n    }\r\n\r\n    public setDeferredTextures(data: Data): void {\r\n        if (!data.deferredTexture.hasUsage(GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING)) {\r\n            throw new Error(\"Texture has wrong usage.\");\r\n        }\r\n        // if (!data.foamTexture.hasUsage(GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING)) {\r\n        //     throw new Error(\"Texture has wrong usage.\");\r\n        // }\r\n        if (data.deferredTexture.format !== \"rgba8unorm\" || this.temporaryTexture.format !== \"rgba8unorm\") {\r\n            throw new Error(\"Texture has wrong format.\");\r\n        }\r\n        // if (data.foamTexture.format !== \"rgba8unorm\" || this.temporaryFoamTexture.format !== \"rgba8unorm\") {\r\n        //     throw new Error(\"Texture has wrong format.\");\r\n        // }\r\n\r\n        // if (data.foamTexture.getWidth() !== data.deferredTexture.getWidth() || data.foamTexture.getHeight() !== data.deferredTexture.getHeight()) {\r\n        //     throw new Error();\r\n        // }\r\n\r\n        const width = data.deferredTexture.getWidth();\r\n        const height = data.deferredTexture.getHeight();\r\n        this.temporaryTexture.setSize(width, height);\r\n        // this.temporaryFoamTexture.setSize(width, height);\r\n\r\n        const deferredTextureView = data.deferredTexture.getView();\r\n        // const deferredFoamTextureView = data.foamTexture.getView();\r\n        const temporaryTextureView = this.temporaryTexture.getView();\r\n        // const temporaryFoamTextureView = this.temporaryFoamTexture.getView();\r\n        const layout = this.pipeline.getBindGroupLayout(0);\r\n        this.bindgroupHorizontal = this.device.createBindGroup({\r\n            layout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: deferredTextureView,\r\n                }, {\r\n                    binding: 1,\r\n                    resource: temporaryTextureView,\r\n                }, {\r\n                    binding: 2,\r\n                    resource: this.uniformsHorizontal.bindingResource,\r\n                    // }, {\r\n                    //     binding: 3,\r\n                    //     resource: deferredFoamTextureView,\r\n                    // }, {\r\n                    //     binding: 4,\r\n                    //     resource: temporaryFoamTextureView,\r\n                },\r\n            ]\r\n        });\r\n        this.bindgroupVertical = this.device.createBindGroup({\r\n            layout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: temporaryTextureView,\r\n                }, {\r\n                    binding: 1,\r\n                    resource: deferredTextureView,\r\n                }, {\r\n                    binding: 2,\r\n                    resource: this.uniformsVertical.bindingResource,\r\n                    // }, {\r\n                    //     binding: 3,\r\n                    //     resource: temporaryFoamTextureView,\r\n                    // }, {\r\n                    //     binding: 4,\r\n                    //     resource: deferredFoamTextureView,\r\n                },\r\n            ]\r\n        });\r\n    }\r\n\r\n    private computeBlurFactors(compression: number): void {\r\n        const factors: number[] = [];\r\n\r\n        const sigma = 4;\r\n        const prefix = 1 / (Math.sqrt(2 * Math.PI) * sigma);\r\n        let sum = 0;\r\n        for (let i = 0; i <= Blur.BLUR_RADIUS; i++) {\r\n            const x = i / compression;\r\n            const result = prefix * Math.exp(-0.5 * x * x / (2 * sigma * sigma));\r\n            factors.push(result);\r\n            sum += (i === 0) ? result : 2 * result;\r\n        }\r\n        for (let i = 0; i < factors.length; i++) {\r\n            factors[i]! /= sum;\r\n        }\r\n\r\n        factors.forEach((factor: number, index: number) => {\r\n            this.uniformsHorizontal.setValueFromName(`blurFactors_${index}`, factor);\r\n            this.uniformsVertical.setValueFromName(`blurFactors_${index}`, factor);\r\n        });\r\n        this.uniformsHorizontal.uploadToGPU();\r\n        this.uniformsVertical.uploadToGPU();\r\n    }\r\n}\r\n\r\nexport {\r\n    Blur,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport { Parameters } from \"../../ui/parameters\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type ViewData } from \"../camera\";\r\n\r\ntype Data = {\r\n    readonly deferredTexture: WebGPU.Texture\r\n    readonly foamTexture: WebGPU.Texture\r\n};\r\n\r\ntype RenderData = {\r\n    lightDirection: glMatrix.ReadonlyVec3;\r\n};\r\n\r\nclass Composition {\r\n    private readonly device: GPUDevice;\r\n    private readonly renderPipeline: GPURenderPipeline;\r\n\r\n    private readonly linearSampler: GPUSampler;\r\n    private texturesBindgroup: GPUBindGroup;\r\n\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n    private readonly uniformsBindgroup: GPUBindGroup;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas, data: Data) {\r\n        this.device = webgpuCanvas.device;\r\n\r\n        this.uniforms = new WebGPU.Uniforms(this.device, [\r\n            { name: \"cameraRight\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"displayMode\", type: WebGPU.Types.u32 },\r\n            { name: \"cameraUp\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"f0\", type: WebGPU.Types.f32 },\r\n            { name: \"worldColor\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"specularity\", type: WebGPU.Types.f32 },\r\n            { name: \"waterColor\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"waterOpacity\", type: WebGPU.Types.f32 },\r\n            { name: \"lightDirection\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"enableFoam\", type: WebGPU.Types.u32 },\r\n        ]);\r\n\r\n        const shaderModule = WebGPU.ShaderModule.create(this.device, {\r\n            code: ShaderSources.Rendering.Spheres.Composition,\r\n            structs: [this.uniforms],\r\n        });\r\n\r\n        this.renderPipeline = this.device.createRenderPipeline({\r\n            layout: \"auto\",\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [{\r\n                    format: webgpuCanvas.textureFormat,\r\n                }],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"triangle-strip\",\r\n            },\r\n            depthStencil: {\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\",\r\n                format: webgpuCanvas.depthTextureFormat,\r\n            },\r\n        });\r\n\r\n        this.linearSampler = this.device.createSampler({\r\n            magFilter: \"linear\",\r\n            minFilter: \"linear\",\r\n        });\r\n\r\n        this.texturesBindgroup = this.createTextureBindgroup(data);\r\n\r\n        this.uniformsBindgroup = this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: this.uniforms.bindingResource,\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    public render(renderpassEncoder: GPURenderPassEncoder, viewData: ViewData, renderData: RenderData): void {\r\n        this.uniforms.setValueFromName(\"cameraRight\", viewData.cameraRight);\r\n        this.uniforms.setValueFromName(\"displayMode\", Parameters.displayMode);\r\n        this.uniforms.setValueFromName(\"cameraUp\", viewData.cameraUp);\r\n        this.uniforms.setValueFromName(\"f0\", Parameters.waterFresnel);\r\n        this.uniforms.setValueFromName(\"worldColor\", Parameters.renderBackgroundColor.slice(0, 3));\r\n        this.uniforms.setValueFromName(\"specularity\", Parameters.waterSpecularity);\r\n        this.uniforms.setValueFromName(\"waterColor\", Parameters.renderWaterColor.slice(0, 3));\r\n        this.uniforms.setValueFromName(\"waterOpacity\", Parameters.renderWaterOpacity);\r\n        this.uniforms.setValueFromName(\"lightDirection\", renderData.lightDirection);\r\n        this.uniforms.setValueFromName(\"enableFoam\", Parameters.renderFoam ? 1 : 0);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        renderpassEncoder.setPipeline(this.renderPipeline);\r\n        renderpassEncoder.setBindGroup(0, this.texturesBindgroup);\r\n        renderpassEncoder.setBindGroup(1, this.uniformsBindgroup);\r\n        renderpassEncoder.draw(4);\r\n    }\r\n\r\n    public setDeferredTexture(data: Data): void {\r\n        this.texturesBindgroup = this.createTextureBindgroup(data);\r\n    }\r\n\r\n    private createTextureBindgroup(data: Data): GPUBindGroup {\r\n        return this.device.createBindGroup({\r\n            layout: this.renderPipeline.getBindGroupLayout(0),\r\n            entries: [{\r\n                binding: 0,\r\n                resource: this.linearSampler,\r\n            }, {\r\n                binding: 1,\r\n                resource: data.deferredTexture.getView(),\r\n            }, {\r\n                binding: 2,\r\n                resource: data.foamTexture.getView(),\r\n            }]\r\n        });\r\n    }\r\n}\r\n\r\nexport type {\r\n    RenderData,\r\n};\r\nexport {\r\n    Composition,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { SpheresBufferDescriptor } from \"../../engine/engine\";\r\nimport * as ShaderSources from \"../../shader-sources\";\r\nimport { Parameters } from \"../../ui/parameters\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type ViewData } from \"../camera\";\r\n\r\ntype Data = {\r\n    readonly spheresBufferDescriptor: SpheresBufferDescriptor;\r\n    readonly sceneDepthTextureView: GPUTextureView;\r\n};\r\n\r\ntype RenderPass = {\r\n    readonly colorAttachment: GPURenderPassColorAttachment;\r\n    readonly foamAttachment?: GPURenderPassColorAttachment;\r\n    readonly depthAttachment: GPURenderPassDepthStencilAttachment;\r\n    readonly descriptor: GPURenderPassDescriptor;\r\n    readonly pipeline: GPURenderPipeline;\r\n    readonly uniformsBindgroup: GPUBindGroup;\r\n}\r\n\r\ntype RenderData = {\r\n    readonly modelMatrix: glMatrix.ReadonlyMat4;\r\n    readonly gpuBuffer: GPUBuffer;\r\n    readonly instancesCount: number;\r\n    readonly sphereRadius: number;\r\n    readonly maxDisplayedWeight: number;\r\n    readonly willUseWaterDepth: boolean;\r\n};\r\n\r\ntype DeferredDescriptorData = {\r\n    fragmentMain: string;\r\n    bufferDescriptor: SpheresBufferDescriptor;\r\n    writeMask: GPUColorWriteFlags;\r\n    blend?: GPUBlendState;\r\n    foamTexture?: WebGPU.Texture;\r\n};\r\n\r\nclass Deferred {\r\n    private readonly device: GPUDevice;\r\n\r\n    private readonly rgaRenderPass: RenderPass;\r\n    private readonly bRenderPass: RenderPass;\r\n\r\n    private readonly uniforms: WebGPU.Uniforms;\r\n\r\n    public readonly texture: WebGPU.Texture;\r\n    public readonly foamTexture: WebGPU.Texture;\r\n    private readonly depthTexture: WebGPU.Texture;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas, data: Data) {\r\n        this.device = webgpuCanvas.device;\r\n\r\n        this.texture = new WebGPU.Texture(this.device, \"rgba8unorm\", GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING);\r\n        this.foamTexture = new WebGPU.Texture(this.device, \"r8unorm\", GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING);\r\n        this.depthTexture = new WebGPU.Texture(this.device, \"depth16unorm\", GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING);\r\n\r\n        this.uniforms = new WebGPU.Uniforms(this.device, [\r\n            { name: \"vpMatrix\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"mMatrix\", type: WebGPU.Types.mat4x4 },\r\n            { name: \"cameraUp\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"sphereRadius\", type: WebGPU.Types.f32 },\r\n            { name: \"cameraRight\", type: WebGPU.Types.vec3F32 },\r\n            { name: \"weightThreshold\", type: WebGPU.Types.f32 }\r\n        ]);\r\n\r\n        const shaderModule = WebGPU.ShaderModule.create(this.device, {\r\n            code: ShaderSources.Rendering.Spheres.Spheres,\r\n            structs: [this.uniforms],\r\n        });\r\n\r\n        // RGA render pass\r\n        {\r\n            const colorAttachment: GPURenderPassColorAttachment = {\r\n                view: this.texture.getView(),\r\n                clearValue: [0, 1, 0, 1],\r\n                loadOp: \"clear\",\r\n                storeOp: \"store\",\r\n            };\r\n            const foamAttachment: GPURenderPassColorAttachment = {\r\n                view: this.foamTexture.getView(),\r\n                clearValue: [0, 0, 0, 0],\r\n                loadOp: \"clear\",\r\n                storeOp: \"store\",\r\n            };\r\n            const depthAttachment: GPURenderPassDepthStencilAttachment = {\r\n                view: this.depthTexture.getView(),\r\n                depthClearValue: 1,\r\n                depthLoadOp: \"clear\",\r\n                depthStoreOp: \"store\",\r\n                stencilReadOnly: true,\r\n            };\r\n            const renderPassDescriptor: GPURenderPassDescriptor = {\r\n                colorAttachments: [colorAttachment, foamAttachment],\r\n                depthStencilAttachment: depthAttachment,\r\n            };\r\n            const pipelineDescriptor = this.createDeferredDescriptor(shaderModule, {\r\n                fragmentMain: \"main_fragment_rga\",\r\n                bufferDescriptor: data.spheresBufferDescriptor,\r\n                writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN | GPUColorWrite.ALPHA,\r\n                foamTexture: this.foamTexture,\r\n            });\r\n            pipelineDescriptor.depthStencil = {\r\n                depthWriteEnabled: true,\r\n                depthCompare: \"less\",\r\n                format: this.depthTexture.format,\r\n            };\r\n            const pipeline = this.device.createRenderPipeline(pipelineDescriptor);\r\n            const uniformsBindgroup = this.device.createBindGroup({\r\n                layout: pipeline.getBindGroupLayout(0),\r\n                entries: [{\r\n                    binding: 0,\r\n                    resource: this.uniforms.bindingResource,\r\n                }]\r\n            });\r\n\r\n            this.rgaRenderPass = {\r\n                colorAttachment,\r\n                foamAttachment,\r\n                depthAttachment,\r\n                descriptor: renderPassDescriptor,\r\n                pipeline,\r\n                uniformsBindgroup,\r\n            };\r\n        }\r\n\r\n        // B render pass\r\n        {\r\n            const colorAttachment: GPURenderPassColorAttachment = {\r\n                view: this.texture.getView(),\r\n                loadOp: \"load\",\r\n                storeOp: \"store\",\r\n            };\r\n            const depthAttachment: GPURenderPassDepthStencilAttachment = {\r\n                view: data.sceneDepthTextureView,\r\n                depthReadOnly: true,\r\n                stencilReadOnly: true,\r\n            };\r\n            const renderPassDescriptor: GPURenderPassDescriptor = {\r\n                colorAttachments: [colorAttachment],\r\n                depthStencilAttachment: depthAttachment,\r\n            };\r\n            const additiveBlend: GPUBlendState = {\r\n                color: {\r\n                    srcFactor: \"one\",\r\n                    dstFactor: \"one\",\r\n                    operation: \"add\",\r\n                },\r\n                alpha: {\r\n                    srcFactor: \"one\",\r\n                    dstFactor: \"one\",\r\n                    operation: \"add\",\r\n                }\r\n            };\r\n            const pipelineDescriptor = this.createDeferredDescriptor(shaderModule, {\r\n                fragmentMain: \"main_fragment_b\",\r\n                bufferDescriptor: data.spheresBufferDescriptor,\r\n                writeMask: GPUColorWrite.BLUE,\r\n                blend: additiveBlend,\r\n            });\r\n            pipelineDescriptor.depthStencil = {\r\n                depthWriteEnabled: false,\r\n                depthCompare: \"less\",\r\n                format: webgpuCanvas.depthTextureFormat,\r\n            };\r\n            const pipeline = this.device.createRenderPipeline(pipelineDescriptor);\r\n            const uniformsBindgroup = this.device.createBindGroup({\r\n                layout: pipeline.getBindGroupLayout(0),\r\n                entries: [{\r\n                    binding: 0,\r\n                    resource: this.uniforms.bindingResource,\r\n                }]\r\n            });\r\n\r\n            this.bRenderPass = {\r\n                colorAttachment,\r\n                depthAttachment,\r\n                descriptor: renderPassDescriptor,\r\n                pipeline,\r\n                uniformsBindgroup,\r\n            };\r\n        }\r\n    }\r\n\r\n    public render(commandEncoder: GPUCommandEncoder, viewData: ViewData, data: RenderData): void {\r\n        this.uniforms.setValueFromName(\"vpMatrix\", viewData.vpMatrix);\r\n        this.uniforms.setValueFromName(\"mMatrix\", data.modelMatrix);\r\n        this.uniforms.setValueFromName(\"cameraUp\", viewData.cameraUp);\r\n        this.uniforms.setValueFromName(\"cameraRight\", viewData.cameraRight);\r\n        this.uniforms.setValueFromName(\"sphereRadius\", Parameters.spheresRadiusFactor * data.sphereRadius);\r\n        this.uniforms.setValueFromName(\"weightThreshold\", data.maxDisplayedWeight);\r\n        this.uniforms.uploadToGPU();\r\n\r\n        const renderPasses = [this.rgaRenderPass];\r\n        if (data.willUseWaterDepth) {\r\n            renderPasses.push(this.bRenderPass);\r\n        }\r\n\r\n        const width = this.texture.getWidth();\r\n        const height = this.texture.getHeight();\r\n        for (const renderPass of renderPasses) {\r\n            const renderpassEncoder = commandEncoder.beginRenderPass(renderPass.descriptor);\r\n            renderpassEncoder.setViewport(0, 0, width, height, 0, 1);\r\n            renderpassEncoder.setScissorRect(0, 0, width, height);\r\n            renderpassEncoder.setPipeline(renderPass.pipeline);\r\n            renderpassEncoder.setVertexBuffer(0, data.gpuBuffer);\r\n            renderpassEncoder.setBindGroup(0, renderPass.uniformsBindgroup);\r\n            renderpassEncoder.draw(6, data.instancesCount);\r\n            renderpassEncoder.end();\r\n        }\r\n    }\r\n\r\n    public setSize(width: number, height: number): boolean {\r\n        let somethingChanged = false;\r\n\r\n        const renderPasses = [this.rgaRenderPass, this.bRenderPass];\r\n\r\n        if (this.texture.setSize(width, height)) {\r\n            for (const renderPass of renderPasses) {\r\n                renderPass.colorAttachment.view = this.texture.getView();\r\n            }\r\n            somethingChanged = true;\r\n        }\r\n        if (this.foamTexture.setSize(width, height)) {\r\n            for (const renderPass of renderPasses) {\r\n                if (renderPass.foamAttachment) {\r\n                    renderPass.foamAttachment.view = this.foamTexture.getView();\r\n                }\r\n            }\r\n            somethingChanged = true;\r\n        }\r\n\r\n        if (this.depthTexture.setSize(width, height)) {\r\n            this.rgaRenderPass.depthAttachment.view = this.depthTexture.getView();\r\n            somethingChanged = true;\r\n        }\r\n\r\n        return somethingChanged;\r\n    }\r\n\r\n    public setSceneDepthTextureView(sceneDepthTextureView: GPUTextureView): void {\r\n        this.bRenderPass.depthAttachment.view = sceneDepthTextureView;\r\n    }\r\n\r\n    private createDeferredDescriptor(shaderModule: GPUShaderModule, data: DeferredDescriptorData): GPURenderPipelineDescriptor {\r\n        const targets: GPUColorTargetState[] = [];\r\n\r\n        const colorTarget: GPUColorTargetState = {\r\n            format: this.texture.format,\r\n            writeMask: data.writeMask,\r\n        };\r\n        if (data.blend) {\r\n            colorTarget.blend = data.blend;\r\n        }\r\n        targets.push(colorTarget);\r\n\r\n        if (data.foamTexture) {\r\n            targets.push({ format: data.foamTexture.format });\r\n        }\r\n\r\n        return {\r\n            layout: \"auto\",\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: data.bufferDescriptor.positionAttribute.offset,\r\n                                format: data.bufferDescriptor.positionAttribute.format,\r\n                            },\r\n                            {\r\n                                shaderLocation: 1,\r\n                                offset: data.bufferDescriptor.weightAttribute.offset,\r\n                                format: data.bufferDescriptor.weightAttribute.format,\r\n                            },\r\n                            {\r\n                                shaderLocation: 2,\r\n                                offset: data.bufferDescriptor.foamAttribute.offset,\r\n                                format: data.bufferDescriptor.foamAttribute.format,\r\n                            },\r\n                        ],\r\n                        arrayStride: data.bufferDescriptor.bufferArrayStride,\r\n                        stepMode: \"instance\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: data.fragmentMain,\r\n                targets,\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"triangle-list\",\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\nexport type {\r\n    Data,\r\n    RenderData,\r\n};\r\nexport {\r\n    Deferred,\r\n};\r\n\r\n","import { Parameters } from \"../../ui/parameters\";\r\nimport * as WebGPU from \"../../webgpu-utils/webgpu-utils\";\r\nimport { type ViewData } from \"../camera\";\r\nimport { Blur } from \"./blur\";\r\nimport { Composition, type RenderData as CompositionRenderData } from \"./composition\";\r\nimport { Deferred, type Data as DeferredData, type RenderData as DeferredRenderData } from \"./deferred\";\r\n\r\nclass SpheresRenderer {\r\n    private readonly webgpuCanvas: WebGPU.Canvas;\r\n    private readonly deferredRenderer: Deferred;\r\n    private readonly blur: Blur;\r\n    private readonly compositionRenderer: Composition;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas, data: DeferredData) {\r\n        this.webgpuCanvas = webgpuCanvas;\r\n        this.deferredRenderer = new Deferred(webgpuCanvas, data);\r\n\r\n        const texturesData = {\r\n            deferredTexture: this.deferredRenderer.texture,\r\n            foamTexture: this.deferredRenderer.foamTexture,\r\n        };\r\n        this.blur = new Blur(webgpuCanvas.device, texturesData);\r\n        this.compositionRenderer = new Composition(webgpuCanvas, texturesData);\r\n    }\r\n\r\n    public renderDeferred(commandEncoder: GPUCommandEncoder, viewData: ViewData, data: DeferredRenderData): void {\r\n        this.deferredRenderer.render(commandEncoder, viewData, data);\r\n\r\n        if (Parameters.blur) {\r\n            const screenScale = 0.25 * this.webgpuCanvas.height / 512;\r\n            this.blur.compute(commandEncoder, viewData.relativeDistance * screenScale);\r\n        }\r\n    }\r\n\r\n    public renderComposition(renderpassEncoder: GPURenderPassEncoder, viewData: ViewData, renderData: CompositionRenderData): void {\r\n        this.compositionRenderer.render(renderpassEncoder, viewData, renderData);\r\n    }\r\n\r\n    public setSize(width: number, height: number): boolean {\r\n        if (this.deferredRenderer.setSize(width, height)) {\r\n            const texturesData = {\r\n                deferredTexture: this.deferredRenderer.texture,\r\n                foamTexture: this.deferredRenderer.foamTexture,\r\n            };\r\n\r\n            this.blur.setDeferredTextures(texturesData);\r\n            this.compositionRenderer.setDeferredTexture(texturesData);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public setSceneDepthTextureView(sceneDepthTextureView: GPUTextureView): void {\r\n        this.deferredRenderer.setSceneDepthTextureView(sceneDepthTextureView);\r\n    }\r\n}\r\n\r\nexport {\r\n    SpheresRenderer,\r\n};\r\n\r\n","import * as glMatrix from \"gl-matrix\";\r\nimport { Engine } from \"./engine/engine\";\r\nimport { Mesh } from \"./engine/initial-conditions/models/mesh\";\r\nimport * as Models from \"./engine/initial-conditions/models/models\";\r\nimport { AxesRenderer } from \"./rendering/axes-renderer\";\r\nimport { ViewData } from \"./rendering/camera\";\r\nimport { CubeRenderer } from \"./rendering/cube-renderer\";\r\nimport { GridCellsByPopulationRenderer } from \"./rendering/grid-cells-by-population-renderer\";\r\nimport { GridCellsRenderer } from \"./rendering/grid-cells-renderer\";\r\nimport { MeshRenderable } from \"./rendering/mesh/mesh-renderable\";\r\nimport { MeshRenderer } from \"./rendering/mesh/mesh-renderer\";\r\nimport { SpheresRenderer } from \"./rendering/spheres/spheres-renderer\";\r\nimport * as Indicators from \"./ui/indicators\";\r\nimport { EDisplayMode, EDomainAnimationType, EGridDisplayMode, EObstacleAnimationType, EObstacleType, EParticlesQuantity, Parameters } from \"./ui/parameters\";\r\nimport * as WebGPU from \"./webgpu-utils/webgpu-utils\";\r\n\r\ntype Data = {\r\n    spheresRadius: number;\r\n    particlesQuantity: EParticlesQuantity;\r\n    obstacle: EObstacleType;\r\n};\r\n\r\nclass Scene {\r\n    private readonly webgpuCanvas: WebGPU.Canvas;\r\n\r\n    private readonly modelMatrix: glMatrix.mat4 = glMatrix.mat4.create();\r\n    private readonly mvpMatrix: glMatrix.mat4 = glMatrix.mat4.create();\r\n\r\n    private readonly engine: Engine;\r\n\r\n    private readonly axesRenderer: AxesRenderer;\r\n    private readonly cubeRenderer: CubeRenderer;\r\n    private readonly spheresRenderer: SpheresRenderer;\r\n    private readonly gridCellsRenderer: GridCellsRenderer;\r\n    private readonly gridCellsPerPopulationRenderer: GridCellsByPopulationRenderer;\r\n\r\n    private particlesContainerMesh: Mesh;\r\n    private obstaclesMesh: Mesh | null = null;\r\n\r\n    private readonly meshRenderer: MeshRenderer;\r\n    private readonly particlesMeshes: MeshRenderable[] = [];\r\n    private readonly obstacleMeshes: MeshRenderable[] = [];\r\n\r\n    private domainRotationPeriod: number = 0;\r\n    private domainContractionPeriod: number = 0;\r\n\r\n    public constructor(webgpuCanvas: WebGPU.Canvas, data: Data) {\r\n        this.webgpuCanvas = webgpuCanvas;\r\n\r\n        this.axesRenderer = new AxesRenderer(webgpuCanvas);\r\n        this.cubeRenderer = new CubeRenderer(webgpuCanvas);\r\n        this.spheresRenderer = new SpheresRenderer(webgpuCanvas, {\r\n            spheresBufferDescriptor: Engine.spheresBufferDescriptor,\r\n            sceneDepthTextureView: webgpuCanvas.depthTextureView,\r\n        });\r\n        this.meshRenderer = new MeshRenderer(webgpuCanvas);\r\n        this.gridCellsRenderer = new GridCellsRenderer(webgpuCanvas);\r\n        this.gridCellsPerPopulationRenderer = new GridCellsByPopulationRenderer(this.webgpuCanvas, Engine.cellBufferDescriptor);\r\n\r\n        this.particlesContainerMesh = Scene.loadParticlesMesh(data.particlesQuantity);\r\n        this.particlesMeshes.push(this.meshRenderer.createMeshRenderable(this.particlesContainerMesh));\r\n\r\n        this.obstaclesMesh = Scene.loadObstacleMesh(data.obstacle);\r\n        if (this.obstaclesMesh) {\r\n            this.obstacleMeshes.push(this.meshRenderer.createMeshRenderable(this.obstaclesMesh));\r\n        }\r\n\r\n        this.engine = new Engine(webgpuCanvas.device, {\r\n            particlesContainerMesh: this.particlesContainerMesh,\r\n            obstaclesMesh: this.obstaclesMesh,\r\n            spheresRadius: data.spheresRadius\r\n        });\r\n        Indicators.setParticlesCount(this.engine.spheresBuffer.instancesCount);\r\n        Indicators.setGridSize(this.engine.gridData.gridSize);\r\n    }\r\n\r\n    public update(commandEncoder: GPUCommandEncoder, dt: number): void {\r\n        const domainAnimation = Parameters.domainAnimation;\r\n        if (domainAnimation === EDomainAnimationType.ROTATION) {\r\n            this.domainRotationPeriod += 0.4 * dt;\r\n            Parameters.domainRotation = this.domainRotationPeriod;\r\n        } else {\r\n            this.domainRotationPeriod = Parameters.domainRotation;\r\n            if (domainAnimation === EDomainAnimationType.CONTRACT) {\r\n                this.domainContractionPeriod += 0.8 * dt;\r\n                Parameters.domainContraction = 0.2 + 0.8 * (0.5 + 0.5 * Math.cos(this.domainContractionPeriod));\r\n            }\r\n        }\r\n        const rotation = Parameters.domainRotation;\r\n        const gravity: glMatrix.vec3 = [0, Parameters.particlesGravity * Math.cos(rotation), Parameters.particlesGravity * Math.sin(rotation)];\r\n\r\n        if (Parameters.obstacleAnimation === EObstacleAnimationType.ROTATION) {\r\n            const rotationMatrix = glMatrix.mat4.create();\r\n            glMatrix.mat4.translate(rotationMatrix, rotationMatrix, [0.5, 0, 0.5]);\r\n            glMatrix.mat4.rotateY(rotationMatrix, rotationMatrix, 0.9 * dt);\r\n            glMatrix.mat4.translate(rotationMatrix, rotationMatrix, [-0.5, 0, -0.5]);\r\n\r\n            for (const mesh of this.obstacleMeshes) {\r\n                glMatrix.mat4.multiply(mesh.modelMatrix, mesh.modelMatrix, rotationMatrix);\r\n            }\r\n            this.engine.compute(commandEncoder, dt, gravity, rotationMatrix);\r\n        }\r\n        this.engine.compute(commandEncoder, dt, gravity);\r\n    }\r\n\r\n    public render(commandEncoder: GPUCommandEncoder, viewData: ViewData): void {\r\n        glMatrix.mat4.fromXRotation(this.modelMatrix, -Math.PI / 2 - Parameters.domainRotation);\r\n        glMatrix.mat4.translate(this.modelMatrix, this.modelMatrix, [-0.5, -0.5, -0.5]);\r\n        glMatrix.mat4.multiply(this.mvpMatrix, viewData.vpMatrix, this.modelMatrix);\r\n\r\n        const lightDirection: glMatrix.ReadonlyVec3 = [Math.SQRT1_2, 0, Math.SQRT1_2];\r\n\r\n        {\r\n            const renderpassEncoder = this.webgpuCanvas.beginRenderPass(commandEncoder);\r\n            const renderableMeshes: MeshRenderable[] = [];\r\n            if (Parameters.obstacleDisplayAsMesh) {\r\n                renderableMeshes.push(...this.obstacleMeshes);\r\n            }\r\n            if (Parameters.particlesDisplayAsMesh) {\r\n                renderableMeshes.push(...this.particlesMeshes);\r\n            }\r\n            this.meshRenderer.render(renderpassEncoder, {\r\n                meshes: renderableMeshes,\r\n                mvpMatrix: this.mvpMatrix,\r\n                modelMatrix: this.modelMatrix,\r\n                displayNormals: ![EDisplayMode.WATER, EDisplayMode.BALLS].includes(Parameters.displayMode),\r\n                lightDirection,\r\n            });\r\n            renderpassEncoder.end();\r\n        }\r\n\r\n        if (Parameters.particlesDisplay) {\r\n            this.spheresRenderer.setSceneDepthTextureView(this.webgpuCanvas.depthTextureView);\r\n            this.spheresRenderer.renderDeferred(commandEncoder, viewData, {\r\n                modelMatrix: this.modelMatrix,\r\n                gpuBuffer: this.engine.spheresBuffer.gpuBuffer,\r\n                instancesCount: this.engine.spheresBuffer.instancesCount,\r\n                sphereRadius: this.engine.spheresBuffer.sphereRadius,\r\n                maxDisplayedWeight: Engine.getMaxWeight(Parameters.obstacleDisplayAsSpheres),\r\n                willUseWaterDepth: [EDisplayMode.WATER_DEPTH, EDisplayMode.WATER].includes(Parameters.displayMode),\r\n            });\r\n        }\r\n\r\n        const renderpassEncoder = this.webgpuCanvas.beginRenderPass(commandEncoder, { clearColor: false, clearDepth: false });\r\n\r\n        if (Parameters.renderAxes) {\r\n            this.axesRenderer.render(renderpassEncoder, viewData);\r\n        }\r\n        if (Parameters.domainDisplay) {\r\n            this.cubeRenderer.render(renderpassEncoder, {\r\n                mvpMatrix: this.mvpMatrix,\r\n                proportions: [1, 1, Parameters.domainContraction],\r\n            });\r\n        }\r\n\r\n        if (Parameters.particlesDisplay) {\r\n            this.spheresRenderer.renderComposition(renderpassEncoder, viewData, { lightDirection });\r\n        }\r\n\r\n        switch (Parameters.renderGridCells) {\r\n            case EGridDisplayMode.FINAL:\r\n                this.gridCellsRenderer.render(renderpassEncoder, {\r\n                    mvpMatrix: this.mvpMatrix,\r\n                    buffers: this.engine.nonEmptyCellsBuffers,\r\n                    gridData: this.engine.gridData,\r\n                });\r\n                break;\r\n            case EGridDisplayMode.COLOR_BY_POPULATION:\r\n                this.gridCellsPerPopulationRenderer.render(renderpassEncoder, {\r\n                    mvpMatrix: this.mvpMatrix,\r\n                    gpuBuffer: this.engine.cellsBufferData.cellsBuffer.gpuBuffer,\r\n                    gridData: this.engine.gridData,\r\n                });\r\n                break;\r\n        }\r\n        renderpassEncoder.end();\r\n    }\r\n\r\n    public reinitialize(): void {\r\n        this.engine.reinitialize();\r\n        for (const mesh of this.obstacleMeshes) {\r\n            glMatrix.mat4.identity(mesh.modelMatrix);\r\n        }\r\n        this.reinitializeDomain();\r\n    }\r\n\r\n    public reinitializeDomain(): void {\r\n        this.domainRotationPeriod = 0;\r\n        this.domainContractionPeriod = 0;\r\n        Parameters.domainRotation = this.domainRotationPeriod;\r\n        Parameters.domainContraction = 1;\r\n    }\r\n\r\n    public setParticlesRadius(size: number): void {\r\n        this.engine.reset({\r\n            particlesContainerMesh: this.particlesContainerMesh,\r\n            obstaclesMesh: this.obstaclesMesh,\r\n            spheresRadius: size,\r\n        });\r\n        for (const mesh of this.obstacleMeshes) {\r\n            glMatrix.mat4.identity(mesh.modelMatrix);\r\n        }\r\n        Indicators.setParticlesCount(this.engine.spheresBuffer.instancesCount);\r\n        Indicators.setGridSize(this.engine.gridData.gridSize);\r\n    }\r\n\r\n    public setParticlesQuantity(quantity: EParticlesQuantity): void {\r\n        for (const renderableMesh of this.particlesMeshes) {\r\n            renderableMesh.free();\r\n        }\r\n        this.particlesMeshes.length = 0;\r\n\r\n        this.particlesContainerMesh = Scene.loadParticlesMesh(quantity);\r\n        this.particlesMeshes.push(this.meshRenderer.createMeshRenderable(this.particlesContainerMesh));\r\n        this.engine.reset({\r\n            particlesContainerMesh: this.particlesContainerMesh,\r\n            obstaclesMesh: this.obstaclesMesh,\r\n            spheresRadius: this.engine.spheresBuffer.sphereRadius,\r\n        });\r\n        for (const mesh of this.obstacleMeshes) {\r\n            glMatrix.mat4.identity(mesh.modelMatrix);\r\n        }\r\n        Indicators.setParticlesCount(this.engine.spheresBuffer.instancesCount);\r\n        Indicators.setGridSize(this.engine.gridData.gridSize);\r\n    }\r\n\r\n    public setObstacle(obstacle: EObstacleType): void {\r\n        for (const renderableMesh of this.obstacleMeshes) {\r\n            renderableMesh.free();\r\n        }\r\n        this.obstacleMeshes.length = 0;\r\n\r\n        this.obstaclesMesh = Scene.loadObstacleMesh(obstacle);\r\n        if (this.obstaclesMesh) {\r\n            this.obstacleMeshes.push(this.meshRenderer.createMeshRenderable(this.obstaclesMesh));\r\n        }\r\n\r\n        this.engine.reset({\r\n            particlesContainerMesh: this.particlesContainerMesh,\r\n            obstaclesMesh: this.obstaclesMesh,\r\n            spheresRadius: this.engine.spheresBuffer.sphereRadius,\r\n        });\r\n        for (const mesh of this.obstacleMeshes) {\r\n            glMatrix.mat4.identity(mesh.modelMatrix);\r\n        }\r\n        Indicators.setParticlesCount(this.engine.spheresBuffer.instancesCount);\r\n        Indicators.setGridSize(this.engine.gridData.gridSize);\r\n    }\r\n\r\n    public setCanvasSize(width: number, height: number): boolean {\r\n        return this.spheresRenderer.setSize(width, height);\r\n    }\r\n\r\n    private static loadParticlesMesh(quantity: EParticlesQuantity): Mesh {\r\n        switch (quantity) {\r\n            case EParticlesQuantity.S:\r\n                return Mesh.load(Models.Particles.S);\r\n            case EParticlesQuantity.X:\r\n                return Mesh.load(Models.Particles.X);\r\n            case EParticlesQuantity.XX:\r\n                return Mesh.load(Models.Particles.XX);\r\n            case EParticlesQuantity.XXX:\r\n                return Mesh.load(Models.Particles.XXX);\r\n            case EParticlesQuantity.XXXX:\r\n                return Mesh.load(Models.Particles.XXXX);\r\n            case EParticlesQuantity.XXXXX:\r\n                return Mesh.load(Models.Particles.XXXXX);\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n\r\n    private static loadObstacleMesh(obstacle: EObstacleType): Mesh | null {\r\n        switch (obstacle) {\r\n            case EObstacleType.NONE:\r\n                return null;\r\n            case EObstacleType.CAPSULES:\r\n                return Mesh.load(Models.Obstacles.Capsules);\r\n            case EObstacleType.HELIX:\r\n                return Mesh.load(Models.Obstacles.Helix);\r\n            case EObstacleType.PIERCED_FLOOR:\r\n                return Mesh.load(Models.Obstacles.PiercedFloor);\r\n            case EObstacleType.FUNNEL:\r\n                return Mesh.load(Models.Obstacles.Funnel);\r\n            case EObstacleType.CUP:\r\n                return Mesh.load(Models.Obstacles.Cup);\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Scene,\r\n};\r\n\r\n","/// <reference types=\"./webgpu-utils/wgsl-type\"/>\r\n\r\nimport CountParticlesPerCell from \"../shaders/engine/indexing/count-particles-per-cell.wgsl\";\r\nimport FinalizePrefixSum from \"../shaders/engine/indexing/finalize-prefix-sum.wgsl\";\r\nimport DownPass from \"../shaders/engine/indexing/prefix-sum/down-pass.wgsl\";\r\nimport Reduce from \"../shaders/engine/indexing/prefix-sum/reduce.wgsl\";\r\nimport PreparePrefixSum from \"../shaders/engine/indexing/prepare-prefix-sum.wgsl\";\r\nimport RenderCellsByPopulation from \"../shaders/engine/indexing/render-cells-by-population.wgsl\";\r\nimport ReorderParticles from \"../shaders/engine/indexing/reorder-particles.wgsl\";\r\nimport ResetCells from \"../shaders/engine/indexing/reset-cells.wgsl\";\r\n\r\nimport Acceleration from \"../shaders/engine/simulation/acceleration.wgsl\";\r\nimport Initialization from \"../shaders/engine/simulation/initialization.wgsl\";\r\nimport Integration from \"../shaders/engine/simulation/integration.wgsl\";\r\nimport ObstaclesRotation from \"../shaders/engine/simulation/obstacles-rotation.wgsl\";\r\n\r\nimport Axes from \"../shaders/rendering/axes.wgsl\";\r\nimport Cube from \"../shaders/rendering/cube.wgsl\";\r\nimport GridCells from \"../shaders/rendering/grid-cells.wgsl\";\r\nimport Mesh from \"../shaders/rendering/mesh.wgsl\";\r\nimport Blur from \"../shaders/rendering/spheres/blur.wgsl\";\r\nimport Composition from \"../shaders/rendering/spheres/composition.wgsl\";\r\nimport Spheres from \"../shaders/rendering/spheres/spheres.wgsl\";\r\n\r\nconst engine = {\r\n    Indexing: {\r\n        CountParticlesPerCell,\r\n        FinalizePrefixSum,\r\n        PreparePrefixSum,\r\n        RenderCellsByPopulation,\r\n        ReorderParticles,\r\n        ResetCells,\r\n        PrefixSum: {\r\n            DownPass,\r\n            Reduce,\r\n        },\r\n    },\r\n    Simulation: {\r\n        Acceleration,\r\n        Initialization,\r\n        Integration,\r\n        ObstaclesRotation,\r\n    },\r\n};\r\n\r\nconst rendering = {\r\n    Axes,\r\n    Cube,\r\n    GridCells,\r\n    Mesh,\r\n    Spheres: {\r\n        Blur,\r\n        Composition,\r\n        Spheres,\r\n    },\r\n};\r\n\r\nexport {\r\n    engine as Engine,\r\n    rendering as Rendering,\r\n};\r\n\r\n","type FpsCallback = (fps: number) => void;\r\n\r\nclass Counter {\r\n    private count: number = 0;\r\n    public onChange: FpsCallback | null = null;\r\n\r\n    public constructor() {\r\n        let lastUpdate = performance.now();\r\n        setInterval(() => {\r\n            const now = performance.now();\r\n            const dt = now - lastUpdate;\r\n            lastUpdate = now;\r\n\r\n            if (this.onChange) {\r\n                const countPerSeconds = 1000 * this.count / dt;\r\n                this.onChange(countPerSeconds);\r\n            }\r\n            this.count = 0;\r\n        }, 500);\r\n    }\r\n\r\n    public register(): void {\r\n        this.count++;\r\n    }\r\n}\r\n\r\nexport {\r\n    Counter,\r\n};\r\n\r\n","/// <reference types=\"../page-interface-generated\" />\r\n\r\nimport * as glMatrix from \"gl-matrix\";\r\n\r\nfunction setAverageFps(value: number): void {\r\n    Page.Canvas.setIndicatorText(\"average-fps\", `${value.toFixed()} fps`);\r\n}\r\n\r\nfunction setAverageIps(value: number): void {\r\n    Page.Canvas.setIndicatorText(\"average-ips\", `${value.toFixed()}`);\r\n}\r\n\r\nfunction setParticlesCount(value: number): void {\r\n    Page.Canvas.setIndicatorText(\"particles-count\", `${value.toLocaleString()}`);\r\n}\r\n\r\nfunction setGridSize(value: glMatrix.ReadonlyVec3): void {\r\n    Page.Canvas.setIndicatorText(\"grid\", `${value[0]}x${value[1]}x${value[2]} (${(value[0] * value[1] * value[2]).toLocaleString()} cells)`);\r\n}\r\n\r\nexport {\r\n    setAverageFps,\r\n    setAverageIps,\r\n    setGridSize,\r\n    setParticlesCount,\r\n};\r\n\r\n","/// <reference types=\"../page-interface-generated\" />\r\n\r\nconst controlId = {\r\n    ENGINE_PAUSE_CHECKBOX: \"engine-pause-checkbox-id\",\r\n    ENGINE_TIMESTEP_RANGE: \"engine-timestep-range-id\",\r\n    ENGINE_STEPS_PER_FRAME_RANGE: \"engine-iterations-per-frame-range-id\",\r\n\r\n    RENDER_BACKGROUND_COLORPICKER: \"render-background-color-id\",\r\n    RENDER_MODE_TABS: \"render-mode-tabs-id\",\r\n    RENDER_WATER_COLOR_COLORPICKER: \"render-water-color-id\",\r\n    RENDER_WATER_OPACITY_RANGE: \"render-water-opacity-range-id\",\r\n    RENDER_FOAM_CHECKBOX: \"render-foam-checkbox-id\",\r\n    RENDER_INDICATORS_CHECKBOX: \"render-indicators-checkbox-id\",\r\n    RENDER_AXES_CHECKBOX: \"render-axes-checkbox-id\",\r\n    RENDER_GRID_CELLS_SELECT: \"render-grid-cells-select-id\",\r\n    RENDER_PROJECTION_TABS: \"render-projection-tabs-id\",\r\n\r\n    PARTICLES_RADIUS_TABS: \"particles-radius-tabs-id\",\r\n    PARTICLES_QUANTITY_SELECT: \"particles-quantity-select-id\",\r\n    PARTICLES_GRAVITY_RANGE: \"particles-gravity-range-id\",\r\n    PARTICLES_DISPLAY_CHECKBOX: \"particles-display-checkbox-id\",\r\n    PARTICLES_RESET_BUTTON: \"particles-reset-button-id\",\r\n\r\n    OBSTACLE_SELECT: \"obstacles-select-id\",\r\n    OBSTACLE_ANIMATION_SELECT: \"obstacles-animation-select-id\",\r\n    OBSTACLE_MESH_CHECKBOX: \"obstacle-mesh-checkbox-id\",\r\n    OBSTACLE_SPHERES_CHECKBOX: \"obstacle-spheres-checkbox-id\",\r\n\r\n    DOMAIN_ANIMATION_SELECT: \"domain-animation-select-id\",\r\n    DOMAIN_ROTATION_RANGE: \"domain-rotation-range-id\",\r\n    DOMAIN_CONTRACTION_RANGE: \"domain-contraction-range-id\",\r\n    DOMAIN_DISPLAY_CHECKBOX: \"domain-display-checkbox-id\",\r\n    DOMAIN_RESET_BUTTON: \"domain-reset-button-id\",\r\n\r\n    DEBUG_BLUR_CHECKBOX: \"debug-blur-checkbox-id\",\r\n    DEBUG_SPHERES_RADIUS_RANGE: \"debug-spheres-radius-range-id\",\r\n    DEBUG_DISPLAY_MODE_SELECT: \"debug-display-mode-select-id\",\r\n    DEBUG_SPECULARITY_RANGE: \"debug-specularity-range-id\",\r\n    DEBUG_FRESNEL_RANGE: \"debug-fresnel-range-id\",\r\n};\r\n\r\nfunction updateIndicatorsVisibility(): void {\r\n    const shouldBeVisible = Page.Checkbox.isChecked(controlId.RENDER_INDICATORS_CHECKBOX);\r\n    Page.Canvas.setIndicatorsVisibility(shouldBeVisible);\r\n}\r\nPage.Checkbox.addObserver(controlId.RENDER_INDICATORS_CHECKBOX, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\ntype ColorNormalized = [number, number, number, number];\r\n\r\nfunction buildColor(id: string): ColorNormalized {\r\n    const color = Page.ColorPicker.getValue(id);\r\n    return [color.r / 255, color.g / 255, color.b / 255, 1];\r\n}\r\n\r\nenum EProjection {\r\n    ORTHO = \"ortho\",\r\n    PERSPECTIVE = \"perspective\",\r\n}\r\n\r\nenum EDisplayMode {\r\n    LOCAL_POSITION = 0,\r\n    CSREENSPACE_NORMALS = 1,\r\n    WORLDSPACE_NORMALS = 2,\r\n    WATER_DEPTH = 3,\r\n    WATER = 4,\r\n    DEPTH = 5,\r\n    BALLS = 6,\r\n}\r\n\r\nenum EGridDisplayMode {\r\n    HIDDEN = 0,\r\n    COLOR_BY_POPULATION = 1,\r\n    FINAL = 2,\r\n}\r\n\r\nenum EObstacleType {\r\n    NONE = \"none\",\r\n    CAPSULES = \"capsules\",\r\n    HELIX = \"helix\",\r\n    PIERCED_FLOOR = \"pierced-floor\",\r\n    FUNNEL = \"funnel\",\r\n    CUP = \"cup\",\r\n}\r\n\r\nenum EDomainAnimationType {\r\n    NONE = \"none\",\r\n    ROTATION = \"rotate\",\r\n    CONTRACT = \"contract\",\r\n}\r\n\r\nenum EObstacleAnimationType {\r\n    NONE = \"none\",\r\n    ROTATION = \"rotate\",\r\n}\r\n\r\nenum EParticlesQuantity {\r\n    S = \"s\",\r\n    X = \"x\",\r\n    XX = \"xx\",\r\n    XXX = \"xxx\",\r\n    XXXX = \"xxxx\",\r\n    XXXXX = \"xxxxx\",\r\n}\r\n\r\nconst isInDebug = new URLSearchParams(window.location.search).get(\"debug\") === \"1\";\r\n\r\nPage.Controls.setVisibility(controlId.PARTICLES_DISPLAY_CHECKBOX, isInDebug);\r\n\r\nPage.Controls.setVisibility(controlId.OBSTACLE_MESH_CHECKBOX, isInDebug);\r\nPage.Controls.setVisibility(controlId.OBSTACLE_SPHERES_CHECKBOX, isInDebug);\r\n\r\nPage.Controls.setVisibility(controlId.RENDER_FOAM_CHECKBOX, isInDebug);\r\nPage.Controls.setVisibility(controlId.RENDER_AXES_CHECKBOX, isInDebug);\r\nPage.Controls.setVisibility(controlId.RENDER_GRID_CELLS_SELECT, isInDebug);\r\nPage.Controls.setVisibility(controlId.RENDER_PROJECTION_TABS, isInDebug);\r\n\r\nabstract class Parameters {\r\n    public static readonly isInDebug: boolean = isInDebug;\r\n\r\n    public static readonly onParticlesQuantityChange: VoidFunction[] = [];\r\n    public static readonly onParticlesResetObservers: VoidFunction[] = [];\r\n    public static readonly onDomainResetObservers: VoidFunction[] = [];\r\n    public static readonly onParticlesRadiusChange: VoidFunction[] = [];\r\n    public static readonly onObstacleChange: VoidFunction[] = [];\r\n\r\n    public static get enginePaused(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ENGINE_PAUSE_CHECKBOX);\r\n    }\r\n    public static get engineTimestep(): number {\r\n        return Page.Range.getValue(controlId.ENGINE_TIMESTEP_RANGE);\r\n    }\r\n    public static get engineStepsPerFrame(): number {\r\n        return Page.Range.getValue(controlId.ENGINE_STEPS_PER_FRAME_RANGE);\r\n    }\r\n\r\n    public static get renderBackgroundColor(): ColorNormalized {\r\n        return buildColor(controlId.RENDER_BACKGROUND_COLORPICKER);\r\n    }\r\n    public static get renderWaterColor(): ColorNormalized {\r\n        return buildColor(controlId.RENDER_WATER_COLOR_COLORPICKER);\r\n    }\r\n    public static get renderWaterOpacity(): number {\r\n        return Page.Range.getValue(controlId.RENDER_WATER_OPACITY_RANGE);\r\n    }\r\n    public static get renderFoam(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.RENDER_FOAM_CHECKBOX);\r\n    }\r\n    public static get renderAxes(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.RENDER_AXES_CHECKBOX);\r\n    }\r\n    public static get renderGridCells(): EGridDisplayMode {\r\n        const value = Page.Select.getValue(controlId.RENDER_GRID_CELLS_SELECT);\r\n        if (!value) {\r\n            throw new Error();\r\n        }\r\n        return +value as EGridDisplayMode;\r\n    }\r\n    public static get renderProjection(): EProjection {\r\n        return Page.Tabs.getValues(controlId.RENDER_PROJECTION_TABS)[0] as EProjection;\r\n    }\r\n\r\n    public static get particlesRadius(): number {\r\n        const value = Page.Tabs.getValues(controlId.PARTICLES_RADIUS_TABS)[0];\r\n        if (!value) {\r\n            throw new Error();\r\n        }\r\n        return +value;\r\n    }\r\n    public static get particlesQuantity(): EParticlesQuantity {\r\n        const value = Page.Select.getValue(controlId.PARTICLES_QUANTITY_SELECT);\r\n        if (!value) {\r\n            throw new Error();\r\n        }\r\n        return value as EParticlesQuantity;\r\n    }\r\n    public static get particlesGravity(): number {\r\n        return Page.Range.getValue(controlId.PARTICLES_GRAVITY_RANGE);\r\n    }\r\n    public static get particlesDisplay(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.PARTICLES_DISPLAY_CHECKBOX);\r\n    }\r\n    public static get particlesDisplayAsMesh(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public static get obstacleType(): EObstacleType {\r\n        const value = Page.Select.getValue(controlId.OBSTACLE_SELECT);\r\n        if (!value) {\r\n            throw new Error();\r\n        }\r\n        return value as EObstacleType;\r\n    }\r\n    public static get obstacleAnimation(): EObstacleAnimationType {\r\n        const value = Page.Select.getValue(controlId.OBSTACLE_ANIMATION_SELECT);\r\n        if (!value) {\r\n            throw new Error();\r\n        }\r\n        return value as EObstacleAnimationType;\r\n    }\r\n    public static get obstacleDisplayAsMesh(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.OBSTACLE_MESH_CHECKBOX);\r\n    }\r\n    public static get obstacleDisplayAsSpheres(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.OBSTACLE_SPHERES_CHECKBOX);\r\n    }\r\n\r\n    public static get domainAnimation(): EDomainAnimationType {\r\n        const value = Page.Select.getValue(controlId.DOMAIN_ANIMATION_SELECT);\r\n        if (!value) {\r\n            throw new Error();\r\n        }\r\n        return value as EDomainAnimationType;\r\n    }\r\n    public static set domainRotation(value: number) {\r\n        const rotation = (180 * value / Math.PI) % 360;\r\n        Page.Range.setValue(controlId.DOMAIN_ROTATION_RANGE, rotation);\r\n    }\r\n    public static get domainRotation(): number {\r\n        return Math.PI * Page.Range.getValue(controlId.DOMAIN_ROTATION_RANGE) / 180;\r\n    }\r\n    public static set domainContraction(value: number) {\r\n        Page.Range.setValue(controlId.DOMAIN_CONTRACTION_RANGE, value);\r\n    }\r\n    public static get domainContraction(): number {\r\n        return Page.Range.getValue(controlId.DOMAIN_CONTRACTION_RANGE);\r\n    }\r\n    public static get domainDisplay(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.DOMAIN_DISPLAY_CHECKBOX);\r\n    }\r\n\r\n    public static get blur(): boolean {\r\n        if (Parameters.isInDebug) {\r\n            return Page.Checkbox.isChecked(controlId.DEBUG_BLUR_CHECKBOX);\r\n        } else {\r\n            return Parameters.displayMode === EDisplayMode.WATER;\r\n        }\r\n    }\r\n\r\n    public static get spheresRadiusFactor(): number {\r\n        return Page.Range.getValue(controlId.DEBUG_SPHERES_RADIUS_RANGE);\r\n    }\r\n\r\n    public static get displayMode(): EDisplayMode {\r\n        let value: string | null | undefined;\r\n        if (Parameters.isInDebug) {\r\n            value = Page.Select.getValue(controlId.DEBUG_DISPLAY_MODE_SELECT);\r\n        } else {\r\n            value = Page.Tabs.getValues(controlId.RENDER_MODE_TABS)[0];\r\n        }\r\n\r\n        if (!value) {\r\n            throw new Error();\r\n        }\r\n        return +value as EDisplayMode;\r\n    }\r\n\r\n    public static get waterSpecularity(): number {\r\n        return Page.Range.getValue(controlId.DEBUG_SPECULARITY_RANGE);\r\n    }\r\n\r\n    public static get waterFresnel(): number {\r\n        return Page.Range.getValue(controlId.DEBUG_FRESNEL_RANGE);\r\n    }\r\n}\r\n\r\nPage.Tabs.addObserver(controlId.PARTICLES_RADIUS_TABS, () => {\r\n    for (const observer of Parameters.onParticlesRadiusChange) {\r\n        observer();\r\n    }\r\n});\r\nPage.Select.addObserver(controlId.PARTICLES_QUANTITY_SELECT, () => {\r\n    updateObstacleAnimationVisibility();\r\n    for (const observer of Parameters.onParticlesQuantityChange) {\r\n        observer();\r\n    }\r\n});\r\nPage.Button.addObserver(controlId.PARTICLES_RESET_BUTTON, () => {\r\n    for (const observer of Parameters.onParticlesResetObservers) {\r\n        observer();\r\n    }\r\n});\r\n\r\nPage.Button.addObserver(controlId.DOMAIN_RESET_BUTTON, () => {\r\n    for (const observer of Parameters.onDomainResetObservers) {\r\n        observer();\r\n    }\r\n});\r\n\r\nfunction updateObstacleAnimationVisibility(): void {\r\n    Page.Controls.setVisibility(controlId.OBSTACLE_ANIMATION_SELECT, Parameters.obstacleType !== EObstacleType.NONE);\r\n}\r\nPage.Select.addObserver(controlId.OBSTACLE_SELECT, () => {\r\n    updateObstacleAnimationVisibility();\r\n    for (const observer of Parameters.onObstacleChange) {\r\n        observer();\r\n    }\r\n});\r\nupdateObstacleAnimationVisibility();\r\n\r\nfunction updateWaterControlsVisibility(): void {\r\n    const isWaterMode = Parameters.displayMode === EDisplayMode.WATER;\r\n    Page.Controls.setVisibility(controlId.RENDER_WATER_COLOR_COLORPICKER, isWaterMode);\r\n    Page.Controls.setVisibility(controlId.RENDER_WATER_OPACITY_RANGE, isWaterMode);\r\n}\r\nPage.Tabs.addObserver(controlId.RENDER_MODE_TABS, updateWaterControlsVisibility);\r\nupdateWaterControlsVisibility();\r\n\r\nPage.Sections.setVisibility(\"debug-section-id\", Parameters.isInDebug);\r\n\r\nexport {\r\n    EDisplayMode,\r\n    EDomainAnimationType,\r\n    EGridDisplayMode,\r\n    EObstacleAnimationType,\r\n    EParticlesQuantity,\r\n    EObstacleType,\r\n    EProjection,\r\n    Parameters,\r\n};\r\n\r\n","import { getPrintableSizeFromBytes } from \"./size\";\r\n\r\ntype MemoryAllocationData = {\r\n    objectType: string;\r\n    properties?: string;\r\n    objectSizeInBytes: number;\r\n};\r\n\r\nconst totalSizeByObjectTypes: Record<string, number> = {};\r\n\r\nfunction writeMemoryBreakdown(): void {\r\n    let result = \"GPU memory breakdown:\\n\";\r\n    for (const [objectType, objectSize] of Object.entries(totalSizeByObjectTypes)) {\r\n        const printableSize = getPrintableSizeFromBytes(objectSize);\r\n        result += `\\t- ${objectType}: ${printableSize}\\n`;\r\n    }\r\n    console.debug(result);\r\n}\r\n\r\nlet scheduledBreakdownId = -1;\r\nfunction scheduleBreakdown(): void {\r\n    if (scheduledBreakdownId > 0) {\r\n        clearTimeout(scheduledBreakdownId);\r\n    }\r\n    scheduledBreakdownId = window.setTimeout(() => {\r\n        writeMemoryBreakdown();\r\n        scheduledBreakdownId = -1;\r\n    }, 1000);\r\n}\r\n\r\nfunction buildName(data: MemoryAllocationData): string {\r\n    if (data?.properties) {\r\n        return `${data.objectType} (${data.properties})`;\r\n    }\r\n    return data.objectType;\r\n}\r\n\r\nfunction registerAllocation(data: MemoryAllocationData): void {\r\n    if (!totalSizeByObjectTypes[data.objectType]) {\r\n        totalSizeByObjectTypes[data.objectType] = 0;\r\n    }\r\n    totalSizeByObjectTypes[data.objectType] += data.objectSizeInBytes;\r\n\r\n    const name = buildName(data);\r\n    const objectPrintableSize = getPrintableSizeFromBytes(data.objectSizeInBytes);\r\n\r\n    console.debug(`Allocated ${name} of size ${objectPrintableSize}.`);\r\n    scheduleBreakdown();\r\n}\r\n\r\nfunction registerDestruction(data: MemoryAllocationData): void {\r\n    if (typeof totalSizeByObjectTypes[data.objectType] === \"undefined\") {\r\n        throw new Error(`Did not register any allocation for ${data.objectType}.`);\r\n    }\r\n    if (totalSizeByObjectTypes[data.objectType]! < data.objectSizeInBytes) {\r\n        throw new Error(`Invalid memory count for ${data.objectType}.`);\r\n    }\r\n    totalSizeByObjectTypes[data.objectType] -= data.objectSizeInBytes;\r\n\r\n    const name = buildName(data);\r\n    const objectPrintableSize = getPrintableSizeFromBytes(data.objectSizeInBytes);\r\n\r\n    console.debug(`Destroyed ${name} of size ${objectPrintableSize}.`);\r\n    scheduleBreakdown();\r\n}\r\n\r\nexport {\r\n    registerAllocation,\r\n    registerDestruction,\r\n};\r\n\r\n","function printSize(size: number): string {\r\n    const naive = size.toFixed(2);\r\n    if (naive.endsWith(\"00\")) {\r\n        return size.toFixed();\r\n    } else if (naive.endsWith(\"0\")) {\r\n        return size.toFixed(1);\r\n    }\r\n    return naive;\r\n}\r\n\r\nfunction getPrintableSize(size: number, units: string[]): string {\r\n    if (size < 1024 || units.length === 1) {\r\n        return `${printSize(size)}${units[0]}`;\r\n    }\r\n    return getPrintableSize(size / 1024, units.slice(1));\r\n}\r\n\r\nfunction getPrintableSizeFromBytes(sizeInBytes: number): string {\r\n    return getPrintableSize(sizeInBytes, [\"B\", \"KB\", \"MB\", \"GB\"]);\r\n}\r\n\r\nfunction getPrintableSizeFromKiloBytes(sizeInKiloBytes: number): string {\r\n    return getPrintableSize(sizeInKiloBytes, [\"KB\", \"MB\", \"GB\"]);\r\n}\r\n\r\nfunction getPrintableSizeFromMegaBytes(sizeInMegaBytes: number): string {\r\n    return getPrintableSize(sizeInMegaBytes, [\"MB\", \"GB\"]);\r\n}\r\n\r\nfunction getPrintableSizeFromGigaBytes(sizeInGigaBytes: number): string {\r\n    return getPrintableSize(sizeInGigaBytes, [\"GB\"]);\r\n}\r\n\r\nexport {\r\n    getPrintableSizeFromBytes,\r\n    getPrintableSizeFromKiloBytes,\r\n    getPrintableSizeFromMegaBytes,\r\n    getPrintableSizeFromGigaBytes,\r\n};\r\n\r\n","function* iterateOnAllPermutations<T>(array: T[]): Generator<T[]> {\r\n    for (let i = 0; i < array.length; i++) {\r\n        const currentElement = array[i]!;\r\n\r\n        const remainingElements = array.filter((_value: T, index: number) => index !== i);\r\n        if (remainingElements.length === 0) {\r\n            yield array;\r\n        } else {\r\n            for (const subPermutation of iterateOnAllPermutations(remainingElements)) {\r\n                yield [currentElement, ...subPermutation];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    iterateOnAllPermutations,\r\n};\r\n\r\n","import { type Type } from \"./base-type\";\r\nimport { roundUp } from \"./helpers\";\r\n\r\ntype Constructor<T> = {\r\n    new(): T;\r\n};\r\n\r\nclass ArrayType<T extends Type> implements Type {\r\n    public readonly typeName: string;\r\n    public readonly align: number;\r\n    public readonly size: number;\r\n\r\n    private readonly elements: ReadonlyArray<Type>;\r\n    private readonly stride: number;\r\n\r\n    public constructor(subTypeConstructor: Constructor<T>, n: number) {\r\n        const elements: Type[] = [];\r\n        for (let i = 0; i < n; i++) {\r\n            elements.push(new subTypeConstructor());\r\n        }\r\n        const firstElement = elements[0];\r\n        if (!firstElement) {\r\n            throw new Error(`Invalid array size '${n}'.`);\r\n        }\r\n\r\n        this.typeName = `array<${firstElement.typeName}, ${n}>`;\r\n        this.align = firstElement.align;\r\n        this.stride = roundUp(firstElement.align, firstElement.size);\r\n        this.size = elements.length * this.stride;\r\n\r\n        this.elements = elements;\r\n    }\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (!Array.isArray(value) || value.length !== this.elements.length) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        const valuesArray = value as unknown[];\r\n\r\n        valuesArray.forEach((arrayValue: unknown, index: number) => {\r\n            const element = this.elements[index];\r\n            if (!element) {\r\n                throw new Error();\r\n            }\r\n\r\n            const localOffset = index * this.stride;\r\n            element.setValue(arrayBuffer, offset + localOffset, arrayValue);\r\n        });\r\n    }\r\n}\r\n\r\nexport {\r\n    ArrayType,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\n\r\nclass AtomicI32 implements Type {\r\n    public readonly typeName: string = \"atomic<i32>\";\r\n    public readonly gpuVertexFormat: GPUVertexFormat = \"sint32\";\r\n    public readonly align: number = 4;\r\n    public readonly size: number = 4;\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (typeof value !== \"number\" || !Number.isInteger(value)) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n\r\n        new Int32Array(arrayBuffer, offset, 1).set([value]);\r\n    }\r\n}\r\n\r\nconst atomicI32 = new AtomicI32();\r\n\r\nexport {\r\n    atomicI32,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\n\r\nclass AtomicU32 implements Type {\r\n    public readonly typeName: string = \"atomic<u32>\";\r\n    public readonly gpuVertexFormat: GPUVertexFormat = \"uint32\";\r\n    public readonly align: number = 4;\r\n    public readonly size: number = 4;\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (typeof value !== \"number\" || !Number.isInteger(value) || value < 0) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n\r\n        new Uint32Array(arrayBuffer, offset, 1).set([value]);\r\n    }\r\n}\r\n\r\nconst atomicU32 = new AtomicU32();\r\n\r\nexport {\r\n    atomicU32,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\n\r\nclass F32 implements Type {\r\n    public readonly typeName: string = \"f32\";\r\n    public readonly gpuVertexFormat: GPUVertexFormat = \"float32\";\r\n    public readonly align: number = 4;\r\n    public readonly size: number = 4;\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (typeof value !== \"number\") {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        new Float32Array(arrayBuffer, offset, 1).set([value]);\r\n    }\r\n}\r\n\r\nconst f32 = new F32();\r\n\r\nexport {\r\n    f32,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\n\r\nclass I32 implements Type {\r\n    public readonly typeName: string = \"i32\";\r\n    public readonly gpuVertexFormat: GPUVertexFormat = \"sint32\";\r\n    public readonly align: number = 4;\r\n    public readonly size: number = 4;\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (typeof value !== \"number\" || !Number.isInteger(value)) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        new Int32Array(arrayBuffer, offset, 1).set([value]);\r\n    }\r\n}\r\n\r\nconst i32 = new I32();\r\n\r\nexport {\r\n    i32,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\nimport { isArrayLike } from \"../helpers\";\r\n\r\nclass Mat2x2 implements Type {\r\n    public readonly typeName: string = \"mat2x2<f32>\";\r\n    public readonly align: number = 8;\r\n    public readonly size: number = 16;\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (!isArrayLike(value)) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        const valueAsArray = value as ArrayLike<unknown>;\r\n        if (valueAsArray.length !== 2 * 2) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n\r\n        const values = valueAsArray as unknown[];\r\n        for (const val of values) {\r\n            if (typeof val !== \"number\") {\r\n                throw new Error(`Invalid value '${value}'.`);\r\n            }\r\n        }\r\n        new Float32Array(arrayBuffer, offset, 2 * 2).set(values as ArrayLike<number>);\r\n    }\r\n}\r\n\r\nconst mat2x2 = new Mat2x2();\r\n\r\nexport {\r\n    mat2x2,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\nimport { isArrayLike } from \"../helpers\";\r\n\r\nclass Mat4x4 implements Type {\r\n    public readonly typeName: string = \"mat4x4<f32>\";\r\n    public readonly align: number = 16;\r\n    public readonly size: number = 64;\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (!isArrayLike(value)) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        const valueAsArray = value as ArrayLike<unknown>;\r\n        if (valueAsArray.length !== 4 * 4) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n\r\n        const values = valueAsArray as unknown[];\r\n        for (const val of values) {\r\n            if (typeof val !== \"number\") {\r\n                throw new Error(`Invalid value '${value}'.`);\r\n            }\r\n        }\r\n        new Float32Array(arrayBuffer, offset, 4 * 4).set(values as ArrayLike<number>);\r\n    }\r\n}\r\n\r\nconst mat4x4 = new Mat4x4();\r\n\r\nexport {\r\n    mat4x4,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\n\r\nclass U32 implements Type {\r\n    public readonly typeName: string = \"u32\";\r\n    public readonly gpuVertexFormat: GPUVertexFormat = \"uint32\";\r\n    public readonly align: number = 4;\r\n    public readonly size: number = 4;\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (typeof value !== \"number\" || !Number.isInteger(value) || value < 0) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        new Uint32Array(arrayBuffer, offset, 1).set([value]);\r\n    }\r\n}\r\n\r\nconst u32 = new U32();\r\n\r\nexport {\r\n    u32,\r\n};\r\n\r\n","import { VecXF32 } from \"./vecx-f32\";\r\n\r\nconst vec2F32 = new VecXF32(2, 8, 8);\r\n\r\nexport {\r\n    vec2F32,\r\n};\r\n\r\n","import { VecXI32 } from \"./vecx-i32\";\r\n\r\nconst vec2I32 = new VecXI32(2, 8, 8);\r\n\r\nexport {\r\n    vec2I32,\r\n};\r\n\r\n","import { VecXU32 } from \"./vecx-u32\";\r\n\r\nconst vec2U32 = new VecXU32(2, 8, 8);\r\n\r\nexport {\r\n    vec2U32,\r\n};\r\n\r\n","import { VecXF32 } from \"./vecx-f32\";\r\n\r\nconst vec3F32 = new VecXF32(3, 16, 12);\r\n\r\nexport {\r\n    vec3F32,\r\n};\r\n\r\n","import { VecXI32 } from \"./vecx-i32\";\r\n\r\nconst vec3I32 = new VecXI32(3, 16, 12);\r\n\r\nexport {\r\n    vec3I32,\r\n};\r\n\r\n","import { VecXU32 } from \"./vecx-u32\";\r\n\r\nconst vec3U32 = new VecXU32(3, 16, 12);\r\n\r\nexport {\r\n    vec3U32,\r\n};\r\n\r\n","import { VecXF32 } from \"./vecx-f32\";\r\n\r\nconst vec4F32 = new VecXF32(4, 16, 16);\r\n\r\nexport {\r\n    vec4F32,\r\n};\r\n\r\n","import { VecXI32 } from \"./vecx-i32\";\r\n\r\nconst vec4I32 = new VecXI32(4, 16, 16);\r\n\r\nexport {\r\n    vec4I32,\r\n};\r\n\r\n","import { VecXU32 } from \"./vecx-u32\";\r\n\r\nconst vec4U32 = new VecXU32(4, 16, 16);\r\n\r\nexport {\r\n    vec4U32,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\nimport { isArrayLike } from \"../helpers\";\r\n\r\nclass VecXF32 implements Type {\r\n    public readonly typeName: string;\r\n    public readonly gpuVertexFormat: GPUVertexFormat;\r\n    public readonly align: number;\r\n    public readonly size: number;\r\n    private readonly n: number;\r\n\r\n    public constructor(n: 2 | 3 | 4, align: number, size: number) {\r\n        this.typeName = `vec${n}<f32>`;\r\n        this.gpuVertexFormat = `float32x${n}`;\r\n        this.align = align;\r\n        this.size = size;\r\n\r\n        this.n = n;\r\n    }\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (!isArrayLike(value)) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        const valueAsArray = value as unknown[];\r\n        if (valueAsArray.length !== this.n) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n\r\n        for (const val of valueAsArray) {\r\n            if (typeof val !== \"number\") {\r\n                throw new Error(`Invalid value '${value}'.`);\r\n            }\r\n        }\r\n        new Float32Array(arrayBuffer, offset, this.n).set(valueAsArray as ArrayLike<number>);\r\n    }\r\n}\r\n\r\nexport {\r\n    VecXF32,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\nimport { isArrayLike } from \"../helpers\";\r\n\r\nclass VecXI32 implements Type {\r\n    public readonly typeName: string;\r\n    public readonly gpuVertexFormat: GPUVertexFormat;\r\n    public readonly align: number;\r\n    public readonly size: number;\r\n    private readonly n: number;\r\n\r\n    public constructor(n: 2 | 3 | 4, align: number, size: number) {\r\n        this.typeName = `vec${n}<i32>`;\r\n        this.gpuVertexFormat = `sint32x${n}`;\r\n        this.align = align;\r\n        this.size = size;\r\n\r\n        this.n = n;\r\n    }\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (!isArrayLike(value)) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        const valueAsArray = value as unknown[];\r\n        if (valueAsArray.length !== this.n) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n\r\n        for (const val of valueAsArray) {\r\n            if (typeof val !== \"number\" || !Number.isInteger(val)) {\r\n                throw new Error(`Invalid value '${value}'.`);\r\n            }\r\n        }\r\n        new Int32Array(arrayBuffer, offset, this.n).set(valueAsArray as ArrayLike<number>);\r\n    }\r\n}\r\n\r\nexport {\r\n    VecXI32,\r\n};\r\n\r\n","import { type Type } from \"../base-type\";\r\nimport { isArrayLike } from \"../helpers\";\r\n\r\nclass VecXU32 implements Type {\r\n    public readonly typeName: string;\r\n    public readonly gpuVertexFormat: GPUVertexFormat;\r\n    public readonly align: number;\r\n    public readonly size: number;\r\n    private readonly n: number;\r\n\r\n    public constructor(n: 2 | 3 | 4, align: number, size: number) {\r\n        this.typeName = `vec${n}<u32>`;\r\n        this.gpuVertexFormat = `uint32x${n}`;\r\n        this.align = align;\r\n        this.size = size;\r\n\r\n        this.n = n;\r\n    }\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (!isArrayLike(value)) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        const valueAsArray = value as unknown[];\r\n        if (valueAsArray.length !== this.n) {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n\r\n        for (const val of valueAsArray) {\r\n            if (typeof val !== \"number\" || !Number.isInteger(val) || val < 0) {\r\n                throw new Error(`Invalid value '${value}'.`);\r\n            }\r\n        }\r\n        new Uint32Array(arrayBuffer, offset, this.n).set(valueAsArray as ArrayLike<number>);\r\n    }\r\n}\r\n\r\nexport {\r\n    VecXU32,\r\n};\r\n\r\n","function roundUp(k: number, n: number): number {\r\n    return Math.ceil(n / k) * k;\r\n}\r\n\r\nfunction isArrayLike(value: unknown): boolean {\r\n    return Array.isArray(value) || ArrayBuffer.isView(value);\r\n}\r\n\r\nexport {\r\n    isArrayLike,\r\n    roundUp,\r\n};\r\n\r\n","import { StructType } from \"./struct-type\";\r\nimport { u32 } from \"./types\";\r\n\r\nconst indirectDrawBufferType = new StructType(\"IndirectDrawBuffer\", [\r\n    { name: \"vertexCount\", type: u32 },\r\n    { name: \"instancesCount\", type: u32 },\r\n    { name: \"firstVertex\", type: u32 },\r\n    { name: \"firstInstance\", type: u32 },\r\n]);\r\n\r\nexport {\r\n    indirectDrawBufferType,\r\n};\r\n\r\n","import { type Type } from \"./base-type\";\r\nimport { roundUp } from \"./helpers\";\r\n\r\ntype AttributeDefinition = {\r\n    readonly name: string;\r\n    readonly type: Type;\r\n    readonly customAlign?: number;\r\n    readonly customSize?: number;\r\n};\r\n\r\ntype Attribute = {\r\n    readonly name: string;\r\n    readonly type: Type;\r\n    readonly align: number;\r\n    readonly size: number;\r\n    readonly offset: number;\r\n    readonly customAlign?: number | undefined;\r\n    readonly customSize?: number | undefined;\r\n};\r\n\r\ntype VertexAttribute = {\r\n    format: GPUVertexFormat;\r\n    offset: number;\r\n};\r\n\r\nclass StructType implements Type {\r\n    public readonly typeName: string;\r\n    public readonly align: number;\r\n    public readonly size: number;\r\n    private readonly name: string;\r\n    private readonly attributes: ReadonlyArray<Attribute>;\r\n\r\n    public constructor(structName: string, attributesDefinitions: AttributeDefinition[]) {\r\n        const attributes: Attribute[] = [];\r\n        attributesDefinitions.forEach((attributeDefinition: AttributeDefinition, index: number) => {\r\n            const name = attributeDefinition.name;\r\n\r\n            for (const knownAttribute of attributes) {\r\n                if (knownAttribute.name === name) {\r\n                    throw new Error(`Duplicate attribute name '${name}'.`);\r\n                }\r\n            }\r\n\r\n            let align: number;\r\n            const customAlign = attributeDefinition.customAlign;\r\n            if (typeof customAlign === \"number\") {\r\n                if (customAlign < attributeDefinition.type.align) {\r\n                    throw new Error(`Custom align '${customAlign}' is supposed to be bigger than default '${attributeDefinition.type.align}' for '${name}' type '${attributeDefinition.type.typeName}'.`);\r\n                }\r\n                align = customAlign;\r\n            } else {\r\n                align = attributeDefinition.type.align;\r\n            }\r\n\r\n            let size: number;\r\n            const customSize = attributeDefinition.customSize;\r\n            if (typeof customSize === \"number\") {\r\n                if (customSize < attributeDefinition.type.size) {\r\n                    throw new Error(`Custom size '${customSize}' is supposed to be bigger than default '${attributeDefinition.type.size}' for '${name}' type '${attributeDefinition.type.typeName}'.`);\r\n                }\r\n                size = customSize;\r\n            } else {\r\n                size = attributeDefinition.type.size;\r\n            }\r\n\r\n            let offset = 0;\r\n            const previousAttribute = attributes[index - 1];\r\n            if (previousAttribute) {\r\n                offset = roundUp(align, previousAttribute.offset + previousAttribute.size);\r\n            }\r\n\r\n            attributes.push({\r\n                name,\r\n                type: attributeDefinition.type,\r\n                align,\r\n                size,\r\n                offset,\r\n                customAlign,\r\n                customSize,\r\n            });\r\n        });\r\n\r\n        let align = -1;\r\n        for (const attribute of attributes) {\r\n            align = Math.max(align, attribute.align);\r\n        }\r\n\r\n        const lastAttribute = attributes[attributes.length - 1];\r\n        if (!lastAttribute) {\r\n            throw new Error(`Struct should have at least 1 attribute.`);\r\n        }\r\n        const size = roundUp(align, lastAttribute.offset + lastAttribute.size);\r\n\r\n        this.typeName = `struct ${structName}`;\r\n        this.align = align;\r\n        this.size = size;\r\n        this.name = structName;\r\n        this.attributes = attributes;\r\n    }\r\n\r\n    public setValue(arrayBuffer: ArrayBuffer, offset: number, value: unknown): void {\r\n        if (typeof value !== \"object\") {\r\n            throw new Error(`Invalid value '${value}'.`);\r\n        }\r\n        const valueAsObject = value as object;\r\n        for (const [attributeName, attributeValue] of Object.entries(valueAsObject)) {\r\n            this.setValueFromName(arrayBuffer, offset, attributeName, attributeValue);\r\n        }\r\n    }\r\n\r\n    public setValueFromName(arrayBuffer: ArrayBuffer, offset: number, attributeName: string, attributeValue: unknown): void {\r\n        for (const attribute of this.attributes) {\r\n            if (attribute.name === attributeName) {\r\n                attribute.type.setValue(arrayBuffer, offset + attribute.offset, attributeValue);\r\n                return;\r\n            }\r\n        }\r\n        throw new Error(`Unknown struct attribute '${attributeName}'.`);\r\n    }\r\n\r\n    public asVertexAttribute(attributeName: string): VertexAttribute {\r\n        for (const attribute of this.attributes) {\r\n            if (attribute.name === attributeName) {\r\n                if (!attribute.type.gpuVertexFormat) {\r\n                    throw new Error(`Unsupported attribute type '${attribute.type.typeName}'.`);\r\n                }\r\n\r\n                return {\r\n                    format: attribute.type.gpuVertexFormat,\r\n                    offset: attribute.offset,\r\n                };\r\n            }\r\n        }\r\n        throw new Error(`Unknown attribute '${attributeName}'.`);\r\n    }\r\n\r\n    public toString(): string {\r\n        const attributesStringData = this.attributes.map(attribute => {\r\n            let declaration = \"    \";\r\n            if (typeof attribute.customAlign === \"number\") {\r\n                declaration += `@align(${attribute.customAlign}) `;\r\n            }\r\n            if (typeof attribute.customSize === \"number\") {\r\n                declaration += `@size(${attribute.customSize}) `;\r\n            }\r\n            declaration += `${attribute.name}: ${attribute.type.typeName},`;\r\n            const offsetComment = `offset(${attribute.offset})`;\r\n            const alignComment = `align(${attribute.align})`;\r\n            const sizeComment = `size(${attribute.size})`;\r\n            return {\r\n                declaration,\r\n                offsetComment,\r\n                alignComment,\r\n                sizeComment,\r\n            };\r\n        });\r\n\r\n        const structDeclaration = `struct ${this.name} {`;\r\n        const structAlignComment = `align(${this.align})`;\r\n        const structSizeComment = `size(${this.size})`;\r\n\r\n        let maxDeclarationSize = structDeclaration.length;\r\n        let maxOffsetCommentSize = 0;\r\n        let maxAlignCommentSize = structAlignComment.length;\r\n        let maxSizeCommentSize = structSizeComment.length;\r\n        for (const attributeAsString of attributesStringData) {\r\n            maxDeclarationSize = Math.max(maxDeclarationSize, attributeAsString.declaration.length);\r\n            maxOffsetCommentSize = Math.max(maxOffsetCommentSize, attributeAsString.offsetComment.length);\r\n            maxAlignCommentSize = Math.max(maxAlignCommentSize, attributeAsString.alignComment.length);\r\n            maxSizeCommentSize = Math.max(maxSizeCommentSize, attributeAsString.sizeComment.length);\r\n        }\r\n\r\n        const attributesString = attributesStringData.map(attributeStringData => {\r\n            return `${attributeStringData.declaration.padEnd(maxDeclarationSize, \" \")} // ${attributeStringData.offsetComment.padEnd(maxOffsetCommentSize, \" \")} ${attributeStringData.alignComment.padEnd(maxAlignCommentSize, \" \")} ${attributeStringData.sizeComment.padEnd(maxSizeCommentSize, \" \")}`;\r\n        }).join(\"\\n\");\r\n        return `${structDeclaration.padEnd(maxDeclarationSize, \" \")} // ${\" \".repeat(maxOffsetCommentSize)} ${structAlignComment.padEnd(maxAlignCommentSize, \" \")} ${structSizeComment.padEnd(maxSizeCommentSize, \" \")}\r\n${attributesString}\r\n};`;\r\n    }\r\n\r\n    public isCompact(): boolean {\r\n        let attributesTotalSize = 0;\r\n        for (const attribute of this.attributes) {\r\n            attributesTotalSize += attribute.size;\r\n        }\r\n        return this.size === attributesTotalSize;\r\n    }\r\n}\r\n\r\nexport type {\r\n    AttributeDefinition,\r\n    VertexAttribute,\r\n};\r\nexport {\r\n    StructType,\r\n};\r\n\r\n","export { ArrayType } from \"./array-type\";\r\nexport type { Type } from \"./base-type\";\r\nexport { atomicI32 } from \"./base-types/atomic-i32\";\r\nexport { atomicU32 } from \"./base-types/atomic-u32\";\r\nexport { f32 } from \"./base-types/f32\";\r\nexport { i32 } from \"./base-types/i32\";\r\nexport { mat2x2 } from \"./base-types/mat2x2\";\r\nexport { mat4x4 } from \"./base-types/mat4x4\";\r\nexport { u32 } from \"./base-types/u32\";\r\nexport { vec2F32 } from \"./base-types/vec2-f32\";\r\nexport { vec2I32 } from \"./base-types/vec2-i32\";\r\nexport { vec2U32 } from \"./base-types/vec2-u32\";\r\nexport { vec3F32 } from \"./base-types/vec3-f32\";\r\nexport { vec3I32 } from \"./base-types/vec3-i32\";\r\nexport { vec3U32 } from \"./base-types/vec3-u32\";\r\nexport { vec4F32 } from \"./base-types/vec4-f32\";\r\nexport { vec4I32 } from \"./base-types/vec4-i32\";\r\nexport { vec4U32 } from \"./base-types/vec4-u32\";\r\nexport { indirectDrawBufferType } from \"./indirect-draw-buffer-type\";\r\nexport { StructType, type VertexAttribute } from \"./struct-type\";\r\n\r\n","type TextureType = {\r\n    texelSize: number;\r\n};\r\n\r\nconst textureTypes: Record<GPUTextureFormat, TextureType> = {\r\n    \"r8unorm\": { texelSize: 1 },\r\n    \"r8snorm\": { texelSize: 1 },\r\n    \"r8uint\": { texelSize: 1 },\r\n    \"r8sint\": { texelSize: 1 },\r\n    \"r16uint\": { texelSize: 2 },\r\n    \"r16sint\": { texelSize: 2 },\r\n    \"r16float\": { texelSize: 2 },\r\n    \"rg8unorm\": { texelSize: 2 },\r\n    \"rg8snorm\": { texelSize: 2 },\r\n    \"rg8uint\": { texelSize: 2 },\r\n    \"rg8sint\": { texelSize: 2 },\r\n    \"r32uint\": { texelSize: 4 },\r\n    \"r32sint\": { texelSize: 4 },\r\n    \"r32float\": { texelSize: 4 },\r\n    \"rg16uint\": { texelSize: 4 },\r\n    \"rg16sint\": { texelSize: 4 },\r\n    \"rg16float\": { texelSize: 4 },\r\n    \"rgba8unorm\": { texelSize: 4 },\r\n    \"rgba8unorm-srgb\": { texelSize: 4 },\r\n    \"rgba8snorm\": { texelSize: 4 },\r\n    \"rgba8uint\": { texelSize: 4 },\r\n    \"rgba8sint\": { texelSize: 4 },\r\n    \"bgra8unorm\": { texelSize: 4 },\r\n    \"bgra8unorm-srgb\": { texelSize: 4 },\r\n    \"rgb9e5ufloat\": { texelSize: 4 },\r\n    \"rgb10a2unorm\": { texelSize: 4 },\r\n    \"rg11b10ufloat\": { texelSize: 4 },\r\n    \"rg32uint\": { texelSize: 8 },\r\n    \"rg32sint\": { texelSize: 8 },\r\n    \"rg32float\": { texelSize: 8 },\r\n    \"rgba16uint\": { texelSize: 8 },\r\n    \"rgba16sint\": { texelSize: 8 },\r\n    \"rgba16float\": { texelSize: 8 },\r\n    \"rgba32uint\": { texelSize: 16 },\r\n    \"rgba32sint\": { texelSize: 16 },\r\n    \"rgba32float\": { texelSize: 16 },\r\n    \"stencil8\": { texelSize: 1 }, // 1-4\r\n    \"depth16unorm\": { texelSize: 2 },\r\n    \"depth24plus\": { texelSize: 4 },\r\n    \"depth24plus-stencil8\": { texelSize: 4 }, // 4-8\r\n    \"depth32float\": { texelSize: 4 },\r\n    \"depth32float-stencil8\": { texelSize: 5 }, // 5-8\r\n    \"bc1-rgba-unorm\": { texelSize: 8 },\r\n    \"bc1-rgba-unorm-srgb\": { texelSize: 8 },\r\n    \"bc2-rgba-unorm\": { texelSize: 16 },\r\n    \"bc2-rgba-unorm-srgb\": { texelSize: 16 },\r\n    \"bc3-rgba-unorm\": { texelSize: 16 },\r\n    \"bc3-rgba-unorm-srgb\": { texelSize: 16 },\r\n    \"bc4-r-unorm\": { texelSize: 8 },\r\n    \"bc4-r-snorm\": { texelSize: 8 },\r\n    \"bc5-rg-unorm\": { texelSize: 16 },\r\n    \"bc5-rg-snorm\": { texelSize: 16 },\r\n    \"bc6h-rgb-ufloat\": { texelSize: 16 },\r\n    \"bc6h-rgb-float\": { texelSize: 16 },\r\n    \"bc7-rgba-unorm\": { texelSize: 16 },\r\n    \"bc7-rgba-unorm-srgb\": { texelSize: 16 },\r\n    \"etc2-rgb8unorm\": { texelSize: 8 },\r\n    \"etc2-rgb8unorm-srgb\": { texelSize: 8 },\r\n    \"etc2-rgb8a1unorm\": { texelSize: 8 },\r\n    \"etc2-rgb8a1unorm-srgb\": { texelSize: 8 },\r\n    \"etc2-rgba8unorm\": { texelSize: 16 },\r\n    \"etc2-rgba8unorm-srgb\": { texelSize: 16 },\r\n    \"eac-r11unorm\": { texelSize: 8 },\r\n    \"eac-r11snorm\": { texelSize: 8 },\r\n    \"eac-rg11unorm\": { texelSize: 16 },\r\n    \"eac-rg11snorm\": { texelSize: 16 },\r\n    \"astc-4x4-unorm\": { texelSize: 16 },\r\n    \"astc-4x4-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-5x4-unorm\": { texelSize: 16 },\r\n    \"astc-5x4-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-5x5-unorm\": { texelSize: 16 },\r\n    \"astc-5x5-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-6x5-unorm\": { texelSize: 16 },\r\n    \"astc-6x5-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-6x6-unorm\": { texelSize: 16 },\r\n    \"astc-6x6-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-8x5-unorm\": { texelSize: 16 },\r\n    \"astc-8x5-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-8x6-unorm\": { texelSize: 16 },\r\n    \"astc-8x6-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-8x8-unorm\": { texelSize: 16 },\r\n    \"astc-8x8-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-10x5-unorm\": { texelSize: 16 },\r\n    \"astc-10x5-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-10x6-unorm\": { texelSize: 16 },\r\n    \"astc-10x6-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-10x8-unorm\": { texelSize: 16 },\r\n    \"astc-10x8-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-10x10-unorm\": { texelSize: 16 },\r\n    \"astc-10x10-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-12x10-unorm\": { texelSize: 16 },\r\n    \"astc-12x10-unorm-srgb\": { texelSize: 16 },\r\n    \"astc-12x12-unorm\": { texelSize: 16 },\r\n    \"astc-12x12-unorm-srgb\": { texelSize: 16 },\r\n};\r\n\r\nexport {\r\n    textureTypes,\r\n};\r\n\r\n","import * as MemoryMetrics from \"../helpers/memory-metrics\";\r\nimport { textureTypes } from \"./texture-types\";\r\n\r\nfunction computeMemoryCost(width: number, height: number, format: GPUTextureFormat): number {\r\n    const texelSize = textureTypes[format];\r\n    return width * height * texelSize.texelSize;\r\n}\r\n\r\nclass Texture {\r\n    private static readonly objectType: string = \"GPUTexture\";\r\n\r\n    private width: number = 1;\r\n    private height: number = 1;\r\n    private texture: GPUTexture | null = null;\r\n\r\n    public constructor(\r\n        private readonly device: GPUDevice,\r\n        public readonly format: GPUTextureFormat,\r\n        public readonly usage: GPUTextureUsageFlags\r\n    ) {\r\n    }\r\n\r\n    public get(): GPUTexture {\r\n        if (!this.texture) {\r\n            if (this.width <= 0 || this.height <= 0) {\r\n                throw new Error(`Invalid texture size ${this.width}x${this.height}.`);\r\n            }\r\n\r\n            this.texture = this.device.createTexture({\r\n                size: [this.width, this.height],\r\n                format: this.format,\r\n                usage: this.usage,\r\n            });\r\n            const width = this.texture.width;\r\n            const height = this.texture.height;\r\n\r\n            MemoryMetrics.registerAllocation({\r\n                objectType: Texture.objectType,\r\n                objectSizeInBytes: computeMemoryCost(width, height, this.format),\r\n                properties: `${width}x${height}, ${this.format}`,\r\n            });\r\n        }\r\n        return this.texture;\r\n    }\r\n\r\n    public getView(descriptor?: GPUTextureDescriptor): GPUTextureView {\r\n        return this.get().createView(descriptor);\r\n    }\r\n\r\n    public getWidth(): number {\r\n        return this.width;\r\n    }\r\n\r\n    public getHeight(): number {\r\n        return this.height;\r\n    }\r\n\r\n    public setSize(width: number, height: number): boolean {\r\n        if (this.width !== width || this.height !== height) {\r\n            this.width = width;\r\n            this.height = height;\r\n            this.free();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public hasUsage(usage: GPUTextureUsageFlags): boolean {\r\n        return (this.usage & usage) === usage;\r\n    }\r\n\r\n    public free(): void {\r\n        if (this.texture) {\r\n            const width = this.texture.width;\r\n            const height = this.texture.height;\r\n            this.texture.destroy();\r\n            this.texture = null;\r\n\r\n            MemoryMetrics.registerDestruction({\r\n                objectType: Texture.objectType,\r\n                objectSizeInBytes: computeMemoryCost(width, height, this.format),\r\n                properties: `${width}x${height}, ${this.format}`,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Texture,\r\n};\r\n\r\n","import { iterateOnAllPermutations } from \"./helpers/utils\";\r\nimport { type AttributeDefinition, StructType } from \"./host-shareable-types/struct-type\";\r\nimport { WebGPUBuffer } from \"./webgpu-buffer\";\r\n\r\nclass UniformsBuffer {\r\n    public static tryToOptimize: boolean = true;\r\n\r\n    private readonly device: GPUDevice;\r\n    private readonly structType: StructType;\r\n    private readonly data: ArrayBuffer;\r\n    private readonly gpuBuffer: WebGPUBuffer;\r\n    private needsToUpload: boolean = true;\r\n\r\n    public constructor(device: GPUDevice, attributesDefinitions: AttributeDefinition[]) {\r\n        this.device = device;\r\n        this.structType = new StructType(\"Uniforms\", attributesDefinitions);\r\n\r\n        if (UniformsBuffer.tryToOptimize && !this.structType.isCompact()) {\r\n            const bestPermutation = UniformsBuffer.compact(attributesDefinitions);\r\n            const bestStructType = new StructType(\"Uniforms\", bestPermutation);\r\n            if (bestStructType.size < this.structType.size) {\r\n                console.warn(`Uniforms could be more compact.\\nCurrent is of size ${this.structType.size}:\\n${this.structType}\\n\\nwhile best is of size ${bestStructType.size}:\\n${bestStructType}`);\r\n            }\r\n        }\r\n\r\n        this.data = new ArrayBuffer(this.structType.size);\r\n        this.gpuBuffer = new WebGPUBuffer(this.device, {\r\n            size: this.structType.size,\r\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\r\n        });\r\n    }\r\n\r\n    public get bindingResource(): GPUBindingResource {\r\n        return this.gpuBuffer.bindingResource;\r\n    }\r\n\r\n    public setValueFromName(name: string, value: unknown): void {\r\n        this.structType.setValueFromName(this.data, 0, name, value);\r\n        this.needsToUpload = true;\r\n    }\r\n\r\n    public uploadToGPU(): void {\r\n        if (this.needsToUpload) {\r\n            this.device.queue.writeBuffer(this.gpuBuffer.gpuBuffer, 0, this.data);\r\n            this.needsToUpload = false;\r\n        }\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.structType.toString();\r\n    }\r\n\r\n    public free(): void {\r\n        this.gpuBuffer.free();\r\n    }\r\n\r\n    public static compact(attributesDefinitions: AttributeDefinition[]): AttributeDefinition[] {\r\n        let bestPermutation = attributesDefinitions;\r\n        let minSize = new StructType(\"Uniforms\", attributesDefinitions).size;\r\n\r\n        for (const permutation of iterateOnAllPermutations(attributesDefinitions)) {\r\n            const size = new StructType(\"Uniforms\", permutation).size;\r\n            if (size < minSize) {\r\n                minSize = size;\r\n                bestPermutation = permutation;\r\n            }\r\n        }\r\n\r\n        return bestPermutation;\r\n    }\r\n}\r\n\r\nexport {\r\n    UniformsBuffer,\r\n    StructType,\r\n};\r\n\r\n","import * as MemoryMetrics from \"./helpers/memory-metrics\";\r\n\r\ntype Descriptor = {\r\n    size: GPUSize64;\r\n    usage: GPUBufferUsageFlags;\r\n};\r\n\r\nclass WebGPUBuffer {\r\n    private static readonly objectType: string = \"GPUBuffer\";\r\n\r\n    private buffer: GPUBuffer | null = null;\r\n    public readonly size: GPUSize64;\r\n    private readonly usage: GPUBufferUsageFlags;\r\n\r\n    public constructor(\r\n        private readonly device: GPUDevice,\r\n        descriptor: Descriptor\r\n    ) {\r\n        this.size = descriptor.size;\r\n        this.usage = descriptor.usage;\r\n    }\r\n\r\n    public get gpuBuffer(): GPUBuffer {\r\n        if (!this.buffer) {\r\n            this.buffer = this.createBuffer({\r\n                size: this.size,\r\n                usage: this.usage,\r\n            });\r\n        }\r\n        return this.buffer;\r\n    }\r\n\r\n    public get bindingResource(): GPUBindingResource {\r\n        return { buffer: this.gpuBuffer };\r\n    }\r\n\r\n    public getMappedRange(offset?: GPUSize64, size?: GPUSize64): ArrayBuffer {\r\n        if (!this.buffer) {\r\n            this.buffer = this.createBuffer({\r\n                size: this.size,\r\n                usage: this.usage,\r\n                mappedAtCreation: true,\r\n            });\r\n        }\r\n        if (this.buffer.mapState !== \"mapped\") {\r\n            throw new Error();\r\n        }\r\n        return this.buffer.getMappedRange(offset, size);\r\n    }\r\n\r\n    public unmap(): void {\r\n        if (!this.buffer || this.buffer.mapState !== \"mapped\") {\r\n            throw new Error();\r\n        }\r\n        this.buffer.unmap();\r\n    }\r\n\r\n    public hasUsage(usage: GPUBufferUsageFlags): boolean {\r\n        return (this.usage & usage) === usage;\r\n    }\r\n\r\n    public free(): void {\r\n        if (this.buffer) {\r\n            this.buffer.destroy();\r\n            this.buffer = null;\r\n\r\n            MemoryMetrics.registerDestruction({\r\n                objectType: WebGPUBuffer.objectType,\r\n                objectSizeInBytes: this.size,\r\n            });\r\n        }\r\n    }\r\n\r\n    private createBuffer(descriptor: GPUBufferDescriptor): GPUBuffer {\r\n        const buffer = this.device.createBuffer(descriptor);\r\n\r\n        MemoryMetrics.registerAllocation({\r\n            objectType: WebGPUBuffer.objectType,\r\n            objectSizeInBytes: this.size,\r\n        });\r\n\r\n        return buffer;\r\n    }\r\n}\r\n\r\nexport {\r\n    WebGPUBuffer,\r\n};\r\n\r\n","import { Texture } from \"./texture/texture\";\r\nimport * as WebGPU from \"./webgpu-device\";\r\n\r\ntype RenderPassOptions = {\r\n    clearDepth?: boolean;\r\n    clearColor?: boolean;\r\n};\r\n\r\nclass WebGPUCanvas {\r\n    private readonly devicePixelRatio: number;\r\n    private readonly context: GPUCanvasContext;\r\n    private readonly canvasConfiguration: GPUCanvasConfiguration;\r\n\r\n    public readonly textureFormat: GPUTextureFormat;\r\n    public readonly clearColor: GPUColorDict;\r\n\r\n    private readonly depthTexture: Texture;\r\n    public depthTextureView: GPUTextureView;\r\n\r\n    public constructor(private readonly canvas: HTMLCanvasElement) {\r\n        this.devicePixelRatio = window.devicePixelRatio;\r\n\r\n        {\r\n            const contextName = \"webgpu\";\r\n            const context = canvas.getContext(contextName);\r\n            if (!context) {\r\n                throw new Error(`Failed to get a '${contextName}' context from canvas.`);\r\n            }\r\n            this.context = context;\r\n        }\r\n\r\n        const device = WebGPU.device;\r\n        if (!device) {\r\n            throw new Error(\"No GPU device\");\r\n        }\r\n        this.canvasConfiguration = {\r\n            device,\r\n            format: navigator.gpu.getPreferredCanvasFormat(),\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n            alphaMode: \"opaque\",\r\n            // no \"size\" attribute to use the canvas' width and height\r\n        };\r\n        this.context.configure(this.canvasConfiguration);\r\n        this.depthTexture = new Texture(device, \"depth16unorm\", GPUTextureUsage.RENDER_ATTACHMENT);\r\n        this.depthTextureView = this.depthTexture.getView();\r\n\r\n        this.textureFormat = this.canvasConfiguration.format;\r\n        this.clearColor = { r: 0, g: 0, b: 0, a: 1 };\r\n\r\n        this.adjustSize();\r\n    }\r\n\r\n    public get aspectRatio(): number {\r\n        return this.width / this.height;\r\n    }\r\n\r\n    public get device(): GPUDevice {\r\n        return this.canvasConfiguration.device;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.canvas.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.canvas.height;\r\n    }\r\n\r\n    public get depthTextureFormat(): GPUTextureFormat {\r\n        return this.depthTexture.format;\r\n    }\r\n\r\n    public setClearColor(color: [number, number, number, number]): void {\r\n        this.clearColor.r = color[0];\r\n        this.clearColor.g = color[1];\r\n        this.clearColor.b = color[2];\r\n        this.clearColor.a = color[3];\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        const actualWidth = Math.floor(this.devicePixelRatio * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.devicePixelRatio * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n\r\n            if (this.depthTexture.setSize(this.canvas.width, this.canvas.height)) {\r\n                this.depthTextureView = this.depthTexture.getView();\r\n            }\r\n        }\r\n    }\r\n\r\n    public beginRenderPass(commandEncoder: GPUCommandEncoder, options?: RenderPassOptions): GPURenderPassEncoder {\r\n        const renderPassDescriptor = this.getRenderPassDescriptor(options);\r\n        const renderPassEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\r\n        renderPassEncoder.setViewport(0, 0, this.width, this.height, 0, 1);\r\n        renderPassEncoder.setScissorRect(0, 0, this.width, this.height);\r\n        return renderPassEncoder;\r\n    }\r\n\r\n    private getRenderPassDescriptor(options?: RenderPassOptions): GPURenderPassDescriptor {\r\n        return {\r\n            colorAttachments: [{\r\n                view: this.context.getCurrentTexture().createView(),\r\n                clearValue: this.clearColor,\r\n                loadOp: (options?.clearColor === false) ? \"load\" : \"clear\",\r\n                storeOp: \"store\",\r\n            }],\r\n            depthStencilAttachment: {\r\n                view: this.depthTexture.getView(),\r\n                depthClearValue: 1,\r\n                depthLoadOp: (options?.clearDepth === false) ? \"load\": \"clear\",\r\n                depthStoreOp: \"store\",\r\n                stencilReadOnly: true,\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\nexport {\r\n    WebGPUCanvas,\r\n};\r\n\r\n","/// <reference types=\"../page-interface-generated\" />\r\n\r\nfunction throwAndDisplayException(id: string, message: string): void {\r\n    Page.Demopage.setErrorMessage(id, message);\r\n    Page.Canvas.toggleFullscreen(false);\r\n    throw new Error(message);\r\n}\r\n\r\nconst gpu: GPU = navigator.gpu;\r\nif (!gpu) {\r\n    throwAndDisplayException(\"webgpu-support\", \"Your browser does not seem to support WebGPU.\");\r\n}\r\n\r\nlet adapter: GPUAdapter | null = null;\r\nlet device: GPUDevice | null = null;\r\n\r\nasync function requestDevice(): Promise<GPUDevice | null> {\r\n    if (!device) {\r\n        adapter = await gpu.requestAdapter({\r\n            powerPreference: \"high-performance\"\r\n        });\r\n\r\n        if (adapter) {\r\n            if (adapter.isFallbackAdapter) {\r\n                Page.Demopage.setErrorMessage(\"webgpu-is-fallback\", \"The retrieved GPU adapter is fallback. The performance might be degraded.\");\r\n            }\r\n            device = await adapter.requestDevice();\r\n        } else {\r\n            throwAndDisplayException(\"webgpu-adapter\", \"Request for GPU adapter failed.\");\r\n        }\r\n    }\r\n    return device;\r\n}\r\n\r\nexport {\r\n    adapter,\r\n    device,\r\n    gpu,\r\n    requestDevice as initialize,\r\n};\r\n","import { StructType, UniformsBuffer } from \"./uniforms-buffer\";\r\n\r\ntype StructOrUniform = StructType | UniformsBuffer;\r\n\r\ntype Data = {\r\n    code: string;\r\n    aliases?: Record<string, string>;\r\n    injected?: Record<string, string>;\r\n    structs?: StructOrUniform[];\r\n};\r\n\r\nabstract class ShaderModule {\r\n    public static create(device: GPUDevice, data: Data): GPUShaderModule {\r\n        let code = data.code;\r\n\r\n        if (data.injected) {\r\n            for (const [key, value] of Object.entries(data.injected)) {\r\n                code = code.replace(key, value);\r\n            }\r\n        }\r\n\r\n        if (data.structs) {\r\n            const structsAsString = data.structs.map(struct => struct.toString());\r\n            code = structsAsString.join(\"\\n\\n\") + \"\\n\\n\" + code;\r\n        }\r\n\r\n        if (data.aliases) {\r\n            const aliasesAsString = Object.entries(data.aliases).map(([name, value]: [string, string]) => {\r\n                return `alias ${name} = ${value};`;\r\n            });\r\n\r\n            code = aliasesAsString.join(\"\\n\") + \"\\n\\n\" + code;\r\n        }\r\n\r\n        return device.createShaderModule({ code });\r\n    }\r\n}\r\n\r\nexport {\r\n    ShaderModule,\r\n};\r\n\r\n","export * as Types from \"./host-shareable-types/types\";\r\nexport { Texture } from \"./texture/texture\";\r\nexport { UniformsBuffer as Uniforms } from \"./uniforms-buffer\";\r\nexport { WebGPUBuffer as Buffer } from \"./webgpu-buffer\";\r\nexport { WebGPUCanvas as Canvas } from \"./webgpu-canvas\";\r\nexport * from \"./webgpu-device\";\r\nexport { ShaderModule } from \"./webgpu-shader-module\";\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/ts/main.ts\");\n",""],"names":[],"sourceRoot":""}